<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2016-09-10T20:17:48+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HISAT2使用问答]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/09/10/hisat2-faq/"/>
    <updated>2016-09-10T16:32:47+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/09/10/hisat2-faq</id>
    <content type="html"><![CDATA[<p><a href="https://ccb.jhu.edu/software/hisat2/manual.shtml#the-hisat2-build-indexer">HISAT2</a>是一款用于“对应（map）”二代测序数据（全基因组、转录组和外显子组）至目标基因组的工具，用来替代<a href="http://ccb.jhu.edu/software/hisat/index.shtml">HISAT</a>和<a href="http://www.ccb.jhu.edu/software/tophat/index.shtml">TopHat2</a>。本文汇集一些使用HISAT2的常见问题问答。</p>

<h2 id="hisat2">1. 如何解读HISAT2的输出统计？</h2>

<p>一个常见的双端测序样本HISAT2输出统计：</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">10000 reads; of these:
</span><span class="line">  10000 (100.00%) were paired; of these:
</span><span class="line">    650 (6.50%) aligned concordantly 0 times
</span><span class="line">    8823 (88.23%) aligned concordantly exactly 1 time
</span><span class="line">    527 (5.27%) aligned concordantly &gt;1 times
</span><span class="line">    ----
</span><span class="line">    650 pairs aligned concordantly 0 times; of these:
</span><span class="line">      34 (5.23%) aligned discordantly 1 time
</span><span class="line">    ----
</span><span class="line">    616 pairs aligned 0 times concordantly or discordantly; of these:
</span><span class="line">      1232 mates make up the pairs; of these:
</span><span class="line">        660 (53.57%) aligned 0 times
</span><span class="line">        571 (46.35%) aligned exactly 1 time
</span><span class="line">        1 (0.08%) aligned &gt;1 times
</span><span class="line">96.70% overall alignment rate</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>总共10000对reads；</p>
  </li>
  <li>
    <p>8823对concordant pairs（一对既方向匹配又有合适距离的reads）有1次精确比对；527对concordant pairs有1次以上比对；34对disconcordant pairs;</p>
  </li>
  <li>
    <p>616对不是concordant pairs，也不是disconcordant pairs中，571个reads有1次精确比对；1个read有1次以上比对；660个reads没有比对成功。</p>
  </li>
  <li>
    <p>因此，整体比对率为1 - (660 / 2) / 10000</p>
  </li>
</ul>

<h2 id="hisat2-1">2. 使用HISAT2前，是否需要对原始数据进行清洗？</h2>

<p>需要。</p>

<h3 id="section">更新记录</h3>

<p>2016年9月10日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用参考基因组下载地址]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/09/10/reference-genome-location/"/>
    <updated>2016-09-10T13:17:00+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/09/10/reference-genome-location</id>
    <content type="html"><![CDATA[<p>本文收集了一些常用参考基因组的下载网址。</p>

<ol>
  <li>
    <p><a href="https://www.ncbi.nlm.nih.gov/genome/">NCBI genome</a></p>
  </li>
  <li>
    <p><a href="http://uswest.ensembl.org/info/data/ftp/index.html">Ensembl FTP</a></p>
  </li>
  <li>
    <p><a href="http://hgdownload.cse.ucsc.edu/goldenPath/">UCSC FTP</a></p>
  </li>
  <li>
    <p><a href="http://www.gencodegenes.org/">GENCODE</a>：只有人和大鼠，注释较好。</p>
  </li>
  <li>
    <p><a href="http://support.illumina.com/sequencing/sequencing_software/igenome.html">iGenomes</a>：部分模式生物bowtie、bowtie2和BWA索引基因组。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li><a href="https://ccb.jhu.edu/software/hisat2/index.shtml">HISAT2</a>：部分模式生物HISAT2索引基因组。</li>
</ol>

<h3 id="section">更新记录</h3>

<p>2016年9月10日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么不推荐在R语言中随意按照下标操作矩阵]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/07/21/subset-matrix-in-r/"/>
    <updated>2016-07-21T19:35:29+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/07/21/subset-matrix-in-r</id>
    <content type="html"><![CDATA[<p>这篇博文的目的是展示R语言中下标操作矩阵的潜在问题。R语言提供了多种方法提取一个矩阵的单个或者部分元素，不同方法对应的效率在Hadley Wickham的<a href="http://adv-r.had.co.nz/Performance.html#language-performance">Advance R</a>中已有讨论。这些方法中，使用最广泛的是通过下标（行或者列）取值，即操作符<code class="language-R">[</code>。然而，这种方法存在潜在问题，即内存中会拷贝原始对象。</p>

<p>举例：首先建立一个矩阵，之后取这个矩阵除了第一行之外的部分，接下来操作这个部分矩阵。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>manipulate </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1">## step1: build matrix</span>
</span><span class="line">n <span class="o">&lt;-</span> <span class="m">8000</span>
</span><span class="line">tmp1 <span class="o">&lt;-</span> <span class="kt">matrix</span><span class="p">(</span>rnorm<span class="p">(</span>n <span class="o">*</span> n<span class="p">),</span> nrow <span class="o">=</span> n<span class="p">,</span> ncol <span class="o">=</span> n<span class="p">)</span>
</span><span class="line"><span class="kp">gc</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c1">## step2: manipulate a subset of matrix</span>
</span><span class="line"><span class="kp">sink</span><span class="p">(</span><span class="s">&#39;/dev/null&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kp">apply</span><span class="p">(</span>tmp1<span class="p">[</span><span class="m">2</span><span class="o">:</span>n<span class="p">,</span> <span class="p">],</span> <span class="m">1</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> x<span class="p">[</span><span class="m">1</span><span class="p">])</span>
</span><span class="line"><span class="kp">sink</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c1">## step3: garbage collection</span>
</span><span class="line"><span class="kp">gc</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>内存使用情况如下：</p>

<p><img src="http://yulongniu.bionutshell.org/images/R_apply_memory.png" title="image" alt="UCSC下载rRNA注释" /></p>

<ul>
  <li>
    <p>标记1内存上升，因为建立了<code class="language-R">tmp1</code>的矩阵；</p>
  </li>
  <li>
    <p>标记2内存再次上升，主要因为使用下标取矩阵操作，<code class="language-R">tmp1[2:n, ]</code>；</p>
  </li>
  <li>
    <p>标记3内存下降，因为手动执行垃圾回收。</p>
  </li>
</ul>

<p>可以明显看到内存中多余的垃圾对象。如果使用<code class="language-R">for</code>循环形式，就可以有效避免内存对象拷贝。虽然，R在内存空间不足时，会自动执行<code class="language-R">gc()</code>。但是，执行程序时，不能全指望自动垃圾回收，毕竟有时回收得并不及时，而新的对象又相继生成。这种情况下，内存空间不足就成为很严重的问题。</p>

<p>R版本3.3.1。</p>

<h3 id="section">更新记录</h3>

<p>2016年7月21日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言指针记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c/"/>
    <updated>2016-04-17T22:42:25+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c</id>
    <content type="html"><![CDATA[<h2 id="c">1. C语言指针基础</h2>

<p>C语言的指针设计是一致和优雅的。C语言中“指针（pointer）”就是<strong>地址</strong>（所以不能用普通整数储存地址），“指针变量（pointer variable）”是存储地址的变量。一个指针变量，<strong>只能</strong>指向一个特定类型的变量，比如整数、浮点数、字符或者指针。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Initiate a pointer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">tmp1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tmp2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* &quot;=&quot; does not mean &quot;assignment&quot;, it just means &quot;initiating&quot; */</span>
</span><span class="line"><span class="cm">/* p is the address of tmp1, *p is equal to the value of tmp1*/</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tmp1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class="line"><span class="n">q</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tmp2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* p points to tmp1, q points to tmp2, now the value of tmp2 is 1*/</span>
</span><span class="line"><span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* p and q now both points to tmp1*/</span>
</span><span class="line"><span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h2 id="section">2. 指针运算有且只有三种</h2>

<ul>
  <li>
    <p>指针加一个整数，该表达式值为同类型指针；</p>
  </li>
  <li>
    <p>指针减一个整数，该表达式值为同类型指针；</p>
  </li>
  <li>
    <p>指针与指针相减，该表达式值为整数。</p>
  </li>
</ul>

<hr />
<p>指针与<code>++</code>和<code>--</code>结合的表达式</p>

<table>
  <thead>
    <tr>
      <th>表达式</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>*p++</code></td>
      <td>表达式值为p指针指向内容，之后指针自增</td>
    </tr>
    <tr>
      <td><code>(*p)++</code></td>
      <td>表达式值为p指针指向内容，之后指向内容自增</td>
    </tr>
    <tr>
      <td><code>++*p</code></td>
      <td>表达式值为p指针指向内容自增，指针不变</td>
    </tr>
    <tr>
      <td><code>*++p</code></td>
      <td>表达式值为p指针自增后指向内容</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="section-1">3. 指针与数组</h2>

<ul>
  <li>
    <p>C语言只有一维数组，其中元素可以是数（整数或浮点数）、字符和指针（字符串、其他类型数组或者其他类型指针）。</p>
  </li>
  <li>
    <p>数组地址为第一个元素地址。可以使用数组名作为指向数组第一个元素的指针，但数组名<span style="color: red">不能</span>被修改，例如不能被重新赋值。因此，假如<code>a</code>数组，<code>a+i</code>等价与<code>&amp;a[i]</code>，<code>*(a+i)</code>等价与<code>a[i]</code>。</p>
  </li>
  <li>
    <p>对于二维数组<code>a</code>，<code>a</code>表示指向第一行的指针（即指针指向一维数组），<code>a[0]</code>表示指向第一行第一个元素的指针。理解<code>a[0]</code>：<code>a[0]</code>等价与<code>*(a + 0)</code>，表示指针<code>a</code>指向的内容，即第一行数组；同时，一维数组名表示指向第一个元素的指针。</p>
  </li>
  <li>
    <p>“字符串字面量（string literal）”被作为字符数组储存，类型为<code>char *</code>，因此对于字符串变量<code>char s[] = "abc";</code>和<code>char *s = "abc";</code>都合法。但是，<code>int a[] = {1, 2, 3};</code>合法，<s>int *a = {1, 2, 3};</s>非法。</p>
  </li>
</ul>

<hr />

<table>
  <thead>
    <tr>
      <th>数组类型</th>
      <th>初始化声明<sup>1</sup></th>
      <th>函数形参声明的指针形式<sup>2</sup></th>
      <th>第一个元素指针声明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>元素为整数的数组</td>
      <td><code>int a[LEN]</code></td>
      <td><code>int *</code></td>
      <td><code>int *p = &amp;a[0]</code>或<code>int *p = a</code></td>
    </tr>
    <tr>
      <td>元素为整数数组的数组（“二维数组”）</td>
      <td><code>int a[ROWNUM][COLNUM]</code></td>
      <td><code>int (*)[COLNUM]</code></td>
      <td><code>int *p = &amp;a[0]</code>或<code>int (*p)[COLNUM] = a</code>　</td>
    </tr>
    <tr>
      <td>元素为字符的数组（“字符串”）</td>
      <td><code>char a[LEN]</code></td>
      <td><code>char *</code></td>
      <td><code>char *p = &amp;a[0]</code>或<code>char *p = a</code></td>
    </tr>
    <tr>
      <td>元素为字符串指针的数组（“字符串数组”）</td>
      <td><code>char *a[LEN]</code></td>
      <td><code>char **</code>或<code>char *[LEN]</code></td>
      <td><code>char **p = &amp;a[0]</code>或<code>char **p = a</code></td>
    </tr>
    <tr>
      <td>元素为结构、联合或枚举的数组</td>
      <td><code>struct t a[LEN]</code></td>
      <td><code>struct t *</code></td>
      <td><code>struct t *p = &amp;a[0]</code>或<code>struct t *p = a</code></td>
    </tr>
  </tbody>
</table>

<p><sup>1</sup>：初始化声明表示在声明同时初始化的形式，比如<code>int a[3] = {1, 2, 3}</code>、<code>char a[] = 'hello'</code>或者<code>char *a[] = {"hello", "world!"}</code>。</p>

<p><sup>2</sup>：在函数中声明形参时，对应的指针类型。形参可以是完整类型或者元素类型，比如，形参<code>char *a[LEN]</code>是完整类型，形参<code>char **a</code>是元素类型；再比如，形参<code>int a[ROWNUM][COLNUM]</code>是完整类型，形参<code>int (*a)[COLNUM]</code>是元素类型；再比如，形参<code>char a[]</code>是完整类型，形参<code>char *a</code>是元素类型。编译器把数组型的形参视为指针。</p>

<hr />

<h2 id="section-2">4. 指针与函数</h2>

<ul>
  <li>
    <p>C语言传入函数的都是值（数组被当做指针传入），而且形参对应对象的一个副本。</p>

    <ul>
      <li>
        <p>形参为指针，可以改变指向的内容。</p>
      </li>
      <li>
        <p>形参为数组，传入指针（指向第一个元素地址）副本。因此，即便是数组名，也可以修改，即可以把数组名当做一个指针用。也可以使用指针传入部分数组。如下代码合法：</p>
      </li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">TestFun</span><span class="p">(</span><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">  <span class="o">++</span><span class="n">a</span><span class="p">;</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">5. 注意事项</h2>

<ul>
  <li>
    <p>留意未初始化指针，修改未初始化指针所指向内容是<span style="color: red">危险</span>的。字符指针<span style="color: red">必须</span>初始化，比如指向已有字符变量、字符串字面量或动态分配字符串。</p>
  </li>
  <li>
    <p>已有数组名<span style="color: red">不能被</span>重新赋值，<span style="color: red">不能</span>指向其他地址。</p>
  </li>
  <li>
    <p>函数返回指针时，<span style="color: red">不能</span>返回指向局部自动变量的指针，因为局部变量和对应指针在返回时销毁。可以返回指针形式的形参、指向外部变量的指针、指向声明为<code class="language-c">static</code>的局部变量和指向动态分配内存的指针。如下代码合法：</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>return pointer points to malloc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="nf">Add</span><span class="p">(</span><span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">new</span><span class="p">;</span>
</span><span class="line">  <span class="n">new</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">node</span><span class="p">));</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">  <span class="k">return</span> <span class="n">new</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">补充材料</h3>

<ul>
  <li><a id="pointer_array">Pointers and arrays in C</a></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Using pointers to operate arrays in c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define N 5</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintVal</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)[</span><span class="n">colnum</span><span class="p">]);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array2</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="o">**</span><span class="n">a</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray2</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">testVal</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="n">PrintVal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">testVal</span><span class="p">);</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">testArray</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class="line">  <span class="n">PrintArray</span><span class="p">(</span><span class="n">testArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">char</span> <span class="n">testString</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;hell&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="n">PrintString</span><span class="p">(</span><span class="n">testString</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">test2Array</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="n">Print2Array</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">test2Array</span><span class="p">);</span>
</span><span class="line">  <span class="kt">int</span> <span class="o">*</span><span class="n">test2Array2</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">test2Array</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">4</span><span class="p">]};</span>
</span><span class="line">  <span class="n">Print2Array2</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">test2Array2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">char</span> <span class="o">*</span><span class="n">testStringArray</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Hello,&quot;</span><span class="p">,</span> <span class="s">&quot;it&quot;</span><span class="p">,</span> <span class="s">&quot;is&quot;</span><span class="p">,</span> <span class="s">&quot;me&quot;</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">};</span>
</span><span class="line">  <span class="n">PrintStringArray</span><span class="p">(</span><span class="n">testStringArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">  <span class="n">PrintStringArray2</span><span class="p">(</span><span class="n">testStringArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintVal</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)[</span><span class="n">colnum</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)[</span><span class="n">colnum</span><span class="p">];</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">colnum</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">q</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">rownum</span><span class="p">;</span> <span class="o">++</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array2</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="o">**</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">colnum</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">q</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">rownum</span><span class="p">;</span> <span class="o">++</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">char</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray2</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">char</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  2
</span><span class="line">  2  3  5  0  0
</span><span class="line">hell
</span><span class="line">  1  2  3  4  5
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  1  2  3  4  5
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">Hello,
</span><span class="line">it
</span><span class="line">is
</span><span class="line">me
</span><span class="line">!
</span><span class="line">Hello,
</span><span class="line">it
</span><span class="line">is
</span><span class="line">me
</span><span class="line">!</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">参考资料</h3>

<ul>
  <li>KN King: <a href="http://www.amazon.com/Programming-Modern-Approach-2nd-Edition/dp/0393979504">C Programming: A Modern Approach, 2nd Edition</a>, 2008.</li>
</ul>

<h3 id="section-6">更新记录</h3>

<p>201６年４月17日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XML中XPath规则总结]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/10/25/xpath-xml/"/>
    <updated>2015-10-25T19:05:33+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/10/25/xpath-xml</id>
    <content type="html"><![CDATA[<p><a href="http://www.w3.org/TR/xpath-30/">XPath</a>提供了一种对XML节点、节点属性和内容快速查询的规则。在各种编程语言中都有实现，比如C语言的<a href="http://www.xmlsoft.org/">libxml2</a>和对应的R包 <a href="https://cran.r-project.org/web/packages/xml2/index.html">xml2</a>。</p>

<h2 id="section">1. 查询规则</h2>

<p>XPath查询集中在三个对象：节点、节点属性和节点内容。</p>

<h3 id="section-1">1.1 选择节点</h3>

<ul>
  <li>
    <p><code>/nodeA/nodeB</code>：nodeA为根节点，nodeA下的所有nodeB节点；等价于<code>nodeB</code>。</p>
  </li>
  <li>
    <p><code>//nodeB</code>：所有nodeB节点，在R包xml2中（比如函数<code class="language-bash">xml_find_all()</code>），<code>//nodeB</code>搜索范围是整个文档，忽略当前节点；而<code>.//nodeB</code>搜索范围是当前节点之下。</p>
  </li>
</ul>

<!--more-->

<ul>
  <li>
    <p><code>//nodeB[1]</code>：所有nodeB节点的第一个；<code>//nodeB[last()-1]</code>：所有nodeB节点的倒数第二个；<code>nodeA/nodeB[position()&lt;3]</code>:当前nodeA节点，其下所有nodeB子节点的前两个。</p>
  </li>
  <li>
    <p><code>/nodeA/*</code>：nodeA为根节点，nodeA下的所有节点；<code>/*/*/nodeC</code>：所有拥有两个父节点的nodeC节点；<code>//*</code>：所有节点。</p>
  </li>
  <li>
    <p><code>//*[count(nodeD)=3]</code>：含有3个nodeD子节点的节点；<code>//*[count(*)=2]</code>：含有任意2个子节点的节点。</p>
  </li>
  <li>
    <p><code>//*[name()='nodeB']</code>：所有名称为“nodeB”的节点，等价于<code>//nodeB</code>；<code>//*[starts-with(name(),'N')]</code>：所有名称以“N”开头的节点；<code>//*[contains(name(),'N')]</code>：所有名称中含有“N”的节点；<code>//*[string-length(name()) = 3]</code>：所有名称的字符串长度等于3的节点。</p>
  </li>
  <li>
    <p><code>//nodeA | //nodeB</code>：所有nodeA，以及nodeB的节点，多个搜索条件合并，搜索添加没有限制。</p>
  </li>
</ul>

<h3 id="section-2">1.2 选择节点属性</h3>

<ul>
  <li>
    <p><code>//@attr1</code>：所有拥有attr1的<strong>属性</strong>，注意：返回的不是节点，而是类此<code>attr1=text1</code>的属性；<code>//node1/@attr1</code>：所有node1带有的attr1属性；<code>//nodeB[@attr1]</code>：所有拥有“attr1”属性的nodeB节点；<code>//nodeB[@attr1='test1']</code>：所有拥有“attr1”属性为“test1”的nodeB节点；<code>//nodeB[normalize-space(@attr1)='test1']</code>：所有拥有attr1属性为“test1”（属性去除字符串前后空格，内部连续空格替换为一个空格）的nodeB节点。</p>
  </li>
  <li>
    <p><code>//node1[@*]</code>：所有node1带有任意属性的节点；<code>//node1[not(@*)]</code>：所有node1不带属性的节点。</p>
  </li>
  <li>
    <p><code>//node1[TEST1][TEST2]</code>：多个属性形选择可以首位相接，依次判断是否为真。TEST1和TEST2同时为真，返回选择结果。<code>//nodeA[nodeB/@attr1='test1']</code>：选择所有nodeA节点，这些nodeA节点拥有nodeB子节点且属性“attr1”为“test1”。<code>//nodeC[@attr1='test1'][../nodeB/@attr2='test2']</code>：选择所有拥有“attr1”为“test1”的nodeC节点，而且这些nodeC节点有属性“attr2”为“test2”的nodeB父亲节点。</p>
  </li>
</ul>

<h3 id="section-3">1.3 选择节点内容</h3>

<ul>
  <li>
    <p><code>/nodeA/nodeB[nodeC&gt;5]</code>：nodeA为根节点，nodeA下的nodeB节点，而且这些nodeB节点必须有nodeC子节点，并且nodeC子节点内容大于5。</p>
  </li>
  <li>
    <p><code>/nodeA/nodeB[nodeC&gt;5]/nodeD</code>：nodeA为根节点，nodeA下的nodeB节点，而且这些nodeB节点必须有nodeC子节点，并且nodeC子节点内容大于5。</p>
  </li>
  <li>
    <p><code>//nodeC[.=5]</code>：所有nodeC节点，其内容等于5。使用<code>.</code>代替自身。</p>
  </li>
  <li>
    <p><code>//nodeC/node()</code>：选择所有nodeC节点下的所有点，包括节点下内容和子节点（距离最近，不包括子节点的子节点）。</p>
  </li>
  <li>
    <p><code>//nodeC/text()</code>：选择所有nodeC节点下的内容。</p>
  </li>
</ul>

<h3 id="section-4">1.4 函数使用</h3>

<ul>
  <li><code>//nodeC[contains(text(), 'test1')]</code>：选择所有nodeC节点，而且nodeC节点下内容包括“test1”。</li>
</ul>

<h2 id="section-5">2. 轴</h2>

<ul>
  <li>
    <p><code>child::</code>：默认轴，可以省略。比如<code>/child::nodeA</code>等价于<code>/AAA</code>。</p>
  </li>
  <li>
    <p><code>descendant::</code>：选择上下文节点的所有子节点、子节点的子节点、子节点的子节点的子节点（依次类推，直至最后一个子节点）。<code>//nodeA/descendant::*</code>：所有nodeA节点的所有子节点、子节点的子节点等等；<code>//nodeA/descendant::nodeC</code>：所有nodeA节点的所有的nodeC子节点，nodeC可能是nodeA的某个子节点的子节点，区别与<code>//nodeA/nodeD</code>；<code>/descendant::*</code>：文档所有子节点、子节点的子节点等等，等价于<code>//*</code>。</p>
  </li>
  <li>
    <p><code>descendant-or-self::*</code>：选择上下文节点自身及其所有子节点、子节点的子节点（依次类推，直至最后一个子节点）。</p>
  </li>
  <li>
    <p><code>parent::</code>：选择上下文节点的父节点（最靠近的父节点）。<code>//nodeC/parent::*</code>：所有nodeC节点的所有父节点；<code>//nodeC/parent::nodeA[@attr1='test1']</code>：nodeC节点的nodeA父节点，这些nodeA父节点的“attr1”属性等于“test1”。</p>
  </li>
  <li>
    <p><code>ancestor::</code>：选择上下文节点的父节点，父节点的父节点（依次类推，直至最前一个父节点，包括根节点）。<code>//nodeC/ancestor::nodeA</code>：所有nodeC的父节点和父节点的父节点等等中的nodeA节点。</p>
  </li>
  <li>
    <p><code>ancestor-or-self::</code>：：选择上下文节点自身及其所有父节点，父节点的父节点（依次类推，直至最前一个父节点，包括根节点）。</p>
  </li>
  <li>
    <p><code>following-sibling::</code>：选择与上下文节点等级相同（即深度相同）的且位置靠后（上为前，下为后）的兄弟节点。<code>//nodeC/following-sibling::*</code>：所有nodeC节点等级相同的且位置靠后的兄弟节点。</p>
  </li>
  <li>
    <p><code>preceding-sibling::</code>：同<code>following-sibling::</code>，也是兄弟节点但位置靠前。</p>
  </li>
  <li>
    <p><code>following::</code>：选择上下文节点之后的所有节点（包括对应的子节点），但除了根节点。<code>//nodeC/following::*</code>：所有nodeC节点之后的所有节点。</p>
  </li>
  <li>
    <p><code>preceding::</code>：选择上下文节点之前的所有节点（包括对应的子节点），但除了根节点。</p>
  </li>
  <li>
    <p><code>//nodeC/ancestor::* | //nodeC/descendant::* | //nodeC/following::* | //nodeC/preceding::* | //nodeC/self::*</code>：所有节点，等价于<code>//*</code>或者等价于<code>/descendant::*</code>。</p>
  </li>
</ul>

<h2 id="section-6">参考网址</h2>

<ul>
  <li>
    <p><a href="https://zh.wikipedia.org/wiki/XPath">维基百科对XPath介绍</a></p>
  </li>
  <li>
    <p><a href="http://www.zvon.org/xxl/XPathTutorial/General_chi/examples.html">zvon中XPath的有趣例子</a></p>
  </li>
  <li>
    <p><a href="http://www.w3school.com.cn/xpath/index.asp">w3school的XPath中文教程</a></p>
  </li>
  <li>
    <p><a href="http://xccds1977.blogspot.sg/2013/02/xmlxpath.html">博文《XML和XPath使用方法备忘》</a></p>
  </li>
</ul>

<h3 id="section-7">更新记录</h3>

<p>2015年10月24日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spacemacs使用记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/09/30/spacemacs-tutorial/"/>
    <updated>2015-09-30T16:31:09+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/09/30/spacemacs-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a>结合了Vim和Emacs，而且定制了各种好用的设置，极大地减轻了Emacs的配置负担。推荐使用<code>hybrid</code>模式，这样浏览代码时可以使用Vim快捷键，进入Insert mode后使用Emacs快捷键。<code>hybrid</code>模式还有一个好处，编辑时方便汉字输入。Vim模式的先导键是<code>SPC</code>，在Emacs模式下是<code>M-m</code>。</p>

<!--more-->

<h2 id="vim">1. Vim快捷键记录</h2>

<p>在Spacemacs中<code>SPC-h-T</code>进入Emacs Evil快速入门。</p>

<h3 id="section">1.1 移动</h3>

<ul>
  <li>
    <p><code>h</code>：前</p>
  </li>
  <li>
    <p><code>j</code>：上</p>
  </li>
  <li>
    <p><code>k</code>：下</p>
  </li>
  <li>
    <p><code>l</code>：后</p>
  </li>
  <li>
    <p><code>gg</code>：</p>

    <ul>
      <li>
        <p>文档开始位置。</p>
      </li>
      <li>
        <p><code>G</code>：文档结束位置。</p>
      </li>
      <li>
        <p><code>:[number]</code>：跳转到制定行。</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="section-1">1.2 插入和替换</h3>

<ul>
  <li>
    <p><code>i</code>：</p>

    <ul>
      <li>
        <p>在<strong>光标前</strong>的位置，进入insert mode，进行编辑。</p>
      </li>
      <li>
        <p><code>ESC</code>或者<code>C-[</code>退出insert mode。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>r</code>：替换<strong>光标所在位置</strong>的单个字符。</p>
  </li>
  <li>
    <p><code>[number] d object</code>：</p>

    <ul>
      <li>
        <p><code>cw</code>或<code>ce</code>：从光标处删除整个单词，并进入insert mode。</p>
      </li>
      <li>
        <p><code>c$</code>：从光标处删除整行，并进入insert mode。</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="section-2">1.3 搜索和替换</h3>

<ul>
  <li>
    <p><code>\</code>：</p>

    <ul>
      <li>
        <p><code>\searchWord</code>：输入搜索内容，<code>n</code>向下搜索，<code>N</code>向上搜索。</p>
      </li>
      <li>
        <p><code>%</code>：在各种括号跳转。</p>
      </li>
      <li>
        <p><code>:s/old/new</code>：替换第一个匹配；<code>:s/old/new/g</code>：替换当前行匹配；<code>:#,#s/old/new/g</code>：替换行（<code>#</code>为行号）之间匹配；<code>:%s/old/new/g </code>：替换全文匹配。</p>
      </li>
      <li>
        <p><code>:%s/old/new/gc</code>：替换全文匹配，每一个匹配会提示是否匹配（输入<code>y</code>表示执行替换，<code>n</code>表示跳过匹配）。</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="section-3">1.4 删除、剪切和粘贴</h3>

<ul>
  <li>
    <p><code>x</code>：删除<strong>光标所在位置</strong>的单个字符。</p>
  </li>
  <li>
    <p><code>[number] d object</code>：</p>

    <ul>
      <li>
        <p><code>dw</code>：从光标处删除整个单词，包括单词后的空格。</p>
      </li>
      <li>
        <p><code>de</code>：从光标处删除整个单词，不包括空格。</p>
      </li>
      <li>
        <p><code>d$</code>：从光标处删除整行。</p>
      </li>
      <li>
        <p><code>dd</code>：删除光标所在的整行。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>p</code>：在<strong>光标后</strong>的位置粘贴剪切（<code>d</code>类和<code>x</code>操作）的内容。</p>
  </li>
</ul>

<h3 id="section-4">1.5 撤销</h3>

<ul>
  <li>
    <p><code>u</code>：撤销</p>
  </li>
  <li>
    <p><code>Ctr-R</code>：反撤销</p>
  </li>
</ul>

<h2 id="section-5">2. 常用快捷键</h2>

<p>常用的快捷键参考使用layer的说明文档。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL使用指南]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/07/29/postgresql-usage/"/>
    <updated>2015-07-29T18:24:10+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/07/29/postgresql-usage</id>
    <content type="html"><![CDATA[<h2 id="section">1. 查询</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Query </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="psql"><span class="line"><span class="c1">-- 选取特定的一列或者多列</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 选取全部列</span>
</span><span class="line"><span class="k">SELECT</span> <span class="o">*</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 去除重复，选取一列或多列中唯一元素</span>
</span><span class="line"><span class="c1">-- 如输入多列，则去除多列组合后的重复</span>
</span><span class="line"><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 指定输出列数</span>
</span><span class="line"><span class="c1">-- a是输出行数，b是输出起始行（第一行计为0）</span>
</span><span class="line"><span class="k">SELECT</span> <span class="k">column</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">LIMIT</span> <span class="n">a</span> <span class="k">OFFSET</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<ul>
  <li>
    <p>使用<code class="language-bash">;</code>结束一条SQL语句，本文中省略；</p>
  </li>
  <li>
    <p>返回未排序数据；</p>
  </li>
</ul>

<h2 id="section-1">2. 排序</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Ordering </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="psql"><span class="line"><span class="c1">-- 按照一列或者多列升序排序</span>
</span><span class="line"><span class="c1">-- 可以按照“不查询”的列排序</span>
</span><span class="line"><span class="c1">-- 先按照column2排，再按照column5排</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="n">column3</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column2</span><span class="p">,</span> <span class="n">column5</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 降序</span>
</span><span class="line"><span class="c1">-- DESC只作用于最靠近的唯一一列，即column2，不作用于column5</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="n">column3</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column2</span> <span class="k">DESC</span><span class="p">,</span> <span class="n">column5</span>
</span><span class="line">
</span><span class="line"><span class="c1">--使用查询列相对编号</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="n">column3</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="mf">2</span><span class="p">,</span> <span class="n">column5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>使用相对列查询时，不查询的列，比如上述例子的column5，不能用数字代替。</p>
  </li>
  <li>
    <p>使用相对列查询有风险，不采用。</p>
  </li>
  <li>
    <p>升序关键字为<code class="language-psql">ASC</code>，通常升序为默认。</p>
  </li>
  <li>
    <p><code class="language-psql">ORDER BY</code>必须在制定列和数据集后出现。</p>
  </li>
</ul>

<h2 id="section-2">3. 筛选</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Filter </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="psql"><span class="line"><span class="c1">-- ORDER BY语句需要在WHERE之后</span>
</span><span class="line"><span class="c1">-- AND表示“且”， OR表示“或”，第一个条件满足即终止</span>
</span><span class="line"><span class="c1">-- AND和OR可有任意多个</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="p">(</span><span class="n">column3</span> <span class="o">=</span> <span class="n">a</span> <span class="k">OR</span> <span class="n">column3</span> <span class="o">=</span> <span class="n">b</span><span class="p">)</span> <span class="k">AND</span> <span class="n">column1</span> <span class="o">=</span> <span class="n">c</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column3</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 多个OR语句使用IN代替，比如上述例子为：</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">column3</span> <span class="k">IN</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="k">AND</span> <span class="n">column1</span> <span class="o">=</span> <span class="n">c</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column3</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- NOT与IN连用</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">column3</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- BETWEEN a AND b语句，a必须小于等于b</span>
</span><span class="line"><span class="c1">-- 如a等于b，则相当于筛选与a（或者b）相等数值</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">column1</span> <span class="k">BETWEEN</span> <span class="n">a</span> <span class="k">AND</span> <span class="n">b</span>
</span><span class="line">
</span><span class="line"><span class="c1">--筛选NULL值使用IS NULL</span>
</span><span class="line"><span class="c1">--筛选非NULL值使用IS NOT NULL</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">column1</span> <span class="k">IS</span> <span class="k">NULL</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p><a href="http://www.postgresql.org/docs/9.4/static/functions-comparison.html#FUNCTIONS-COMPARISON-TABLE">PostgreSQL支持的比较符</a>：<code class="language-psql">&lt;</code>、<code class="language-psql">&lt;=</code>、<code class="language-psql">&gt;</code>、<code class="language-psql">&gt;=</code>、<code class="language-psql">=</code>和<code class="language-psql">!=</code>（“不等于”也可以表示为<code class="language-psql">&lt;&gt;</code>）。</p>
  </li>
  <li>
    <p>筛选字符串条件，需要对筛选串加引号，比如例子中<code class="language-psql">a</code>为<code class="language-psql">"testStr"</code>。</p>
  </li>
  <li>
    <p>合理使用括号，强制规定<code class="language-psql">AND</code>和<code class="language-psql">OR</code>先后顺序。</p>
  </li>
  <li>
    <p><code class="language-psql">IN</code>语句执行效率高，并且可以嵌套多层<code class="language-psql">SELECT</code>语句（每个<code class="language-psql">SELECT</code>只返回一列数据）。</p>
  </li>
  <li>
    <p>尽量在数据库查询过程，而非自己后续手写，完成数据筛选，因为：1. SQL数据库操作通常比自己手写效率高；2. 便于后续扩展。</p>
  </li>
</ul>

<h2 id="section-3">4. 模式匹配</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Pattern Matching </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="psql"><span class="line"><span class="c1">-- LIKE和NOT LIKE支持对字符串的模式匹配</span>
</span><span class="line"><span class="c1">-- “_”匹配单一一个字符</span>
</span><span class="line"><span class="c1">-- “%”匹配0个或多个字符</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">column1</span> <span class="k">LIKE</span> <span class="s1">&#39;F_y%&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- SIMILAR TO和NOT SIMILAR TO支持正则匹配</span>
</span><span class="line"><span class="c1">-- 正则匹配中，仍然使用“_”和“%”</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">column1</span> <span class="k">SIMILAR</span> <span class="k">TO</span> <span class="s1">&#39;[^JM]%&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>PostgreSQL支持<code class="language-psql">ILIKE</code>和<code class="language-psql">NOT ILIKE</code>忽略大小写敏感搜索，这不是标准SQL语法。</p>
  </li>
  <li>
    <p>注意数据库自动补充的空格，比如 <code class="language-psql">'F_y'</code>只能匹配“F开头-间隔一个字符-y结尾”的字符串，如果字符串后跟有空格，则不能匹配。</p>
  </li>
  <li>
    <p><a href="http://www.postgresql.org/docs/9.4/static/functions-matching.html">PostgreSQL支持的通配符</a></p>
  </li>
  <li>
    <p>模式匹配效率不高，尽量后置，不要过度使用。</p>
  </li>
</ul>

<h2 id="section-4">5. 函数</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Function </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="psql"><span class="line"><span class="c1">--数学计算</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span> <span class="o">*</span> <span class="n">column3</span> <span class="k">AS</span> <span class="n">newName</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 字符串连接</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">RTRIM</span><span class="p">(</span><span class="n">column1</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39; (&#39;</span> <span class="o">||</span> <span class="n">RTRIM</span><span class="p">(</span><span class="n">column1</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;)&#39;</span> <span class="k">AS</span> <span class="n">newName</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column1</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 使用函数</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">UPPER</span><span class="p">(</span><span class="n">column2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">newName</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 筛选日期</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">columnDate</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">DATE_PART</span><span class="p">(</span><span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="n">columnDate</span><span class="p">)</span> <span class="o">=</span> <span class="mf">2015</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- 汇总数据</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">AVG</span><span class="p">(</span><span class="k">DISTINCT</span> <span class="n">column1</span><span class="p">)</span> <span class="k">AS</span> <span class="n">newName1</span><span class="p">,</span>
</span><span class="line">       <span class="n">SUM</span><span class="p">(</span><span class="n">column2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">newName2</span><span class="p">,</span>
</span><span class="line">       <span class="n">MAX</span><span class="p">(</span><span class="n">column3</span><span class="p">)</span> <span class="k">AS</span> <span class="n">newName3</span><span class="p">,</span>
</span><span class="line">       <span class="n">MIN</span><span class="p">(</span><span class="n">column4</span><span class="p">)</span> <span class="k">AS</span> <span class="n">newName4</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">Products</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">vend_id</span> <span class="o">=</span> <span class="s1">&#39;DLL01&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>使用<code class="language-psql">AS</code>及时命名新列。</p>
  </li>
  <li>
    <p>支持数字列的运算有<code class="language-psql">+</code>、<code class="language-psql">-</code>、<code class="language-psql">*</code>和<code class="language-psql">/</code>，更多操作参考<a href="http://www.postgresql.org/docs/9.4/static/functions-math.html">PostgreSQL支持的数值操作</a>。</p>
  </li>
  <li>
    <p>为了移植性考虑，如果使用数据库内置函数，需要对代码相应部分添加详细注释。</p>
  </li>
</ul>

<h2 id="section-5">6. 分组</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Group </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="psql"><span class="line"><span class="c1">-- 分组的意思是对一列或者多列数据归总</span>
</span><span class="line"><span class="k">SELECT</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span><span class="p">,</span> <span class="n">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="n">newName</span>
</span><span class="line"><span class="k">FROM</span> <span class="n">dataset</span>
</span><span class="line"><span class="k">WHERE</span> <span class="n">column4</span> <span class="o">&gt;</span> <span class="mf">3</span>
</span><span class="line"><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">column1</span><span class="p">,</span> <span class="n">column2</span>
</span><span class="line"><span class="k">HAVING</span> <span class="n">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">1</span>
</span><span class="line"><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">newName</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p><code class="language-psql">GROUP BY</code>必须出现在<code class="language-psql">WHERE</code>后，<code class="language-psql">ORDER BY</code>前。</p>
  </li>
  <li>
    <p><code class="language-psql">GROUP BY</code>需要配合聚集函数，比如<code class="language-psql">AVE()</code>，一起使用。</p>
  </li>
  <li>
    <p><code class="language-psql">GROUP BY</code>不保证返回结果有特定顺序，如果需要特定顺序，需要指明<code class="language-psql">ORDER BY</code>。<code class="language-psql">ORDER BY</code>可以使用新列名。</p>
  </li>
  <li>
    <p><code class="language-psql">SELECT</code>语句中出现的列，必须在<code class="language-psql">GROUP BY</code>中出现。</p>
  </li>
  <li>
    <p><code class="language-psql">NULL</code>单独给出，多个<code class="language-psql">NULL</code>合并为一组。</p>
  </li>
  <li>
    <p><code class="language-psql">HAVING</code>对分组汇总后数据筛选，区别<code class="language-psql">WHERE</code>（汇总分组前筛选）。不能使用新列名，比如<code class="language-psql">HAVING newName &gt; 1</code>非法。</p>
  </li>
</ul>

<h2 id="postgresql">8. PostgreSQL支持的函数</h2>

<h3 id="section-6">8.1 数值</h3>

<table>
  <thead>
    <tr>
      <th>函数名</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-psql">ABS()</code></td>
      <td>绝对值</td>
    </tr>
    <tr>
      <td><code class="language-psql">SQRT()</code></td>
      <td>平方根</td>
    </tr>
    <tr>
      <td><code class="language-psql">ROUND(v numeric, s int)</code></td>
      <td>取特定小数位数</td>
    </tr>
    <tr>
      <td><code class="language-psql">AVG()</code></td>
      <td>平均值，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">MAX()</code></td>
      <td>最大值，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">MIN()</code></td>
      <td>最小指，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">SUM()</code></td>
      <td>求和，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">COUNT(*)</code></td>
      <td>所有行数，包括<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">COUNT(column1)</code></td>
      <td>行数，忽略<code class="language-psql">NULL</code></td>
    </tr>
  </tbody>
</table>

<p>详细参考：<a href="http://www.postgresql.org/docs/9.4/static/functions-math.html">PostgreSQL支持的数值操作</a></p>

<h3 id="section-7">8.2 字符串</h3>

<table>
  <thead>
    <tr>
      <th>函数名</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-psql">RTRIM()</code></td>
      <td>删除字符串左侧空格</td>
    </tr>
    <tr>
      <td><code class="language-psql">LTRIM()</code></td>
      <td>删除字符串右侧空格</td>
    </tr>
    <tr>
      <td><code class="language-psql">TRIM()</code></td>
      <td>删除双侧空格</td>
    </tr>
    <tr>
      <td><code class="language-psql">SUBSTRING(string [from int] [for int])</code></td>
      <td>按照索引取字符串（从1开始）</td>
    </tr>
    <tr>
      <td><code class="language-psql">SUBSTRING(string [from int] [for int])</code></td>
      <td>选取符合POSIX正则匹配字符串</td>
    </tr>
    <tr>
      <td><code class="language-psql">CHAR_LENGTH()</code></td>
      <td>计算字符串长度，等同于<code class="language-psql">LENGTH()</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">UPPER()</code></td>
      <td>大写</td>
    </tr>
    <tr>
      <td><code class="language-psql">LOWER()</code></td>
      <td>小写</td>
    </tr>
    <tr>
      <td><code class="language-psql">LEFT(string, n int)</code></td>
      <td>截取左侧n个字符串（从1开始）</td>
    </tr>
  </tbody>
</table>

<p>详细参考：<a href="http://www.postgresql.org/docs/9.4/static/functions-string.html">PostgreSQL支持的字符串操作</a></p>

<h3 id="section-8">8.3 日期</h3>

<table>
  <thead>
    <tr>
      <th>函数名</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-psql">CURRENT_DATE</code></td>
      <td>当前日期</td>
    </tr>
    <tr>
      <td><code class="language-psql">DATE_PART(text, timestamp)</code></td>
      <td>选取日期中的年、月或日</td>
    </tr>
  </tbody>
</table>

<p>详细参考：<a href="http://www.postgresql.org/docs/9.4/static/functions-datetime.html">PostgreSQL支持的日期操作</a></p>

<h2 id="section-9">使用建议</h2>

<ol>
  <li>数据集的名字为一个单词，比如<code class="language-psql">priceCustom</code>而不是一个字符串 <code class="language-psql">'price custom'</code>。同样，命名别名（使用<code class="language-psql">AS</code>）也如此。</li>
</ol>

<h3 id="section-10">参考资料</h3>

<ul>
  <li>
    <p>《SQL必知必会（SQL in 10 Minutes, Sams Teach Yourself (4th Edition)）》<a href="https://book.douban.com/subject/24250054/">豆瓣链接</a></p>
  </li>
  <li>
    <p><a href="https://wiki.postgresql.org/wiki/9.1%E7%AC%AC%E5%9B%9B%E7%AB%A0">PostgreSQL Wiki</a></p>
  </li>
</ul>

<h3 id="section-11">更新记录</h3>

<p>2015年7月29日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python使用小技巧]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/07/28/python-tips/"/>
    <updated>2015-07-28T14:37:38+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/07/28/python-tips</id>
    <content type="html"><![CDATA[<p>收集了一些使用Python过程中的小技巧或者常见错误。</p>

<h2 id="while--if--break">1. While–if–break</h2>

<p>适用情况：<strong>当需要执行一个循环，但是不能事先判断何时终止。</strong> 可以在循环内部加入判断，符合要求时跳出。比如，使用程序在某个目录下新建一个文件夹，如果文件名已经存在，需要重新生成文件名；否则，创建文件夹。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>While&#8211;if&#8211;break </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">random</span><span class="o">,</span> <span class="nn">os</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">    <span class="n">letter</span> <span class="o">=</span> <span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">97</span><span class="p">,</span> <span class="mi">123</span><span class="p">)]</span>
</span><span class="line">    <span class="n">folderName</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
</span><span class="line">    <span class="n">fn</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">folderName</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">        <span class="c"># get an unique name </span>
</span><span class="line">        <span class="n">os</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span><span class="line">        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">2. 链式比较操作</h2>

<p>Python支持一个链式的比较操作。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>comparison chain </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">testNum</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line">
</span><span class="line"><span class="c"># 链式比较操作</span>
</span><span class="line"><span class="c"># 区别if not和if a is not None</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">testNum</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">):</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="s">&#39;It passed!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h3 id="section-1">参考网址</h3>

<ul>
  <li>
    <p><a href="https://wiki.python.org/moin/FrontPage">Python Wiki</a></p>
  </li>
  <li>
    <p><a href="http://blog.shenwei.me/python-note/#more-3951">Wei Shen’s Python note</a></p>
  </li>
  <li>
    <p><a href="http://www.codefrom.com/c/214">十个我希望早点知道的python方法</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2015年7月27日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UCSC Table下载注释文件]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/06/02/download-ucsc-gene-mask/"/>
    <updated>2015-06-02T16:49:41+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/06/02/download-ucsc-gene-mask</id>
    <content type="html"><![CDATA[<p>在进行RNA-seq数据分析时，需要从<a href="http://genome.ucsc.edu/cgi-bin/hgTables">UCSC Table</a>下载各种注释信息。比如Cufflinks等要求的转录组注释信息、Cufflinks建议去除的rRNA/tRNA/线粒体组注释。</p>

<h2 id="section">1. 基因注释信息</h2>

<p>下载转录组Ensembl注释文件：</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_ensembl.png" title="image" alt="UCSC下载Ensembl注释" /></p>

<!--more-->

<p>在“table”选择中，<code class="language-bash">ensemblSource</code>表示Ensembl类型注释，<code class="language-bash">ensemblToGeneName</code>表示Ensembl到基因名注释对应。</p>

<h2 id="rrna">2. rRNA注释信息</h2>

<p>分为两步：</p>

<p>第一步， “table”选择<code class="language-bash">wgEncodeGencodeBasicV19</code>。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_rRNA.png" title="image" alt="UCSC下载rRNA注释" /></p>

<p>第二步，按照下图编辑“filter”。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_rRNA_maskTable.png" title="image" alt="UCSC下载rRNA注释Table" /></p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_rRNA_mask.png" title="image" alt="UCSC下载rRNA注释筛选" /></p>

<h2 id="trna">3. tRNA注释信息</h2>

<p>分为两步：</p>

<p>第一步，“track”选择 <code class="language-bash">tRNA Genes</code>。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_tRNA.png" title="image" alt="UCSC下载tRNA注释" /></p>

<p>第二步，保留pseudo tRNA注释。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_tRNA_mask.png" title="image" alt="UCSC下载tRNA注释" /></p>

<h2 id="section-1">4. 线粒体基因组注释</h2>

<p>分为两步：</p>

<p>第一步， “table”选择<code class="language-bash">wgEncodeGencodeBasicV19</code>。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_chrM.png" title="image" alt="UCSC下载chrM注释" /></p>

<p>第二步，按照下图编辑“filter”。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_chrM_mask.png" title="image" alt="UCSC下载chrM注释筛选" /></p>

<h3 id="section-2">参考资料</h3>

<ul>
  <li>
    <p>USCS Genome Browser的Google论坛：<a href="https://groups.google.com/a/soe.ucsc.edu/forum/#!topic/genome/IL_aeOuPYU0">1</a>、<a href="https://groups.google.com/a/soe.ucsc.edu/forum/#!msg/genome/jSAY8w1JVVo/P6lk4OJzDNEJ">2</a></p>
  </li>
  <li>
    <p>另一种选择rRNA、tRNA和线粒体组注释的方法<a href="http://onetipperday.blogspot.tw/2012/08/how-to-get-trnarrnamitochondrial-gene.html">How to get tRNA/rRNA/mitochondrial gene GTF file</a></p>
  </li>
  <li>
    <p><a href="http://webappl.blogspot.tw/2015/02/extract-rrna-and-trna-features-from.html">Extract rRNA and tRNA features from UCSC Browser</a></p>
  </li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2015年6月1日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash简易编程]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/28/bash-program/"/>
    <updated>2015-05-28T21:24:32+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/28/bash-program</id>
    <content type="html"><![CDATA[<h2 id="section">1. 循环</h2>

<p><code class="language-bash">for</code>循环体</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>for in Bash</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="k">for</span> i in *.zip
</span><span class="line"><span class="k">do</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;$i&quot;</span>
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h2 id="section-1">2. 创建数组</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>create array </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">declare</span> -a <span class="nv">testArray</span><span class="o">={</span><span class="s2">&quot;element1&quot;</span> <span class="s2">&quot;element2&quot;</span><span class="o">}</span>
</span><span class="line"><span class="nb">echo</span> <span class="k">${</span><span class="nv">testArray</span><span class="p">[0]</span><span class="k">}</span>
</span><span class="line"><span class="k">for</span> i in <span class="s2">&quot;${testArray[@]}&quot;</span>
</span><span class="line"><span class="k">do</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;$i&quot;</span>
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">3. 字符串分割</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Split strings</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># write in file &quot;testsplit.sh&quot;</span>
</span><span class="line"><span class="nv">IFS</span><span class="o">=</span><span class="s1">&#39;,&#39;</span> <span class="nb">read</span> -ra splitArray <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;This,is,a,test&quot;</span>
</span><span class="line"><span class="k">for</span> i in <span class="s2">&quot;${splitArray[@]}&quot;</span>
</span><span class="line"><span class="k">do</span>
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;$i&quot;</span>
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>bash testsplit.sh
</span><span class="line">This
</span><span class="line">is
</span><span class="line">a
</span><span class="line"><span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">4. 屏幕输出存入变量</h2>

<p>某个bash命令，比如<code class="language-bash">ls -l</code>存入变量，之后引用变量。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Save Command Output into Variables</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 注意等号前后不能加空格</span>
</span><span class="line"><span class="nv">listOutput</span><span class="o">=</span><span class="sb">`</span>ls -l<span class="sb">`</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;$listOutput&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">5. 文件末尾添加内容</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>append </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">touch testfile
</span><span class="line"><span class="nb">printf</span> <span class="s2">&quot;hello\n&quot;</span> &gt; testfile
</span><span class="line"><span class="nb">printf</span> <span class="s2">&quot;world\n&quot;</span> &gt;&gt; testfile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">参考网址</h3>

<ul>
  <li>
    <p><a href="http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash">How do I split a string on a delimiter in Bash?</a></p>
  </li>
  <li>
    <p><a href="http://stackoverflow.com/questions/4651437/how-to-set-a-bash-variable-equal-to-the-output-from-a-command">How to set a BASH variable equal to the output from a command?</a></p>
  </li>
</ul>

<h3 id="section-6">更新记录</h3>

<p>2016年9月1日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[确定TopHat中mate-inner-dist参数]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/23/tophat-inner-distance/"/>
    <updated>2015-05-23T19:08:19+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/23/tophat-inner-distance</id>
    <content type="html"><![CDATA[<p>对于双端测序RNA-seq数据，TopHat在运行时候，有两个参数<code class="language-bash">-r/--mate-inner-dist</code>和<code class="language-bash">--mate-std-dev</code>分别标识一对reads的间隔长度的期望平均值和标准差，其默认值分别为50bp和20bp。这两个参数本身是个估计值，用于TopHat在map过程中确定一对reads是否匹配到基因组正确位置。如果能够准确设定这两个数值，将会提升TopHat结果的准确性和完整性，参考<a href="http://yulongniu.bionutshell.org/blog/2014/07/23/rna-seq-analysis/">一个例子</a>。</p>

<p>有两种方法获得这对参数的准确值：</p>

<p>第一种：获取RNA-seq实验建库方法，之后按照以下网址说明计算，<a href="http://blog.qiuworld.com:8080/archives/3007">RNA-seq差异表达分析工作流程</a>。</p>

<!--more-->

<p>第二种：根据RNA-seq数据进行估算，具体步骤为：</p>

<ol>
  <li>
    <p>使用TopHat默认参数先跑一遍。</p>
  </li>
  <li>
    <p>使用<a href="http://miso.readthedocs.org/en/fastmiso/#computing-the-insert-length-distribution-and-its-statistics">MISO</a>的<code class="language-bash">pe_utils</code>工具估算。</p>
  </li>
</ol>

<p>以下详细介绍<code class="language-bash">pe_utils</code>使用方法。</p>

<p>第一步， 下载对应物种的基因注释文件GTF或者GFF，比如<a href="http://genome.ucsc.edu/cgi-bin/hgTables?command=start">USCS Table Browser</a>（<code class="language-bash">output format</code>选择<code class="language-bash">GTF</code>）或者使用MISO提供的<a href="http://miso.readthedocs.org/en/fastmiso/#human-mouse-gene-models-for-isoform-centric-analyses">Ensembl版本</a>。如果GTF文件，使用<a href="https://cole-trapnell-lab.github.io/cufflinks/file_formats/">Cufflinks</a>的<code class="language-bash">gffread</code>工具进行转换。</p>

<p>第二步，确定TopHat运行结果的bam文件与基因注释GFF文件，两者基因组命名方法一致。有的使用类似<code class="language-bash">chr1</code>命名，而另外一些使用<code class="language-bash">1</code>。如果不一致，建议修改GFF文件。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Summary Chromosomes&#8217; Names</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 查看GFF文件中基因组命名</span>
</span><span class="line"><span class="nv">$ </span>awk <span class="s1">&#39;{print $1}&#39;</span> hg19USCS.gff <span class="p">|</span> sort -n <span class="p">|</span> uniq -c
</span><span class="line">
</span><span class="line"><span class="c"># 查看bam文件中基因组命名</span>
</span><span class="line">samtools view accepted_hits.bam <span class="p">|</span> head -1000 <span class="p">|</span> awk <span class="s1">&#39;{print $3}&#39;</span> <span class="p">|</span> sort -n <span class="p">|</span> uniq -c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第三步，筛选较长外显子，比如长度大于1000bp。MISO提供了<code class="language-bash">exon_utils</code>工具用于提取长外显子，但是我们没有能够成功运行过。因此这里提供一个R版本的脚本，比如基因注释文件名为<code class="language-bash">hg19USCS.gff</code>，输出筛选的文件名为<code class="language-bash">hg19USCS_selected.gff</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>R Script of Select exons with length &gt; 1000bp</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="R"><span class="line">gffFile <span class="o">&lt;-</span> read.table<span class="p">(</span><span class="s">&#39;hg19USCS.gff&#39;</span><span class="p">,</span> stringsAsFactors <span class="o">=</span> <span class="kc">FALSE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">gffExon <span class="o">&lt;-</span> gffFile<span class="p">[</span>gffFile<span class="p">[,</span> <span class="m">3</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;exon&#39;</span><span class="p">,</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line">exonLen <span class="o">&lt;-</span> <span class="kp">abs</span><span class="p">(</span>gffExon<span class="p">[,</span> <span class="m">5</span><span class="p">]</span> <span class="o">-</span> gffExon<span class="p">[,</span> <span class="m">4</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">gffExonSelect <span class="o">&lt;-</span> gffExon<span class="p">[</span>exonLen <span class="o">&gt;=</span> <span class="m">1000</span><span class="p">,</span> <span class="p">]</span>
</span><span class="line">
</span><span class="line">write.table<span class="p">(</span>gffExonSelect<span class="p">,</span> <span class="s">&#39;hg19USCS_selected.gff&#39;</span><span class="p">,</span>
</span><span class="line">            row.names <span class="o">=</span> <span class="kc">FALSE</span><span class="p">,</span> col.names <span class="o">=</span> <span class="kc">FALSE</span><span class="p">,</span>
</span><span class="line">            quote <span class="o">=</span> <span class="kc">FALSE</span><span class="p">,</span> sep <span class="o">=</span> <span class="s">&#39;\t&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第四步，使用<code class="language-bash">pe_utils</code>，实例如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>An example of how to use pe_utils</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 输入bam文件和GFF文件</span>
</span><span class="line"><span class="nv">$ </span>pe_utils --compute-insert-len accepted_hits.bam hg19USCS_selected.gff --output-dir insert-dist/
</span><span class="line">
</span><span class="line"><span class="c"># 在insert-dist会出现类似accepted_filtered.bam.insert_len文件</span>
</span><span class="line"><span class="c"># -r/--mate-inner-dist估计值为mean</span>
</span><span class="line"><span class="c"># --mate-std-dev估计值为sdev</span>
</span><span class="line"><span class="nv">$ </span>head -1 accepted_filtered.bam.insert_len
</span><span class="line"><span class="c">#mean=165.3,sdev=45.2,dispersion=3.5,num_pairs=5622239</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">更新记录</h3>

<p>2015年5月23日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[过滤TopHat分析双端测序的输出]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/16/filter-tophat2-output/"/>
    <updated>2015-05-16T04:33:10+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/16/filter-tophat2-output</id>
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>

<h2 id="section">0. 结论</h2>

<p>在使用TopHat2匹配双端测序结果后，建议根据成对reads的map基因组位置唯一、方向正确和距离合适的标准，筛选得到的匹配结果。比如，TopHat2可能生成<code class="language-bash">accepted_hits.bam</code>文件，处理方法如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Filter TopHat Outputs</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 首先查看bam文件头部有多少行</span>
</span><span class="line"><span class="nv">$ </span>samtools view -H accepted_hits.bam <span class="p">|</span> wc -l
</span><span class="line">86
</span><span class="line">
</span><span class="line"><span class="c"># 筛选成对且成功map到基因组唯一位置的reads，按照上一条输出结果，调整“NR &lt;= 86”</span>
</span><span class="line"><span class="nv">$ </span>samtools view -h accepted_hits.bam <span class="p">|</span> <span class="se">\</span>
</span><span class="line">    awk <span class="s1">&#39;{if (NR &lt;= 86) print $0}; {if($5 == 50 &amp;&amp; ($2 == 163 || $2 == 147 || $2 == 83 || $2 == 99)) print $0}&#39;</span> <span class="p">|</span> <span class="se">\</span>
</span><span class="line">    samtools view -b - &gt; accepted_filtered.bam
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>samtools view accepted_filtered.bam <span class="p">|</span> wc -l
</span><span class="line">79143942
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="tophatsam">1. TopHat输出sam文件的第五列</h2>

<p><a href="http://ccb.jhu.edu/software/tophat/manual.shtml">TopHat文档</a>没有解释其输出bam文件（比如<code class="language-bash">accepted_hits.bam</code>）的第五列的意义。按照<a href="http://bowtie-bio.sourceforge.net/bowtie2/index.shtml">Bowtie2</a>输出结果来看，是表示映射质量指标Mapping Quality scores（MAPQ），具体计算参考公式$\eqref{eq:1}$。</p>

<script type="math/tex; mode=display">\begin{align}
MAPQ = -10 \times log_{10}(pvalue)
\label{eq:1}
\end{align}</script>

<!--more-->

<p>MAPQ值越大，表示对应的read的alignment质量越高。然而，在TopHat输出结果中，MAPQ所代表意义略有不同。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>&#8220;MAPQ&#8221; distribution from TopHat2 accepted mapping reads</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 查看accepted_hits.bam文件的MAPQ数值，并统计出现频数</span>
</span><span class="line"><span class="nv">$ </span>samtools view accepted_hits.bam <span class="p">|</span> awk <span class="s1">&#39;{print $5}&#39;</span> <span class="p">|</span> sort --parallel<span class="o">=</span><span class="m">4</span> -n <span class="p">|</span> uniq -c
</span><span class="line"><span class="m">5057430</span> 0
</span><span class="line"><span class="m">3117731</span> 1
</span><span class="line"><span class="m">8058500</span> 3
</span><span class="line"><span class="m">93044727</span> 50
</span><span class="line">
</span><span class="line"><span class="c"># 查看前100位MAPQ数值和NH:i:n分布</span>
</span><span class="line"><span class="nv">$ </span>samtools view accepted_hits.bam <span class="p">|</span> awk <span class="s1">&#39;{print $5}&#39;</span> <span class="p">|</span> head -100 <span class="p">|</span> sort --parallel<span class="o">=</span><span class="m">4</span> -n <span class="p">|</span> uniq -c
</span><span class="line"><span class="m">35</span> 0
</span><span class="line"><span class="m">42</span> 1
</span><span class="line"><span class="m">22</span> 3
</span><span class="line"><span class="m">1</span> 50
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>samtools view accepted_hits.bam <span class="p">|</span> awk <span class="s1">&#39;{print $20}&#39;</span> <span class="p">|</span> head -100 <span class="p">|</span> sort --parallel<span class="o">=</span><span class="m">4</span> -n <span class="p">|</span> uniq -c
</span><span class="line"><span class="m">1</span> NH:i:1
</span><span class="line"><span class="m">22</span> NH:i:2
</span><span class="line"><span class="m">3</span> NH:i:20
</span><span class="line"><span class="m">13</span> NH:i:3
</span><span class="line"><span class="m">29</span> NH:i:4
</span><span class="line"><span class="m">5</span> NH:i:5
</span><span class="line"><span class="m">21</span> NH:i:6
</span><span class="line"><span class="m">1</span> NH:i:7
</span><span class="line"><span class="m">2</span> NH:i:8
</span><span class="line"><span class="m">3</span> NH:i:9
</span><span class="line">
</span><span class="line"><span class="c"># 查看前200位MAPQ数值和NH:i:n分布</span>
</span><span class="line"><span class="nv">$ </span>samtools view accepted_hits.bam <span class="p">|</span> awk <span class="s1">&#39;{print $5}&#39;</span> <span class="p">|</span> head -200 <span class="p">|</span> sort --parallel<span class="o">=</span><span class="m">4</span> -n <span class="p">|</span> uniq -c
</span><span class="line"><span class="m">60</span> 0
</span><span class="line"><span class="m">43</span> 1
</span><span class="line"><span class="m">67</span> 3
</span><span class="line"><span class="m">30</span> 50
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>samtools view accepted_hits.bam <span class="p">|</span> awk <span class="s1">&#39;{print $20}&#39;</span> <span class="p">|</span> head -200 <span class="p">|</span> sort --parallel<span class="o">=</span><span class="m">4</span> -n <span class="p">|</span> uniq -c
</span><span class="line"><span class="m">30</span> NH:i:1
</span><span class="line"><span class="m">8</span> NH:i:12
</span><span class="line"><span class="m">7</span> NH:i:14
</span><span class="line"><span class="m">67</span> NH:i:2
</span><span class="line"><span class="m">3</span> NH:i:20
</span><span class="line"><span class="m">13</span> NH:i:3
</span><span class="line"><span class="m">30</span> NH:i:4
</span><span class="line"><span class="m">5</span> NH:i:5
</span><span class="line"><span class="m">31</span> NH:i:6
</span><span class="line"><span class="m">1</span> NH:i:7
</span><span class="line"><span class="m">2</span> NH:i:8
</span><span class="line"><span class="m">3</span> NH:i:9
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先，我们可以看到TopHat输出的MAPQ只有四个数值，分别为<code class="language-bash">50</code>、<code class="language-bash">3</code>、<code class="language-bash">1</code>和<code class="language-bash">0</code>。根据<a href="http://samtools.github.io/hts-specs/SAMv1.pdf">sam文件标准</a>，<code class="language-bash">NH:i:n</code>表示含有查询序列的alignment的数量。因此，通过上述前100位和前200位分析可以发现，MAPQ并不是按照公式$\eqref{eq:1}$计算，而有可能是以下关系：</p>

<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: left">MAPQ (tophat)</th>
      <th style="text-align: center">Tag</th>
      <th style="text-align: right">描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">50</td>
      <td style="text-align: center">NH:i:1</td>
      <td style="text-align: right">map至唯一位置</td>
    </tr>
    <tr>
      <td style="text-align: left">3</td>
      <td style="text-align: center">NH:i:2</td>
      <td style="text-align: right">map至2个位置</td>
    </tr>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: center">NH:i:3/NH:i:4</td>
      <td style="text-align: right">map至3个或4个位置</td>
    </tr>
    <tr>
      <td style="text-align: left">0</td>
      <td style="text-align: center">NH:i:n (n &gt; 4)</td>
      <td style="text-align: right">map到多余4个位置</td>
    </tr>
  </tbody>
</table>

<hr />

<p>展示一个<code class="language-bash">NH:i:1</code>的例子，注意Illumina双端测序平台<code class="language-bash">fr-unstranded</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Two pairs of unique mapped reads from Illumina HiSeq2000 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">HISEQ2000-02:436:C2PG3ACXX:3:2313:10972:95322   <span class="m">163</span>     chr1    <span class="m">637224</span>  <span class="m">50</span>      <span class="nv">100M</span>    <span class="o">=</span>       <span class="m">637339</span>  <span class="m">215</span>     AAATGATCTGTACAATAACCCCCTGTGACACCAGTCTACCTATGTAACAAATGCCCCTAAACTTAAAATAAAAGTTAAAAAAAAAGAAAATTAAAATCTC  &lt;@@BDABBDFBCDGEGHIGIIGIABAFHBGDFGGGHIIIFIEIGGGGIIIFFDHIGIIIIIIIICEHIIIIIIHEHHDHFFCBCCB@BCAACCCCCECCC    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1
</span><span class="line">HISEQ2000-02:436:C2PG3ACXX:3:2313:10972:95322   <span class="m">83</span>      chr1    <span class="m">637339</span>  <span class="m">50</span>      <span class="nv">100M</span>    <span class="o">=</span>       <span class="m">637224</span>  -215    GTAATATGAAAAACACAAATCTTTCATTCATTCCTTTCAACTGATGAGGAAAATGAGGCATCGGGAGTTAGTAAAAGTCCACATTGAGATATGAGACCCA  <span class="nv">CCADDDCCCCCCCDEEEECAEHEEGGIIHGFAAGGGHEF</span><span class="o">=</span>IGGGIIGGHGCGIEIIIGIIIIIIIFIHIIIIIIGIIHFEAIGGIIGFFDFHDDDAD@@@    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1
</span><span class="line">
</span><span class="line">HISEQ2000-06:325:C2RC0ACXX:5:2205:6961:88285    <span class="m">99</span>      chr1    <span class="m">643662</span>  <span class="m">50</span>      <span class="nv">100M</span>    <span class="o">=</span>       <span class="m">643707</span>  <span class="m">145</span>     CCTATCAAAATCTTAGCATTCCTCTTAGCCCTCAACAAAGCATTTCTAAAATGTGTATAGAAGACCAAAGGGCCAAAAGAGTCAACTTCTGAAGAAGCGC  CCCFFFFFHHHHHJJJJIJJHJJJJJJJIIJJJJJJJJJJJJIJJJJJIIIJJIIIJJJJJJJJJIJJJJIJJJIHHHHFFEFFFEEEEEEEDDCDDCDD    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1
</span><span class="line">HISEQ2000-06:325:C2RC0ACXX:5:2205:6961:88285    <span class="m">147</span>     chr1    <span class="m">643707</span>  <span class="m">50</span>      <span class="nv">100M</span>    <span class="o">=</span>       <span class="m">643662</span>  -145    CTAAAATGTGTATAGAAGACCAAAGGGCCAAAAGAGTCAACTTCTGAAGAAGCGCAAAAAGAAAGTTGAGGAAATCTTAAAACATGTTATTGAGCTTAAA  CEEEDDDDEDFEEEEEEEBFFFFFHHHHEJJJJJJJJIJJJJGJIIIIHFJJJIIJJJJJIJJJJJJJJJJJJGHJJJJIJJJJJJJGHHHHFFFFFCCC    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="sam">2. sam文件的第二列</h2>

<p>sam文件中的第二列提供了具体的map情况，下列表格摘自<a href="http://samtools.github.io/hts-specs/SAMv1.pdf">sam文件标准</a>，sam/bam文件中第二列各种条件<strong>求和</strong>的<strong>十进制</strong>标识，<a href="http://broadinstitute.github.io/picard/explain-flags.html">快速解释第二列的bitwise FLAG</a>：</p>

<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: center">Decimal</th>
      <th style="text-align: center">Hexadecimal</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0x1</td>
      <td style="text-align: left">template having multiple segments in sequencing</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">0x2</td>
      <td style="text-align: left">each segment properly aligned according to the aligner</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">0x4</td>
      <td style="text-align: left">segment unmapped</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">0x8</td>
      <td style="text-align: left">next segment in the template unmapped</td>
    </tr>
    <tr>
      <td style="text-align: center">16</td>
      <td style="text-align: center">0x10</td>
      <td style="text-align: left">SEQ being reverse complemented</td>
    </tr>
    <tr>
      <td style="text-align: center">32</td>
      <td style="text-align: center">0x20</td>
      <td style="text-align: left">SEQ of the next segment in the template being reverse complemented</td>
    </tr>
    <tr>
      <td style="text-align: center">64</td>
      <td style="text-align: center">0x40</td>
      <td style="text-align: left">the first segment in the template</td>
    </tr>
    <tr>
      <td style="text-align: center">128</td>
      <td style="text-align: center">0x80</td>
      <td style="text-align: left">the last segment in the template</td>
    </tr>
    <tr>
      <td style="text-align: center">256</td>
      <td style="text-align: center">0x100</td>
      <td style="text-align: left">secondary alignment</td>
    </tr>
    <tr>
      <td style="text-align: center">512</td>
      <td style="text-align: center">0x200</td>
      <td style="text-align: left">not passing quality controls</td>
    </tr>
    <tr>
      <td style="text-align: center">1024</td>
      <td style="text-align: center">0x400</td>
      <td style="text-align: left">PCR or optical duplicate</td>
    </tr>
    <tr>
      <td style="text-align: center">2048</td>
      <td style="text-align: center">0x800</td>
      <td style="text-align: left">supplementary alignment</td>
    </tr>
  </tbody>
</table>

<hr />

<p>在map完成双端测序序列中，我们感兴趣的是一对reads都正确align到基因组上，而且方相匹配又距离合适。符合这样条件的reads，对应的第二列数值为99、147、83和163，具体图示参考<a href="https://biobeat.wordpress.com/2013/04/29/directional-rna-seq-part-1-extract-strand-information-from-sam-file/">Directional RNA-seq— Part 1: SAM file flags</a>。下面表格解释四个数值的具体意义，其中<code class="language-bash">1</code>标识双端测序，<code class="language-bash">2</code>表示一对reads正确地map到基因组合适位置，表格中着重陈述<code class="language-bash">64</code>、<code class="language-bash">32</code>、<code class="language-bash">128</code>和<code class="language-bash">16</code>。</p>

<hr />

<table>
  <thead>
    <tr>
      <th>Flag</th>
      <th>Composition</th>
      <th>Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>99</td>
      <td>64+32+2+1</td>
      <td>一对引物中第一个map到基因组正义链；第二个反方向map到基因组正义链</td>
    </tr>
    <tr>
      <td>147</td>
      <td>128+16+2+1</td>
      <td>一对引物中第二个反方向map基因组正义链；第一个map到基因组正义链</td>
    </tr>
    <tr>
      <td>83</td>
      <td>64+16+2+1</td>
      <td>一对引物中第一个map到基因组反义链；第二个反方向map到基因组反义链</td>
    </tr>
    <tr>
      <td>163</td>
      <td>128+32+2+1</td>
      <td>一对引物中第二个反方向map基因组正义链；第一个map到基因组正义链</td>
    </tr>
  </tbody>
</table>

<hr />

<p>之后，我们需要筛选含有这些flags的reads。由于我们通常需要操作bam文件，也希望输出是bam文件，中间过程不希望再重新生成sam文件。那么，就需要结合使用<code class="language-bash">awk</code>进行筛选，具体方法见本篇文章开头所示。当然，如果是只是查看，可以使用下面例子中的 <code class="language-bash">samtools view -f 0x2</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Count number of unique pair-mapped alignments</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># map到基因组上唯一位置的reads数目</span>
</span><span class="line"><span class="nv">$ </span>samtools view -q <span class="m">50</span> accepted_hits.bam <span class="p">|</span> wc -l
</span><span class="line">93044727
</span><span class="line"><span class="c"># 成对reads都map到基因组对应位置的reads数目</span>
</span><span class="line"><span class="nv">$ </span>samtools view -f 0x2 accepted_hits.bam <span class="p">|</span> wc -l
</span><span class="line">88793640
</span><span class="line"><span class="c"># 成对且唯一mapped的reads数目</span>
</span><span class="line"><span class="nv">$ </span>samtools view -q <span class="m">50</span> -f 0x2 accepted_hits.bam <span class="p">|</span> wc -l
</span><span class="line">79143942
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="tophat">3. 操作TopHat输出的文件命令集锦</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Useful bash for bam files from TopHat</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># samtools的view -c命令，其实就是输出sam文件有多少行</span>
</span><span class="line"><span class="nv">$ </span>samtools view accepted_hits.bam <span class="p">|</span> wc -l
</span><span class="line">109278388
</span><span class="line"><span class="nv">$ </span>samtools view -c accepted_hits.bam
</span><span class="line">109278388
</span><span class="line">
</span><span class="line"><span class="c"># 查看bam文件中mapped的reads长度分布</span>
</span><span class="line"><span class="c"># 第二种方法是运行FastQC，输出结果中也有显示</span>
</span><span class="line">samtools view accepted_hits.bam <span class="p">|</span> awk <span class="s1">&#39;{print length($10)}&#39;</span> <span class="p">|</span> sort -n <span class="p">|</span> uniq -c
</span><span class="line">
</span><span class="line"><span class="c"># 查看bed文件前几行</span>
</span><span class="line"><span class="nv">$ </span>head junction.bed
</span><span class="line"><span class="c"># 统计bed文件有多少行，需要去除第一行注释</span>
</span><span class="line"><span class="c"># 以下两种方式相同，但不够完美</span>
</span><span class="line"><span class="nv">$ </span>wc -l junction.bed
</span><span class="line"><span class="m">220648</span> junctions.bed
</span><span class="line"><span class="nv">$ </span>awk <span class="s1">&#39;END {print NR}&#39;</span> junctions.bed
</span><span class="line">220648
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="dnamrna">4. DNA链和mRNA链的称呼总结</h2>

<p>双链DNA和单链mRNA，对每条链都有特定的称呼。总结如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>DNA/RNA strands </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">3<span class="s1">&#39;~~~~~UCUGAU~~~~~ 5&#39;</span> mRNA的对应基因信息在reverse strand
</span><span class="line">
</span><span class="line">5<span class="s1">&#39;-----AGACTA----------ATTGTT----- 3&#39;</span>
</span><span class="line">3<span class="s1">&#39;-----TCTGAT----------TAACAA----- 5&#39;</span>
</span><span class="line">
</span><span class="line">                5<span class="s1">&#39;~~~~~AUUGUU~~~~~ 3&#39;</span> mRNA的对应基因信息在forward strand
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于一条双链DNA，称呼列表如下：</p>

<table>
  <thead>
    <tr>
      <th>方向<sup>a</sup></th>
      <th>名称1</th>
      <th>名称2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>从左至右</td>
      <td>forward</td>
      <td>plus</td>
    </tr>
    <tr>
      <td>从右至左</td>
      <td>reverse</td>
      <td>minus</td>
    </tr>
  </tbody>
</table>

<p><sup>a</sup>：方向是指5’至3’的阅读方向，用于区分两条DNA链条</p>

<hr />

<p>对于一条RNA链，其对应的双链DNA称呼如下：</p>

<table>
  <thead>
    <tr>
      <th>mRNA方向<sup>a</sup></th>
      <th>名称1</th>
      <th>名称2</th>
      <th>名称3</th>
      <th>名称4</th>
      <th>名称5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>同向</td>
      <td>coding</td>
      <td>nontemplate</td>
      <td>sense</td>
      <td>positive</td>
      <td>+</td>
    </tr>
    <tr>
      <td>反向</td>
      <td>template</td>
      <td>noncoding</td>
      <td>antisense</td>
      <td>negative</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<p><sup>a</sup>：mRNA方向是指5’至3’。</p>

<hr />

<h3 id="section-1">参考网址</h3>

<ul>
  <li>
    <p><a href="http://blog.qiuworld.com:8080/archives/3321">关于map当中的unique mapped reads问题</a></p>
  </li>
  <li>
    <p>TopHat的bam输出文件第五列（类似MAPQ）的讨论： <a href="https://groups.google.com/forum/#!topic/tuxedo-tools-users/m0p1qXDEqKA">tophat mapping quality</a>和<a href="http://www.acgt.me/blog/2015/3/17/more-madness-with-mapq-scores-aka-why-bioinformaticians-hate-poor-and-incomplete-software-documentation">More madness with MAPQ scores</a></p>
  </li>
  <li>
    <p><a href="https://biobeat.wordpress.com/2013/05/01/directional-rna-seq-part-2-using-samtools/">Directional RNA-seq— Part 2: Explore SAM flags using samtools</a></p>
  </li>
  <li>
    <p><a href="http://www.acgt.me/blog/2015/4/15/filtering-a-sam-file-generated-by-tophat-to-find-uniquely-mapped-concordant-read-pairs-awk-vs-samtools">Filtering a SAM file generated by TopHat to find uniquely mapped, concordant read pairs: AWK vs SAMtools</a></p>
  </li>
  <li>
    <p><a href="https://www.biostars.org/p/3423/">Question: Forward And Reverse Strand Conventions</a></p>
  </li>
  <li>
    <p><a href="http://en.wikipedia.org/wiki/Sense_(molecular_biology)">wiki</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2015年5月25日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django使用介绍]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/09/django-tutorial/"/>
    <updated>2015-05-09T13:42:15+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/09/django-tutorial</id>
    <content type="html"><![CDATA[<p>本文是学习<a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">Django Tutorial</a>的记录，目的为了帮助快速浏览和查找Django使用细节。</p>

<h2 id="django">1. 安装Django</h2>

<p>本文使用<a href="https://www.python.org/">Python 3.3.6</a>和<a href="http://www.postgresql.org/">PostgreSQL 9.3.6</a>学习Django。可以参考<a href="http://yulongniu.bionutshell.org/blog/2015/05/09/python-different-version/">“使用Pyenv控制多个版本Python”</a>和 <a href="http://yulongniu.bionutshell.org/blog/2015/05/08/install-use-postgresql/">“Fedora安装与使用PostgreSQL”</a>，安装对应版本Python和PostgreSQL。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 安装Django</span>
</span><span class="line"><span class="nv">$ </span>pip install django
</span><span class="line">
</span><span class="line"><span class="c"># 安装PostgreSQL支持psycopg2 </span>
</span><span class="line"><span class="nv">$ </span>pip install psycopg2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 检查Django版本</span>
</span><span class="line"><span class="nv">$ </span>python -c <span class="s2">&quot;import django; print(django.get_version())&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">2. 创建项目</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 创建名为mysite的项目</span>
</span><span class="line"><span class="nv">$ </span>django-admin startproject mysite
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>之后，配制数据库。修改<code class="language-bash">mysite/settings.py</code>对应位置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mysite/settings.py</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Database</span>
</span><span class="line"><span class="c"># https://docs.djangoproject.com/en/1.8/ref/settings/#databases</span>
</span><span class="line">
</span><span class="line"><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="s">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s">&#39;django.db.backends.postgresql_psycopg2&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;NAME&#39;</span><span class="p">:</span> <span class="s">&#39;testdb&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;USER&#39;</span><span class="p">:</span> <span class="s">&#39;userName&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s">&#39;passWord&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;HOST&#39;</span><span class="p">:</span> <span class="s">&#39;/var/run/postgresql&#39;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&#39;PORT&#39;</span><span class="p">:</span> <span class="s">&#39;5432&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 配制好数据库后，链接数据库</span>
</span><span class="line"><span class="nv">$ </span>python manage.py migrate
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>开启Django测试网络服务器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>python manage.py runserver
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="app">3. 创建app</h2>

<p>首先， 创建新的app，比如<code class="language-bash">polls</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>python manage.py startapp polls
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其次，修改app</p>

<p>app文件位置<code class="language-bash">polls/models.py</code>，之后在项目配制文件<code class="language-bash">mysite/settings.py</code>中添加app，最后添加app。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 添加app</span>
</span><span class="line"><span class="nv">$ </span>python manage.py makemigrations polls
</span><span class="line">
</span><span class="line"><span class="c"># 如果有数据库操作，可以打印具体的数据库操作脚本</span>
</span><span class="line"><span class="nv">$ </span>python manage.py sqlmigrate polls 0001
</span><span class="line">
</span><span class="line"><span class="c"># 也可以检查</span>
</span><span class="line"><span class="nv">$ </span>python manage.py check
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后，链接app与数据库</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>python manage.py migrate
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li><a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">Django Tutorial</a></li>
</ul>

<h3 id="section-1">更新记录</h3>

<p>2015年5月9日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Pyenv控制多个版本Python]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/09/python-different-version/"/>
    <updated>2015-05-09T00:14:10+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/09/python-different-version</id>
    <content type="html"><![CDATA[<p>同时在一台电脑上使用多个版本的Python，可以通过<a href="https://github.com/yyuu/pyenv">pyenv</a>控制和管理。</p>

<h2 id="section">1. 安装方法</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>git clone git://github.com/yyuu/pyenv.git ~/.pyenv
</span><span class="line">
</span><span class="line"><span class="c"># 写入路径信息</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(pyenv init -)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span><span class="line">
</span><span class="line"><span class="c"># 重新载入</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h2 id="python">2. 安装多个版本Python和对应包</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 查看可提供的Python版本列表</span>
</span><span class="line"><span class="nv">$ </span>pyenv install --list
</span><span class="line">
</span><span class="line"><span class="c"># 安装Python所依赖包</span>
</span><span class="line"><span class="c"># yum install readline readline-devel readline-static openssl openssl-devel openssl-static sqlite-devel bzip2-devel bzip2-libs</span>
</span><span class="line">
</span><span class="line"><span class="c"># 安装其他版本Python</span>
</span><span class="line"><span class="c"># 如果命令行下载安装Python太慢，可以将下载的安装包放入~/.pyenv/cache/文件夹中，之后安装</span>
</span><span class="line"><span class="nv">$ </span>pyenv install 3.4.3
</span><span class="line"><span class="nv">$ </span>pyenv rehash
</span><span class="line">
</span><span class="line"><span class="c"># 查看已安装Python版本</span>
</span><span class="line"><span class="nv">$ </span>pyenv versions
</span><span class="line">
</span><span class="line"><span class="c"># 全局切换Python版本</span>
</span><span class="line"><span class="nv">$ </span>pyenv global 3.4.3
</span><span class="line">
</span><span class="line"><span class="c"># 安装对应版本Python包。</span>
</span><span class="line"><span class="c"># 每次安装包之后，都要执行rehash。</span>
</span><span class="line"><span class="nv">$ </span>pip install ipython
</span><span class="line"><span class="nv">$ </span>pyenv rehash
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果在使用<code class="language-bash">pip</code>安装包时，下载速度过慢，可以考虑使用国内源。比如：</p>

<ul>
  <li>
    <p>http://pypi.mirrors.ustc.edu.cn/</p>
  </li>
  <li>
    <p>http://pypi.douban.com/</p>
  </li>
</ul>

<p>使用方法为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Using different pip mirror</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>pip install --upgrade numpy -i http://pypi.mirrors.ustc.edu.cn/simple
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pyenv">3. 更新pyenv</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/.pyenv
</span><span class="line"><span class="nv">$ </span>git pull
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="python-1">4. 删除特定版本Python</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 查找特定版本Python文件夹位置，之后直接删除即可。</span>
</span><span class="line"><span class="nv">$ </span>pyenv prefix 3.4.3
</span><span class="line"><span class="nv">$ </span>rm -rf ~/.pyenv/versions/3.4.3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="http://seisman.info/python-pyenv.html">Python多版本共存之pyenv</a></p>
  </li>
  <li>
    <p><a href="http://www.leadnt.com/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E6%9D%A5%E5%8A%A0%E9%80%9Fpython-pypi%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85.html">使用国内镜像源来加速python pypi包的安装</a></p>
  </li>
</ul>

<h3 id="section-1">更新记录</h3>

<p>2015年5月23日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora安装与使用PostgreSQL]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/08/install-use-postgresql/"/>
    <updated>2015-05-08T18:30:54+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/08/install-use-postgresql</id>
    <content type="html"><![CDATA[<h2 id="postgresql">1. 安装和开启postgresql</h2>

<p>Fedora直接使用<code class="language-bash">dnf</code>安装相关组件。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 安装PostgreSQL</span>
</span><span class="line"><span class="c"># dnf install postgresql postgresql-server postgresql-contrib postgresql-devel pgadmin3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>初始化（只需要执行一次）。如果出现类似<code class="language-bash">Data directory is not empty!</code>报错，可以尝试执行删除操作<code>rm -f -r /usr/local/pgsql/data</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 初始化</span>
</span><span class="line"><span class="c"># postgresql-setup --initdb --unit postgresql</span>
</span><span class="line">
</span><span class="line"><span class="c"># 开启服务</span>
</span><span class="line"><span class="c"># service postgresql start</span>
</span><span class="line">
</span><span class="line"><span class="c"># 查询工作状态</span>
</span><span class="line"><span class="c"># service postgresql status</span>
</span><span class="line">
</span><span class="line"><span class="c"># 关闭服务</span>
</span><span class="line"><span class="c"># service postgresql stop</span>
</span><span class="line">
</span><span class="line"><span class="c"># 开机启动</span>
</span><span class="line"><span class="c"># chkconfig postgresql on</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">2. 创建用户和数据库</h2>

<p>为了方便使用，可以在PostgreSQL中创建一个与当前系统用户名相同的用户，比如目前系统登陆用户为Kitty。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 进入home路径</span>
</span><span class="line"><span class="c"># cd /home/</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># 进入默认postgres用户，需要输入root密码。</span>
</span><span class="line"><span class="c"># 之后系统命令提示符会变成类似“bash-4.3$”。</span>
</span><span class="line"><span class="c"># su postgres</span>
</span><span class="line">
</span><span class="line"><span class="c"># 创建用户</span>
</span><span class="line"><span class="c"># -P：创建用户后立即创建密码</span>
</span><span class="line"><span class="c"># -s：用户为superuser</span>
</span><span class="line"><span class="c"># -e：打印消息</span>
</span><span class="line">bash-4.3<span class="nv">$ </span>createuser -P -s -e Kitty
</span><span class="line">
</span><span class="line"><span class="c"># 创建数据库</span>
</span><span class="line"><span class="c"># -O：制定用户</span>
</span><span class="line">bash-4.3<span class="nv">$ </span>createdb -O Kitty testdb
</span><span class="line">
</span><span class="line"><span class="c"># 退出</span>
</span><span class="line">bash-4.3<span class="nv">$ </span><span class="nb">exit</span>
</span><span class="line">
</span><span class="line"><span class="c"># 再创建新的数据库时，不需要进入postgres。</span>
</span><span class="line"><span class="c"># 直接在当前登录用户下创建即可。</span>
</span><span class="line"><span class="c"># 由于PostgreSQL用户与系统登录用户相同，不需要指定PostgreSQL用户</span>
</span><span class="line"><span class="nv">$ </span>creatdb testdb2
</span><span class="line">
</span><span class="line"><span class="c"># 删除数据库</span>
</span><span class="line"><span class="nv">$ </span>dropdb testdb2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>创建完用户和对应数据库后，可以登录数据库控制台。登录后，系统命令提示符会变成类似“testdb=#”。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 登录testdb数据库控制台</span>
</span><span class="line"><span class="nv">$ </span>psql testdb
</span><span class="line">
</span><span class="line"><span class="c"># 完整登录命令</span>
</span><span class="line"><span class="c"># -U：用户名</span>
</span><span class="line"><span class="c"># -d：数据库</span>
</span><span class="line"><span class="c"># -h：host，默认为local socket</span>
</span><span class="line"><span class="c"># -p：端口</span>
</span><span class="line"><span class="nv">$ </span>psql -U Kitty -d testdb -h /var/run/postgresql -p 5432
</span><span class="line">
</span><span class="line"><span class="c"># 查看PostgreSQL配制文件路径</span>
</span><span class="line"><span class="nv">testdb</span><span class="o">=</span><span class="c"># SHOW config_file;</span>
</span><span class="line">
</span><span class="line"><span class="c"># 查看所有用户</span>
</span><span class="line"><span class="nv">testdb</span><span class="o">=</span><span class="c"># \du</span>
</span><span class="line">
</span><span class="line"><span class="c"># 查看表格（table）</span>
</span><span class="line"><span class="nv">testdb</span><span class="o">=</span><span class="c"># \dt</span>
</span><span class="line">
</span><span class="line"><span class="c"># 查看所有数据库</span>
</span><span class="line"><span class="nv">testdb</span><span class="o">=</span><span class="c"># \l</span>
</span><span class="line">
</span><span class="line"><span class="c"># 退出</span>
</span><span class="line"><span class="nv">testdb</span><span class="o">=</span><span class="c"># \q</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">参考资料</h3>

<ul>
  <li>
    <p><a href="http://www.postgresql.org/docs/9.4/interactive/index.html">PostgreSQL 9.4 Manuals</a></p>
  </li>
  <li>
    <p><a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html">PostgreSQL新手入门</a></p>
  </li>
  <li>
    <p><a href="http://www.heatware.net/linux-unix/how-install-postgresql-8-4-centos-5/">初始化错误</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2015年7月29日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言学习记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note/"/>
    <updated>2014-12-08T07:23:16+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note</id>
    <content type="html"><![CDATA[<h2 id="section">1. 基本数据类型</h2>

<h3 id="section-1">1.1 算术类型</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>解释</th>
      <th>说明</th>
      <th>注意事项</th>
      <th>本地字节数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>short</code></td>
      <td>有符号短整数</td>
      <td>完整形式<code>signed short int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>2</td>
    </tr>
    <tr>
      <td><code>unsigned short</code></td>
      <td>无符号短整数</td>
      <td>完整形式<code>unsigned short int</code>，<code>int</code>可以省略</td>
      <td>全部位占满</td>
      <td>2</td>
    </tr>
    <tr>
      <td><code>int</code></td>
      <td>有符号整数</td>
      <td>完整形式<code>signed int</code>，<code>singed</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>unsigned int</code></td>
      <td>无符号整数</td>
      <td> </td>
      <td>全部位占满</td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>long</code></td>
      <td>有符号长整数</td>
      <td>完整形式为<code>signed long int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>unsigned long</code></td>
      <td>无符号长整数</td>
      <td>完整形式为<code>unsigned short int</code>，<code>int</code>可以省略</td>
      <td>全部位占满</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>long long</code></td>
      <td>无符号长长整数</td>
      <td>完整形式为<code>signed long long int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td><span style="color: green"><strong>C99</strong></span>特有</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>unsigned long long </code></td>
      <td>有符号长长整数</td>
      <td>完整形式为<code>unsigned long long int</code>，<code>int</code>可以省略</td>
      <td><span style="color: green"><strong>C99</strong></span>特有</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>char</code></td>
      <td>字符</td>
      <td>实质是“小整数”（可能比短整数占用字节更少）</td>
      <td>分为<code>char</code>、<code>singed char</code>和<code>unsigned char</code>。使用<strong>单引号</strong>标记常量，比如<code>'A'</code>（<strong>值</strong>为65）</td>
      <td>1</td>
    </tr>
    <tr>
      <td><code>_Bool</code></td>
      <td>布尔型整数</td>
      <td>实质是无符号整数</td>
      <td>只能赋值0或1，赋值<code>_Bool</code>类型变量为非零值会导致赋值为1</td>
      <td>1</td>
    </tr>
    <tr>
      <td><code>float</code></td>
      <td>单精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>double</code></td>
      <td>双精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>long double</code></td>
      <td>扩展精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>16</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>强制编辑器处理常量为长整数（十进制、八进制和十六进制），<code>1135L</code>；强制处理为无符号，<code>1135U</code>；混合使用，<code>1135UL</code>，<code>U</code>和<code>L</code>顺序和大小写不重要。
<span style="color: green"><strong>C99</strong></span>中增加了<code>ll</code>或者<code>LL</code>后缀，强制<code>long long int</code>型整数，可以与<code>u</code>或<code>U</code>连用。<strong>避免无符号和有符号整数混用，特别是无符号和有符号整数比较，会产生意想不到的后果</strong>。</p>
  </li>
  <li>
    <p>强制编辑器处理常量为单精度浮点数，<code>11.3f</code>，<code>11.3</code>会被认为是<code>double</code>型；强制为双精度，<code>11.3L</code>或者<code>11.3l</code>（这里看出使用<code>L</code>更好，因为<code>l</code>会被误认为数字<code>1</code>）。</p>
  </li>
  <li>
    <p>强制类型转化表达式的一般形式为：<code>(int) floatNumber</code>。C语言把<code>(type)</code>视为一元运算符，所以其等级高于二元运算符。</p>
  </li>
  <li>
    <p>类型定义一般形式为：<code>typedef int Newint;</code>，注意结尾的<code>；</code>。区别与使用宏定义类型，函数体内定义的<code>typdef</code>变量在函数体外无法使用，而宏可以作用于任何对应位置。</p>
  </li>
  <li>
    <p><code>sizeof</code>运算符一般形式为：<code>sizeof(type)</code>，比如<code>sizeof(long int)</code>计算<code>int</code>类型占用多少个字节。<code>sizeof</code>表达式的类型是<code>size_t</code>（无符号整数），所以安全的方法是强制转换为<code>unsigned long</code>型，比如<code class="language-c">(unsigned long) sizeof(int)</code>。括号不是强制需要，加上括号防止因为优先级不同而引起歧义。可以应用与常量、变量或者表达式。</p>
  </li>
</ul>

<!--more-->

<h3 id="section-2">1.2 数组</h3>

<p>数组索引从0开始；数组按行存储。</p>

<h4 id="section-3">1.2.1 一维数组</h4>

<p>数组长度：</p>

<ul>
  <li>
    <p>数组长度可以是任何整数常量或整数常量表达式，比如<code class="language-c">testLen + 1</code>，<code>testLen</code>之前声明为整数常量（&gt;-1）。</p>
  </li>
  <li>
    <p>数组长度之后可能会变，所以可以使用宏定义一维数组的长度，比如<code class="language-c">#define LEN 5</code>。</p>
  </li>
  <li>
    <p>确定数组长度，可以联合使用宏和<code>sizeof</code>，比如<code class="language-c">#define SIZE ((int) (sizeof(a) / sizeof(a[0])))</code>。</p>
  </li>
</ul>

<p>初始化：</p>

<ul>
  <li>
    <p>声明每一个元素的数值，比如<code class="language-c">int testArray[5] = {1, 2, 3, 4, 5};</code>。这种情况可以忽略数组长度，比如<code class="language-c">int testArray[] = {1, 2, 3, 4, 5};</code>。</p>
  </li>
  <li>
    <p>声明部分元素，比如<code class="language-c">int testArray[5] = {1, 2, 3};</code>，4号与5号元素默认为0。<span style="color: green"><strong>C99</strong></span>提供元素下标初始化，比如：<code class="language-c">int testArray[5] = {[0] = 1, [1] = 2, [2] = 3};</code>；或者混用，比如<code class="language-c">int testArray[5] = {1, 2, [2] = 3};</code>；甚至自动判断长度，比如<code class="language-c">int testArray[] = {[0] = 1, 2, [2] = 3, a[4] = 0};</code>，编译器根据最大元素序号，制定数组长度为5。使用元素下标初始化，<strong>尽量按照下标序号从大到小初始化</strong>，否则可能引起后面元素覆盖前面元素。</p>
  </li>
  <li>
    <p>声明全部元素为0，比如<code class="language-c">int testArray[5] = {0};</code>。</p>
  </li>
</ul>

<h4 id="section-4">1.2.2 多维数组</h4>

<p>初始化：</p>

<ul>
  <li>
    <p>声明每一个元素或者部分元素，其余未声明元素为0。<span style="color: green"><strong>C99</strong></span>同样提供了下标初始化。比如：<code class="language-c">int testArray[2][2] = {[0][0] = 0, [1][1] = 1};</code>。</p>
  </li>
  <li>
    <p>声明全部元素为0，比如<code>int testArray[5][10] = {0};</code>。</p>
  </li>
</ul>

<h4 id="span-stylecolor-greenc99span">1.2.3 <span style="color: green"><strong>C99</strong></span>变长数组</h4>

<p><span style="color: green"><strong>C99</strong></span>允许声明变长数组。但是，变长数组的声明和初始化不能在一条语句中。正确的做法是：先声明变长数组，之后初始化。比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Initialization of variable-length array (VLA) C99 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Enter size of array: &quot;</span><span class="p">);</span>
</span><span class="line"><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span> <span class="n">square</span><span class="p">[</span><span class="n">size</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* initial square */</span>
</span><span class="line"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">square</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-5">1.2.4 字符串</h4>

<p>字符串长度：</p>

<ul>
  <li>字符串的实现是使用数组储存字符，最后一个是空字符<code>\0</code>（对应ASCII码为0）。使用<code>&lt;string.h&gt;</code>头文件时，<code>str()</code>函数返回输入字符串中，第一个空字符之前的字符数。</li>
</ul>

<p>初始化：</p>

<ul>
  <li>
    <p>第一种储存为字符数组。<code>char a[6] = "hello";</code>合法，最后一个是空字符；<code>char a[6] = "hell";</code>合法，最后两个是空字符；省略长度，比如<code>char a[] = "hello";</code>合法，最后一个是空字符，自动分配6个字符空间；<code>char a[5] = "hello";</code>对于字符串非法，对于字符数组合法。</p>
  </li>
  <li>
    <p>第二种储存为字符指针。<code>char *b = "hello";</code>合法，声明字符指针；声明字符指针，将其指向已有字符变量、字符串字面量或动态分配字符串，合法；已有字符指针重新指向其他字符串，合法；声明字符指针，却不初始化，非法；声明字符指针，却不初始化，而且修改或赋值指向的字符，非法。</p>
  </li>
  <li>
    <p>字符数组可以修改元素，比如<code>a[0] = 'l';</code>；字符指针指向的字符串不能修改，应该杜绝<s>*b = &#8216;l&#8217;;</s>之类的字符指针赋值，除非保证<code>b</code>是一个字符数组；对于操作字符串的函数，如果形参为字符指针，允许修改其指向的内容，比如<code>*b = 'l';</code>，因为默认（也只允许）传入参数是一个字符数组，而不是一个字符串字面量。</p>
  </li>
</ul>

<h4 id="section-6">1.2.4 字符串数组</h4>

<p>初始化：</p>

<ul>
  <li>使用指针数组储存，比如<code>char *a[5] = {"hello", "it", "is", "me", "!"};</code>；省略长度，<code>char *a[] = {"hello", "it", "is", "me", "!"};</code>合法；<code>char *a[5] = {"hello", "it", "is", "me"};</code>合法，最后一个是空指针（<code>NULL</code>）。</li>
</ul>

<h3 id="section-7">1.3 结构</h3>

<p>结构空间分配：</p>

<ul>
  <li>
    <p>成员按照声明的顺序在内存依次排列。</p>
  </li>
  <li>
    <p>第一个成员之前无间隙，因此方便指针指向结构。但成员之间或者最后一个成员之后，可能有间隙。</p>
  </li>
</ul>

<p>初始化：</p>

<ul>
  <li>
    <p>结构中可以嵌套结构、联合、枚举、字符串等多种类型。</p>
  </li>
  <li>
    <p>不需要初始化全部成员，剩下未初始化的成员使用0作为初始值，比如<code>""</code>作为空字符串。</p>
  </li>
  <li>
    <p><span style="color: green"><strong>C99</strong></span>使用符合字面量，比如<code>(struct test1) {.b = "test that", .c = 1};</code>。</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>initialize struct </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">test1</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span> <span class="n">p3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* p1.c is 0 */</span>
</span><span class="line"><span class="k">struct</span> <span class="n">test1</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;hello&quot;</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* c99 */</span>
</span><span class="line"><span class="cm">/* p1.a is 0 and p1.c is 3 */</span>
</span><span class="line"><span class="k">struct</span> <span class="n">test1</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">{.</span><span class="n">b</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* c99 */</span>
</span><span class="line"><span class="p">(</span><span class="k">struct</span> <span class="n">test1</span><span class="p">){.</span><span class="n">c</span> <span class="o">=</span> <span class="mi">10</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>结构、联合和枚举都可以使用<code class="language-c">typedef</code>定义，总结如下：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>initialize struct with typedef </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class="line">   <span class="kt">int</span> <span class="n">ele1</span><span class="p">;</span>
</span><span class="line">   <span class="kt">char</span> <span class="n">ele2</span><span class="p">;</span>
</span><span class="line"> <span class="p">}</span> <span class="n">Test1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">union</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">ele1</span><span class="p">;</span>
</span><span class="line">  <span class="kt">double</span> <span class="n">ele2</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">Test2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span><span class="n">CIRCLE</span><span class="p">,</span> <span class="n">RECTANGLE</span><span class="p">}</span> <span class="n">Test3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">Test1</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">{.</span><span class="n">ele1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">};</span>
</span><span class="line">  <span class="n">Test2</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">{.</span><span class="n">ele2</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">};</span>
</span><span class="line">  <span class="n">Test3</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">CIRCLE</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-8">1.4 联合</h3>

<p>联合空间分配：</p>

<ul>
  <li>只为最大的成员分配空间。</li>
</ul>

<p>初始化：</p>

<ul>
  <li>初始化与结构类似。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>initialize union </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">union</span> <span class="n">test1</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">union</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span> <span class="n">p3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">union</span> <span class="n">test1</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* c99 */</span>
</span><span class="line"><span class="k">union</span> <span class="n">test1</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">{.</span><span class="n">b</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* c99 */</span>
</span><span class="line"><span class="p">(</span><span class="k">union</span> <span class="n">test1</span><span class="p">){.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>如果联合包括两个及两个以上结构成员，而且这些结构中最初一个或多个成员类型匹配，那么这些匹配成员会同步。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>initialize union </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">union</span> <span class="n">test</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">  <span class="k">struct</span> <span class="n">test1</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">b1</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">b2</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">  <span class="k">struct</span> <span class="n">test2</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c1</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c2</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span> <span class="n">t1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="p">.</span><span class="n">b1</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line"><span class="cm">/* t.c.c1 is 10 */</span>
</span><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">t1</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">c1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-9">1.5 枚举</h3>

<p>初始化：</p>

<ul>
  <li>枚举元素如不指定，从0开始，依次增加1；可以指定具体数值，指定数值可以相同，允许尾逗号，例如<code class="language-c">enum {THIS = 2, THAT = 10, THESE = 2,} test1;</code>。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>initialize enum </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">enum</span> <span class="p">{</span><span class="n">FIRST</span><span class="p">,</span> <span class="n">SECOND</span><span class="p">}</span> <span class="n">p1</span><span class="p">;</span>
</span><span class="line"><span class="k">enum</span> <span class="n">test1</span> <span class="p">{</span><span class="n">FIRST</span><span class="p">,</span> <span class="n">SECOND</span><span class="p">};</span>
</span><span class="line"><span class="k">enum</span> <span class="n">test1</span> <span class="o">=</span> <span class="n">SECOND</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-10">1.6 指针</h3>

<p>参考<a href="http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c/">C语言指针记录</a>。</p>

<h3 id="section-11">1.7 函数</h3>

<h4 id="section-12">1.7.1 函数定义</h4>

<ul>
  <li>
    <p>函数不能返回数组，也不能返回两个数。</p>
  </li>
  <li>
    <p>函数返回类型可以是<code>void</code>，形参可以是<code>void</code>。<code>void</code>类型函数没有返回值，可以写一条表达式为空的<code>return</code>语句，比如<code class="language-c">return;</code>。</p>
  </li>
  <li>
    <p>每个形参必须单独声明类型，使用<code>,</code>连接；</p>
  </li>
  <li>
    <p>使用<code>void</code>丢弃函数返回值，比如<code>printf()</code>函数返回显示的字符数目，强制丢弃返回数值写为：<code class="language-c">(void) printf("Drop the return value.");</code>。</p>
  </li>
  <li>
    <p><code>main</code>函数返回值：<code>return</code>语句；<code>exit()</code>函数（位于<code>&lt;stdlib.h&gt;</code>库）。任何函数调用<code>exit()</code>函数，都会导致程序终止；只有<code>main</code>函数调用<code>return</code>语句，程序才终止。<span style="color: green"><strong>C99</strong></span>规定：非<code>void</code>类型函数必须指定返回类型，不能缺省。</p>
  </li>
  <li>
    <p>函数声明的形式为<code class="language-c">int thisFun(double para1, int para2);</code>。<span style="color: green"><strong>C99</strong></span>规定：函数在调用前，必须事先声明或者定义。调用前声明有很多好处，比如避免实际参数的默认转换等。</p>
  </li>
</ul>

<h4 id="section-13">1.7.2 数组型参数</h4>

<ul>
  <li>定义形参为一维数组的函数，普遍形式为：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Definition of function using array as the parameter </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* 一维数组长度不是必须 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 函数声明 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class="line"><span class="cm">/* 省略形参声明 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="p">[],</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 实际调用 */</span>
</span><span class="line"><span class="n">oneArrayFun</span><span class="p">(</span><span class="n">testArry</span><span class="p">,</span> <span class="n">testLen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>对于一维数组类型的参数，“长度”的实际参数可以比形式参数小，但不能大。</p>
  </li>
  <li>
    <p>函数可以改变一维数组形参的值，并在实参中体现。</p>
  </li>
  <li>
    <p><strong>C89</strong>定义形参为多维数组的函数，只能省略第一维长度，其余维度必须声明（即常量），普遍形式为：</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Definition of function using array as the parameter </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* 比如二维数组，行不是必须，但必须制定列 */</span>
</span><span class="line"><span class="cp">#define COL 10</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[][</span><span class="n">COL</span><span class="p">],</span> <span class="kt">int</span> <span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 函数声明 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[][</span><span class="n">COL</span><span class="p">],</span> <span class="kt">int</span> <span class="n">row</span><span class="p">);</span>
</span><span class="line"><span class="cm">/* 省略形参声明 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="p">[][</span><span class="n">COL</span><span class="p">],</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 实际调用 */</span>
</span><span class="line"><span class="n">twoArrayFun</span><span class="p">(</span><span class="n">testArry</span><span class="p">,</span> <span class="n">testRow</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><span style="color: green"><strong>C99</strong></span>可以声明任意变长数组作为函数参数，普遍形式为：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Definition of function using VLA as the parameter in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* 一维VLA */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">len</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 一维VLA声明的各种形式 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">len</span><span class="p">]);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="o">*</span><span class="p">]);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">[</span><span class="o">*</span><span class="p">]);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[]);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span> <span class="p">[]);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 实际调用 */</span>
</span><span class="line"><span class="n">oneArrayFun</span><span class="p">(</span><span class="n">testArry</span><span class="p">,</span> <span class="n">testLen</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 二维VLA */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* 二维VLA声明的各种形式 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="o">*</span><span class="p">][</span><span class="o">*</span><span class="p">]);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[][</span><span class="n">col</span><span class="p">]);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[][</span><span class="o">*</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><span style="color: green"><strong>C99</strong></span>允许在数组参数中使用关键字<code>static</code>，但只能用于第一维。好处是编译器更快访问数组，比如：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Use static in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* 一维数组长度至少为5 */</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="k">static</span> <span class="mi">5</span><span class="p">],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><span style="color: green"><strong>C99</strong></span>允许使用<strong>复合字面量</strong>。复合字面量是“左值”，可以包括常量或者常量表达式，形式与数组初始化类似；也可以使用<code>const</code>修饰。</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Use static in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Sum is %d. </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">oneArray</span><span class="p">((</span><span class="kt">int</span> <span class="p">[]){</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span> <span class="mi">5</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Sum is %d. </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">oneArray</span><span class="p">((</span><span class="kt">int</span> <span class="p">[</span><span class="mi">5</span><span class="p">]){</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">},</span> <span class="mi">5</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Sum is %d. </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">oneArray</span><span class="p">((</span><span class="kt">int</span> <span class="p">[</span><span class="mi">5</span><span class="p">]){</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">},</span> <span class="mi">4</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Sum is %d. </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class="line">         <span class="n">constOneArray</span><span class="p">((</span><span class="k">const</span> <span class="kt">int</span> <span class="p">[</span><span class="mi">5</span><span class="p">]){</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="mi">3</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">oneArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">constOneArray</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-14">2. 操作符类型和优先级</h2>

<p><img src="http://yulongniu.bionutshell.org/images/coperator.png" title="image" alt="C operators" /></p>

<p>图片取自<a href="#Ref">参考资料2</a>。</p>

<ul>
  <li>
    <p>操作符有两个性质：<strong>结合方向</strong>和<strong>优先级</strong>。<strong>结合方向</strong>决定操作符的执行对象，比如多个同等操作符；而<strong>优先级</strong>决定操作符的结合方式，通俗来讲即谁和谁结合在一起。但是，C没有规定表达式运算的先后顺序。比如对于二元操作符<code>+</code>，<code class="language-c">a = i + i++;</code>，由编译器决定是<code>i</code>还是<code>i++</code>先执行。</p>
  </li>
  <li>
    <p>操作符<code>/</code>和<code>%</code>用于负整数操作，结果由编译器决定。<span style="color: green"><strong>C99</strong></span>中<code>/</code>和<code>%</code>操作负数，返回最靠近0的结果。</p>
  </li>
  <li>
    <p>运算符<code>&amp;&amp;</code>和<code>||</code>（从左向右结合），两侧的两个表达式有运算顺序，先左后右。<strong>有可能右侧表达式没有计算，因此不要在右侧放入有副作用的表达式</strong>。</p>
  </li>
</ul>

<h2 id="section-15">3. 表达式</h2>

<ul>
  <li>
    <p>条件表达式<code class="language-c">i &gt; 0 ? i : f</code>，如果<code>i</code>和<code>f</code>是整数型和浮点型，即使条件判定为真，表达式的值为浮点型。</p>
  </li>
  <li>
    <p><code>switch</code>语句最后一个分支，添加<code class="language-c">break;</code>语句。原因是防止之后修改程序，需要再添加判断条件时，遗漏<code class="language-c">break;</code>语句。C语言的<code>switch</code>语句不能判断范围，但适合替代多个<code>OR</code>连接的判断语句。</p>
  </li>
  <li>
    <p>逗号表达式中，<code class="language-c">表达式1, 表达式2</code>，<code>表达式1</code>先计算之后丢弃其值，之后计算<code>表达式2</code>。因此，<strong><code>表达式1</code>必须有副作用</strong>。</p>
  </li>
</ul>

<h2 id="section-16">4. 语法注意事项</h2>

<ul>
  <li>
    <p><code>#define LOWER 0</code>定义常量的语句之后，没有分号<code>;</code>。</p>
  </li>
  <li>
    <p><code class="language-c">break;</code>只能跳出一层循环。</p>
  </li>
  <li>
    <p><code class="language-c">continue;</code>。有意思的应用场景，结合<code>if</code>语句和<code>continue;</code>语句，在循环中<strong>条件性</strong>忽略一些语句。</p>
  </li>
  <li>
    <p><code>EOF</code>是文档结束的标志（End of File），在<code class="language-c">&lt;stdio.h&gt;</code>定义为一个整数<code>-1</code>，代码如下：</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Definition of EOF in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#ifndef EOF</span>
</span><span class="line"><span class="cp"># define EOF (-1)</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>用单引号<code>''</code>标记的字符，对应的是ASCII的数字值。</p>
  </li>
  <li>
    <p><code>for</code>循环声明需要有主体；如无，在<code>for</code>语句后添加<code>;</code>作“无效声明（null statement）”。<strong>为了避免误解，<code>;</code>单独占一行</strong>，或者使用<code>{}</code>代替单独一行的<code>;</code>。</p>
  </li>
  <li>
    <p>顺序点（sequence point）</p>

    <ul>
      <li>
        <p><code class="language-c">&amp;&amp;</code>、<code class="language-c">||</code>和comma operators，左边和右边表达式之间。</p>
      </li>
      <li>
        <p>三元条件操作符<code class="language-c">?:</code>，在条件判断表达式与第二（第三）表达式之间。</p>
      </li>
      <li>
        <p>完整表达式结束，包括赋值、<code class="language-c">return</code>语句、<code class="language-c">if</code>/<code class="language-c">switch</code>/<code class="language-c">while</code>/<code class="language-c">do-while</code>条件表达式判断结束和<code class="language-c">for</code>三个表示式。</p>
      </li>
      <li>
        <p>函数的所有参数赋值和函数第一条语句执行之前（见后举例）。</p>
      </li>
      <li>
        <p>变量初始化语句结束，比如<code class="language-c">int a = 1;</code>。如果多个变量初始化（<code>,</code>分割），则在每一个<code>,</code>结束处，比如 <code class="language-c">int a = 1, b = 2;</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-c">i++</code>与<code class="language-c">++i</code></p>

    <ul>
      <li>
        <p>大多数情况用于整数操作。</p>
      </li>
      <li>
        <p><code class="language-c">++i</code>马上自增，<code class="language-c">i++</code>自增则在两个相邻顺序点之间进行。表达式<code class="language-c">++i</code>值为<code>i+1</code>，表达式<code class="language-c">i++</code>值为<code>i</code>。</p>
      </li>
      <li>
        <p>表达式<code class="language-c">i++ == 0;</code>中，<code>i</code>使用原始数值，在表达式结束后自增；相反，表达式<code class="language-c">++i == 0;</code>中，<code>i</code>马上自增后与0比较。</p>
      </li>
      <li>
        <p>对于表达式<code class="language-c">f(i++)</code>，传入的参数值为<code>i</code>，但是在函数内部开始执行前，<code class="language-c">i</code>完成自增。这是因为在<strong>函数的所有参数赋值和函数第一条语句执行之前</strong>有一个<strong>顺序点</strong>。</p>
      </li>
      <li>
        <p>在<code class="language-c">for</code>语句中，使用<code class="language-c">for(i = 0; i &lt; 10; i++)</code>与<code class="language-c">for(i = 0; i &lt; 10; ++i)</code>效果一样。</p>
      </li>
      <li>
        <p>对于现代编译器，<code class="language-c">i++</code>和<code class="language-c">++i</code>的执行效率没有区别。所以写代码时，按照自认为最清楚的方式写。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>未定义行为（undefined behavior）</p>

    <ul>
      <li>
        <p>一个表达式中既访问又修改同一个变量。</p>
      </li>
      <li>
        <p>数组访问超过上下限。造成原因：很有可能是忘记<strong>数组从0开始索引</strong>。</p>
      </li>
      <li>
        <p><strong>C89</strong>中，非<code>void</code>类型函数，执行到末尾，没有执行<code>return</code>语句。程序调用此类函数，会出现未定义行为。<span style="color: green"><strong>C99</strong></span>中，不合法。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>副作用（side effect）</p>

    <ul>
      <li>
        <p>所有赋值运算、<code class="language-c">i++</code>和<code class="language-c">++i</code>都有副作用，即改变原始变量的值。</p>
      </li>
      <li>
        <p>赋值运算的值是赋值操作后右侧的值，并且将其强制转换为左侧值类型；赋值运算左侧必须为“左值（lvalue）”。</p>
      </li>
      <li>
        <p>在同一个表达式，即访问某个变量，同时又修改这个变量，会造成<strong>“未定义行为”</strong>。有副作用的操作，会带来隐晦未定义行为。未定义行为会随着不同的编译器，而产生不同的结果。其危险性不仅在于阻碍跨平台使用，而且也会有程序运行失败或者得到意想不到结果。<strong>建议：不在一个表达式中即访问又修改同一个变量</strong>。一些典型的未定义行为的例子：</p>
      </li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Undefined behavior in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp"># can not decide whether &quot;++&quot;, &quot;=&quot;, or &quot;+&quot; is the first</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line"><span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line"><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp"># &quot;,&quot; is not comma operator</span>
</span><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-17">5. 标准库</h2>

<h3 id="include-stdiohlanguage-c">5.1 <code class="language-c">#include &lt;stdio.h&gt;</code></h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3.0f %6.1f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">fahr</span><span class="p">,</span> <span class="n">celsius</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>%m.pX</code>：格式串模板，<code>m</code>表示要显示的最小字段宽度，<code>p</code>表示精度，<code>X</code>表示类型。</p>

<p>对于 <code class="language-c">printf()</code>函数：</p>

<ul>
  <li>
    <p><code>%d</code>：十进制整数。</p>

    <ul>
      <li>
        <p><code>%1d</code>一个十进制整数，配合<code>scanf()</code>实现单个整数输入操作。</p>
      </li>
      <li>
        <p><code>%6d</code>：十进制整数，至少6位宽，右对齐；如果数字位数超过6位，则全部显示。</p>
      </li>
      <li>
        <p><code>%-6d</code>：同上，区别左对齐。</p>
      </li>
      <li>
        <p><code>%-6.3d</code>：同上，如果数字位数少于3位，左侧加0。比如，<code class="language-c">printf(".2d%", 5)</code>的输出为<code>05</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%u</code>：无符号十进制数。</p>

    <ul>
      <li>
        <p><code>%o</code>：无符号八进制数。</p>
      </li>
      <li>
        <p><code>%x</code>：无符号十六进制数。</p>
      </li>
      <li>
        <p>没有标准方法打印负八进制和负十六进制数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%h</code>：短整数前缀。</p>

    <ul>
      <li>
        <p><code>%l</code>：长整数前缀。</p>
      </li>
      <li>
        <p><code>%ll</code>：长长整数前缀，<span style="color: green"><strong>C99</strong></span>特有。</p>
      </li>
      <li>
        <p><code>%h</code>、<code>%l</code>、<code>%ll</code>与<code>d</code>、<code>u</code>、<code>o</code>和<code>x</code>连用，比如<code>ho</code>表示无符号短八进制数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%f</code>：浮点数，默认小数位为6位。</p>

    <ul>
      <li>
        <p><code>%6f</code>：浮点数，至少6位宽。</p>
      </li>
      <li>
        <p><code>%6.0f</code>：浮点树，至少6位宽，无小数点而且无小数位。</p>
      </li>
      <li>
        <p><code>%.2f</code>：浮点数，小数点后两位。</p>
      </li>
      <li>
        <p><code>%6.2f</code>：浮点数，至少6位宽，小数点后两位。</p>
      </li>
      <li>
        <p><code>%e</code>：科学计数。</p>
      </li>
      <li>
        <p><code>%g</code>：科学计数或者浮点数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%l</code>：<code>double</code>型前缀。</p>

    <ul>
      <li>
        <p><code>%l</code>只在<code class="language-c">scanf()</code>中使用，在<code class="language-c">printf()</code>使用<code>%f</code>和<code>%e</code>（或者<code>%g</code>）表示<code>float</code>型和<code>double</code>型。</p>
      </li>
      <li>
        <p><span style="color: green"><strong>C99</strong></span>中允许在<code class="language-c">printf()</code>使用<code>%lf</code>、<code>%le</code>和<code>%lg</code>，但是<code>l</code>不起作用。</p>
      </li>
      <li>
        <p><code>%L</code>：<code>long double</code>型前缀。</p>
      </li>
      <li>
        <p><code>%l</code>和<code>%L</code>与<code>e</code>、<code>f</code>、<code>g</code>连用。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%c</code>：字符。</p>
  </li>
  <li>
    <p><code>%s</code>：字符串。</p>
  </li>
  <li>
    <p><code>%%</code>：<code>%</code>自身。</p>
  </li>
</ul>

<p>对于<code class="language-c">scanf()</code>函数：</p>

<ul>
  <li>
    <p>格式串中出现空白字符（<strong>空格、水平或者垂直制表符、换页符、换行符</strong>），数量无关紧要，因为可以匹配任意数量（包括0个）空白字符。</p>
  </li>
  <li>
    <p><strong>不要输把空白字符（比如<code>"%d "</code>）放入格式串的结尾</strong>。原因：<code class="language-c">scanf()</code>会挂起，直到出现不能匹配的空白字符。</p>
  </li>
</ul>

<h2 id="span-stylecolor-greenc99span-1">6. <span style="color: green"><strong>C99</strong></span>注意事项</h2>

<ul>
  <li>
    <p>在<code>for</code>语句中声明的计数变量，只能在for循环中使用。比如 <code class="language-c">for(int i = 0; i &lt; 10; i++){...}</code>，变量<code>i</code>只能在循环内起作用。</p>
  </li>
  <li>
    <p>新增加表示布尔数值的头文件<code>&lt;stdbool.h&gt;</code>，使用方法：</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>bool in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdbool.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">bool</span> <span class="n">trueVal</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span> <span class="n">falseVal</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="kt">bool</span> <span class="n">a1</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="kt">bool</span> <span class="n">a2</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>允许使用<code>typedef</code>定义占用特定位数（是“比特数”，不是“字节数”）的整数，比如：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>typedef 32 bit integer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">typedef</span> <span class="kt">int32_t</span> <span class="n">Int32</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>BW Kernighan and DM Ritchie: <a href="http://www.amazon.com/The-Programming-Language-2nd-Edition/dp/0131103628">The C Programming Language (2nd Edition)</a>, 1988.</p>
  </li>
  <li>
    <p>KN King: <a href="http://www.amazon.com/Programming-Modern-Approach-2nd-Edition/dp/0393979504">C Programming: A Modern Approach, 2nd Edition</a>, 2008.</p>
  </li>
  <li>
    <p><a href="http://port70.net/~nsz/c/">C各种标准</a></p>
  </li>
  <li>
    <p><a href="http://en.cppreference.com/w/">C在线文档（推荐）</a></p>
  </li>
  <li>
    <p><a href="http://ganquan.info/standard-c/">C头快速查询</a></p>
  </li>
</ul>

<h3 id="section-18">更新记录</h3>

<p>2015年4月30日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs配置C语言编程环境]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/12/02/emacs-config-c/"/>
    <updated>2014-12-02T06:36:41+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/12/02/emacs-config-c</id>
    <content type="html"><![CDATA[<p>有很多优秀的C语言IDE用来实现高效的编程，比如<a href="https://www.jetbrains.com/clion/">CLion</a>。目前，CLion还在处于公开测试阶段，可以下载试用。本文介绍在Emacs下配置C/C++编程环境。</p>

<!--more-->

<h2 id="section">1. 安装和基本配置</h2>

<h3 id="section-1">1.1. 安装需求</h3>

<ul>
  <li>安装<a href="http://www.gnu.org/software/global/">GNU Global</a></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># dnf install global llvm llvm-devel clang* </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>安装Emacs的<code>helm</code>、<code>helm-swoop</code>、<code>helm-gtags</code>、<code>sr-speedbar</code>、<code>smartparens</code>、<code>google-c-style</code>、<code>auto-complete</code>、<code>auto-complete-c-headers</code>、<code>auto-complete-clang</code>包。</li>
</ul>

<h3 id="emacs">1.2. Emacs配置</h3>

<p>将<a href="#c-mode-config">附加环境设置</a>添加到Emacs设置文件，比如<code class="language-bash">~/.emacs</code>，此环境配置参考<a href="https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el">tuhdo</a>。</p>

<h2 id="section-2">2. 文件操作</h2>

<h3 id="section-3">2.1. 查找</h3>

<ul>
  <li>当前buffer查找函数、类的定义</li>
</ul>

<blockquote>
  <p><code>C-c h i</code>（helm-semantic-or-imenu）：可以输入部分关键词、空格等，以快速搜索。</p>
</blockquote>

<ul>
  <li>当前project查找定义</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>M-.</code>（helm-gtags-dwim）：输入查找内容。<code>M-,</code>（tags-loop-continue）：返回上一个buffer。</p>
    </li>
    <li>
      <p><code>C-j</code>（helm-gtags-select）：列出当前project所有定义，并且查找。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>查找引用</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>C-c g r</code>（helm-gtags-find-rtags）：光标停留在函数内部，查找该函数名；如果光标停留在函数名，查找该函数的所有引用。</p>
    </li>
    <li>
      <p><code>C-c g s</code>（helm-gtags-find-symbol）：光标停留在变量时的查找。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>查找当前函数引用的函数</li>
</ul>

<blockquote>
  <p><code>C-c g a</code>（helm-gtags-tags-in-this-function）</p>
</blockquote>

<ul>
  <li>查找文件</li>
</ul>

<blockquote>
  <p><code>C-c g P</code>（elm-gtags-find-files）</p>
</blockquote>

<h3 id="section-4">2.2. 列出源码树</h3>

<ul>
  <li>开启和关闭</li>
</ul>

<blockquote>
  <p><code>M-x sr-speedbar-open RET</code>：开启。<code>M-x sr-speedbar-close RET</code>：关闭。</p>
</blockquote>

<ul>
  <li>操作</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>b</code>和<code>f</code>切换到当前buffer和所有文件列表。</p>
    </li>
    <li>
      <p><code>=</code>：展开。<code>g</code>：收回。</p>
    </li>
    <li>
      <p><code>U</code>：上一级目录。</p>
    </li>
  </ol>
</blockquote>

<h3 id="section-5">2.3 代码补全</h3>

<p>代码补全使用<code>auto-complete</code>、<code>auto-complete-c-headers</code>、<code>semantic</code>包。在使用<code>auto-complete-c-headers</code>自动补全头文件名称时，使用以下命令获得头文件路径：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gcc -xc -E -v -
</span><span class="line"><span class="nv">$ </span>gcc -xc++ -E -v -
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://yulongniu.bionutshell.org/images/emacs_config_c_autocomplete.png" width="900" height="900" title="image" alt="images" /></p>

<h2 id="debug">3. 编译和debug</h2>

<h3 id="gcc">3.1 使用gcc编译</h3>

<p>使用<code>M-x compile</code>对源文件进行编译链接；或者开启ansi-term模式<code>M-x ansi-term</code>，进入shell操作。一个直接编译–汇编–链接的简单例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>gcc helloworld.c -o helloworld
</span><span class="line"><span class="nv">$ </span>./helloworld
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-6">附加内容</h2>

<p><a id="c-mode-config">C/C++的Emacs编程环境设置</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Emacs configure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
<span class="line-number">177</span>
<span class="line-number">178</span>
<span class="line-number">179</span>
<span class="line-number">180</span>
<span class="line-number">181</span>
<span class="line-number">182</span>
<span class="line-number">183</span>
<span class="line-number">184</span>
<span class="line-number">185</span>
<span class="line-number">186</span>
<span class="line-number">187</span>
<span class="line-number">188</span>
<span class="line-number">189</span>
<span class="line-number">190</span>
<span class="line-number">191</span>
<span class="line-number">192</span>
<span class="line-number">193</span>
<span class="line-number">194</span>
<span class="line-number">195</span>
<span class="line-number">196</span>
<span class="line-number">197</span>
<span class="line-number">198</span>
<span class="line-number">199</span>
<span class="line-number">200</span>
<span class="line-number">201</span>
<span class="line-number">202</span>
<span class="line-number">203</span>
<span class="line-number">204</span>
<span class="line-number">205</span>
<span class="line-number">206</span>
<span class="line-number">207</span>
<span class="line-number">208</span>
<span class="line-number">209</span>
<span class="line-number">210</span>
<span class="line-number">211</span>
<span class="line-number">212</span>
<span class="line-number">213</span>
</pre></td><td class="code"><pre><code class="emacs-lisp"><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;set up helm</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;helm-config</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;helm-grep</span><span class="p">)</span>
</span><span class="line"><span class="c1">;; The default &quot;C-x c&quot; is quite close to &quot;C-x C-c&quot;, which quits Emacs.</span>
</span><span class="line"><span class="c1">;; Changed to &quot;C-c h&quot;. Note: We must set &quot;C-c h&quot; globally, because we</span>
</span><span class="line"><span class="c1">;; cannot change `helm-command-prefix-key&#39; once `helm-config&#39; is loaded.</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c h&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-command-prefix</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-unset-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-x c&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;&lt;tab&gt;&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-execute-persistent-action</span><span class="p">)</span> <span class="c1">; rebihnd tab to do persistent action</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-i&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-execute-persistent-action</span><span class="p">)</span> <span class="c1">; make TAB works in terminal</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-z&quot;</span><span class="p">)</span>  <span class="ss">&#39;helm-select-action</span><span class="p">)</span> <span class="c1">; list actions using C-z</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-grep-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;&lt;return&gt;&quot;</span><span class="p">)</span>  <span class="ss">&#39;helm-grep-mode-jump-other-window</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-grep-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;n&quot;</span><span class="p">)</span>  <span class="ss">&#39;helm-grep-mode-jump-other-window-forward</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-grep-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;p&quot;</span><span class="p">)</span>  <span class="ss">&#39;helm-grep-mode-jump-other-window-backward</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">executable-find</span> <span class="s">&quot;curl&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">setq</span> <span class="nv">helm-google-suggest-use-curl-p</span> <span class="no">t</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="k">setq</span>
</span><span class="line"> <span class="nv">helm-scroll-amount</span> <span class="mi">4</span> <span class="c1">; scroll 4 lines other window using M-&lt;next&gt;/M-&lt;prior&gt;</span>
</span><span class="line"> <span class="nv">helm-quick-update</span> <span class="no">t</span> <span class="c1">; do not display invisible candidates</span>
</span><span class="line"> <span class="nv">helm-ff-search-library-in-sexp</span> <span class="no">t</span> <span class="c1">; search for library in `require&#39; and `declare-function&#39; sexp.</span>
</span><span class="line"> <span class="nv">helm-split-window-in-side-p</span> <span class="no">t</span> <span class="c1">;; open helm buffer inside current window, not occupy whole other window</span>
</span><span class="line"> <span class="nv">helm-candidate-number-limit</span> <span class="mi">500</span> <span class="c1">; limit the number of displayed canidates</span>
</span><span class="line"> <span class="nv">helm-ff-file-name-history-use-recentf</span> <span class="no">t</span>
</span><span class="line"> <span class="nv">helm-move-to-line-cycle-in-source</span> <span class="no">t</span> <span class="c1">; move to end or beginning of source when reaching top or bottom of source.</span>
</span><span class="line"> <span class="nv">helm-buffers-fuzzy-matching</span> <span class="no">t</span>          <span class="c1">; fuzzy matching buffer names when non-nil</span>
</span><span class="line">                                        <span class="c1">; useful in helm-mini that lists buffers</span>
</span><span class="line">
</span><span class="line"> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;helm-sources-using-default-as-input</span> <span class="ss">&#39;helm-source-man-pages</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-x&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-M-x</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-y&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-show-kill-ring</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-x b&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-mini</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-x C-f&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-find-files</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-h SPC&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-all-mark-rings</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c h o&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-occur</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c h C-c w&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-wikipedia-suggest</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c h x&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-register</span><span class="p">)</span>
</span><span class="line"><span class="c1">;; (global-set-key (kbd &quot;C-x r j&quot;) &#39;jump-to-register)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="ss">&#39;help-command</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-f&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-apropos</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="ss">&#39;help-command</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;r&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-info-emacs</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="ss">&#39;help-command</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-l&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-locate-library</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; use helm to list eshell history</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;eshell-mode-hook</span>
</span><span class="line">          <span class="nf">#&#39;</span><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class="line">              <span class="p">(</span><span class="nv">define-key</span> <span class="nv">eshell-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-l&quot;</span><span class="p">)</span>  <span class="ss">&#39;helm-eshell-history</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;; Save current position to mark ring</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;helm-goto-line-before-hook</span> <span class="ss">&#39;helm-save-current-pos-to-mark-ring</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; show minibuffer history with Helm</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minibuffer-local-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-p&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-minibuffer-history</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">minibuffer-local-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-n&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-minibuffer-history</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[remap</span> <span class="nv">find-tag]</span> <span class="ss">&#39;helm-etags-select</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="nv">[remap</span> <span class="nv">list-buffers]</span> <span class="ss">&#39;helm-buffers-list</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;; PACKAGE: helm-swoop                ;;</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;; Locate the helm-swoop folder to your path</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;helm-swoop</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Change the keybinds to whatever you like :)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c h o&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-swoop</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c s&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-multi-swoop-all</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; When doing isearch, hand the word over to helm-swoop</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">isearch-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-i&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-swoop-from-isearch</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; From helm-swoop to helm-multi-swoop-all</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-swoop-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-i&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-multi-swoop-all-from-helm-swoop</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Save buffer when helm-multi-swoop-edit complete</span>
</span><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">helm-multi-swoop-edit-save</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; If this value is t, split window inside the current window</span>
</span><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">helm-swoop-split-with-multiple-windows</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Split direcion. &#39;split-window-vertically or &#39;split-window-horizontally</span>
</span><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">helm-swoop-split-direction</span> <span class="ss">&#39;split-window-vertically</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; If nil, you can slightly boost invoke speed in exchange for text color</span>
</span><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">helm-swoop-speed-or-color</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">helm-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">provide</span> <span class="ss">&#39;setup-helm</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;setup-helm</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">setq</span>
</span><span class="line"> <span class="nv">helm-gtags-ignore-case</span> <span class="no">t</span>
</span><span class="line"> <span class="nv">helm-gtags-auto-update</span> <span class="no">t</span>
</span><span class="line"> <span class="nv">helm-gtags-use-input-at-cursor</span> <span class="no">t</span>
</span><span class="line"> <span class="nv">helm-gtags-pulse-at-cursor</span> <span class="no">t</span>
</span><span class="line"> <span class="nv">helm-gtags-prefix-key</span> <span class="s">&quot;\C-cg&quot;</span>
</span><span class="line"> <span class="nv">helm-gtags-suggested-key-mapping</span> <span class="no">t</span>
</span><span class="line"> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;helm-gtags</span><span class="p">)</span>
</span><span class="line"><span class="c1">;; Enable helm-gtags-mode</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;dired-mode-hook</span> <span class="ss">&#39;helm-gtags-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;eshell-mode-hook</span> <span class="ss">&#39;helm-gtags-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c-mode-hook</span> <span class="ss">&#39;helm-gtags-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c++-mode-hook</span> <span class="ss">&#39;helm-gtags-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;asm-mode-hook</span> <span class="ss">&#39;helm-gtags-mode</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-gtags-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c g a&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-gtags-tags-in-this-function</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-gtags-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-j&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-gtags-select</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-gtags-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-.&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-gtags-dwim</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-gtags-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-,&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-gtags-pop-stack</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-gtags-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c &lt;&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-gtags-previous-history</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">helm-gtags-mode-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c &gt;&quot;</span><span class="p">)</span> <span class="ss">&#39;helm-gtags-next-history</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;enable semantic mode</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;cc-mode</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;semantic</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">global-semanticdb-minor-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-semantic-idle-scheduler-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-semantic-idle-summary-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">global-semantic-stickyfunc-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">semantic-mode</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;open hs-mode</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c-mode-common-hook</span>   <span class="ss">&#39;hs-minor-mode</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;google-c-style</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c-mode-common-hook</span> <span class="ss">&#39;google-set-c-style</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c-mode-common-hook</span> <span class="ss">&#39;google-make-newline-indent</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;smartparens</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;smartparens-config</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">show-smartparens-global-mode</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">smartparens-global-mode</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">; auto-complete</span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;auto-complete</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;auto-complete-config</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">ac-config-default</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;; auto-complete-c-headers </span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">my:ac-c-header-init</span><span class="p">()</span>
</span><span class="line">  <span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;auto-complete-c-headers</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;ac-sources</span> <span class="ss">&#39;ac-source-c-headers</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;achead:include-directories</span> <span class="o">&#39;</span><span class="s">&quot;/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;achead:include-directories</span> <span class="o">&#39;</span><span class="s">&quot;/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/x86_64-redhat-linux&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;achead:include-directories</span> <span class="o">&#39;</span><span class="s">&quot;/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/backward&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;achead:include-directories</span> <span class="o">&#39;</span><span class="s">&quot;/usr/lib/gcc/x86_64-redhat-linux/4.9.2/include&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;achead:include-directories</span> <span class="o">&#39;</span><span class="s">&quot;/usr/local/include&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;achead:include-directories</span> <span class="o">&#39;</span><span class="s">&quot;/usr/include&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c++-mode-hook</span> <span class="ss">&#39;my:ac-c-header-init</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c-mode-hook</span> <span class="ss">&#39;my:ac-c-header-init</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="c1">;; auto-complete-clang </span>
</span><span class="line"><span class="c1">;;;;;;;;;;;;;;;;;;;;;;;;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;auto-complete-clang</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">ac-auto-start</span> <span class="no">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">ac-quick-help-delay</span> <span class="mf">0.5</span><span class="p">)</span>
</span><span class="line"><span class="c1">;; (ac-set-trigger-key &quot;TAB&quot;)</span>
</span><span class="line"><span class="c1">;; (define-key ac-mode-map  [(control tab)] &#39;auto-complete)</span>
</span><span class="line"><span class="p">(</span><span class="nv">define-key</span> <span class="nv">ac-mode-map</span>  <span class="nv">[</span><span class="p">(</span><span class="nv">control</span> <span class="nv">tab</span><span class="p">)</span><span class="nv">]</span> <span class="ss">&#39;auto-complete</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-ac-config</span> <span class="p">()</span>
</span><span class="line">  <span class="p">(</span><span class="k">setq</span> <span class="nv">ac-clang-flags</span>
</span><span class="line">	<span class="p">(</span><span class="nb">mapcar</span><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">item</span><span class="p">)(</span><span class="nv">concat</span> <span class="s">&quot;-I&quot;</span> <span class="nv">item</span><span class="p">))</span>
</span><span class="line">	       <span class="p">(</span><span class="nv">split-string</span>
</span><span class="line">		<span class="s">&quot;</span>
</span><span class="line"><span class="s">/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2</span>
</span><span class="line"><span class="s">/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/x86_64-redhat-linux</span>
</span><span class="line"><span class="s">/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/backward</span>
</span><span class="line"><span class="s">/usr/lib/gcc/x86_64-redhat-linux/4.9.2/include</span>
</span><span class="line"><span class="s">/usr/local/include</span>
</span><span class="line"><span class="s">/usr/include&quot;</span>
</span><span class="line">		<span class="p">)))</span>
</span><span class="line">  <span class="p">(</span><span class="nv">setq-default</span> <span class="nv">ac-sources</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">ac-source-abbrev</span> <span class="nv">ac-source-dictionary</span> <span class="nv">ac-source-words-in-same-mode-buffers</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;emacs-lisp-mode-hook</span> <span class="ss">&#39;ac-emacs-lisp-mode-setup</span><span class="p">)</span>
</span><span class="line">  <span class="c1">;; (add-hook &#39;c-mode-common-hook &#39;ac-cc-mode-setup)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;ruby-mode-hook</span> <span class="ss">&#39;ac-ruby-mode-setup</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;css-mode-hook</span> <span class="ss">&#39;ac-css-mode-setup</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;auto-complete-mode-hook</span> <span class="ss">&#39;ac-common-setup</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">global-auto-complete-mode</span> <span class="no">t</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-ac-cc-mode-setup</span> <span class="p">()</span>
</span><span class="line">  <span class="p">(</span><span class="k">setq</span> <span class="nv">ac-sources</span> <span class="p">(</span><span class="nb">append</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">ac-source-clang</span> <span class="nv">ac-source-yasnippet</span><span class="p">)</span> <span class="nv">ac-sources</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;c-mode-common-hook</span> <span class="ss">&#39;my-ac-cc-mode-setup</span><span class="p">)</span>
</span><span class="line"><span class="c1">;; ac-source-gtags</span>
</span><span class="line"><span class="p">(</span><span class="nv">my-ac-config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-7">参考资料</h3>

<ul>
  <li>
    <p><a href="http://tuhdo.github.io/c-ide.html#sec-1-3">C/C++ Development Environment for Emacs</a></p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=HTUE03LnaXA">YouTube Vedio</a></p>
  </li>
</ul>

<h3 id="section-8">更新记录</h3>

<p>2014年12月7日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[清洗二代测序数据]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/07/28/clean-seq-data/"/>
    <updated>2014-07-28T20:11:18+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/07/28/clean-seq-data</id>
    <content type="html"><![CDATA[<h2 id="fastqc">1. FastQC</h2>

<p><strong>简介</strong>：<a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/">FastQC</a>是用于对二代测序数据质量快速检验的工具，可以输入fastq（fastq.gz）、sam或者bam文件。查看<a href="http://www.bioinformatics.nl/courses/RNAseq/FastQC_Manual.pdf">输出结果解释</a>。</p>

<!--more-->

<p><strong>平台</strong>：所有平台。</p>

<p><strong>安装</strong>： 依赖Java，下载后直接安装使用。</p>

<p><strong>快速运行</strong>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 输出分析结果至特定文档</span>
</span><span class="line"><span class="nv">$ </span>fastqc seqFile1 --outdir setFolder1
</span><span class="line">
</span><span class="line"><span class="c"># 支持批量处理测序数据</span>
</span><span class="line"><span class="nv">$ </span>fastqc seqFile1 seqFile2 seqFileN
</span><span class="line">
</span><span class="line"><span class="c"># 查看帮助信息</span>
</span><span class="line"><span class="nv">$ </span>fastqc --help
</span><span class="line">
</span><span class="line"><span class="c"># 查看一共分析了多少个reads，比如fastqc文件为“accepted_filtered_fastqc.zip”</span>
</span><span class="line"><span class="nv">$ </span>unzip -p accepted_filtered_fastqc.zip accepted_filtered_fastqc/fastqc_data.txt <span class="p">|</span> <span class="se">\</span>
</span><span class="line">      sed -n <span class="s1">&#39;7 p&#39;</span> <span class="p">|</span> <span class="se">\</span>
</span><span class="line">      awk <span class="s1">&#39;{print $3}&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="trim-galore">2. Trim Galore!</h2>

<p><strong>简介</strong>：<a href="http://www.bioinformatics.babraham.ac.uk/projects/trim_galore/">Trim Galore!</a>是对<a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/">FastQC</a>和<a href="https://cutadapt.readthedocs.org/en/stable/installation.html">Cutadapt</a>的包装。可以处理Illumina、Nextera 3和smallRNA测序平台的双端和单端数据，包括去除adapter和低质量reads。</p>

<p><strong>平台</strong>：Linux</p>

<p><strong>安装</strong>:</p>

<ul>
  <li>需要先分别安装FastQC和Cutadapt，其中Cutadapt安装使用</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Install Cutadapt</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># pip install cutadapt</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>快速运行</strong>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Example code of runing the Cutadapt</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 处理双端测序结果</span>
</span><span class="line"><span class="nv">$ </span>trim_galore --quality <span class="m">20</span> --phred33 --stringency <span class="m">3</span> --length <span class="m">20</span> --paired <span class="se">\</span>
</span><span class="line">              --gzip --output_dir human_trimgalore <span class="se">\</span>
</span><span class="line">              mySeq_1_1.fastq.gz mySeq_1_2.fastq.gz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>重要参数解释</strong>：</p>

<ul>
  <li>
    <p><code class="language-bash$">--quality</code>：设定Phred quality score阈值，默认为20。</p>
  </li>
  <li>
    <p><code class="language-bash$">--phred33</code>：：选择<code class="language-bash">-phred33</code>或者<code class="language-bash">-phred64</code>，表示测序平台使用的Phred quality score。</p>
  </li>
  <li>
    <p><code class="language-bash$">--adapter</code>：输入adapter序列。也可以不输入，Trim Galore!会自动寻找可能性最高的平台对应的adapter。自动搜选的平台三个，也直接显式输入这三种平台，即<code class="language-bash">--illumina</code>、<code class="language-bash">--nextera</code>和<code class="language-bash">--small_rna</code>。</p>
  </li>
  <li>
    <p><code class="language-bash$">--stringency</code>：设定可以忍受的前后adapter重叠的碱基数，默认为1（非常苛刻）。可以适度放宽，因为后一个adapter几乎不可能被测序仪读到。</p>
  </li>
  <li>
    <p><code class="language-bash$">--length</code>：设定输出reads长度阈值，小于设定值会被抛弃。</p>
  </li>
  <li>
    <p><code class="language-bash$">--paired</code>：对于双端测序结果，一对reads中，如果有一个被剔除，那么另一个会被同样抛弃，而不管是否达到标准。</p>
  </li>
  <li>
    <p><code class="language-bash$">--retain_unpaired</code>：对于双端测序结果，一对reads中，如果一个read达到标准，但是对应的另一个要被抛弃，达到标准的read会被单独保存为一个文件。</p>
  </li>
  <li>
    <p><code class="language-bash$">--gzip</code>和<code class="language-bash$">--dont_gzip</code>：清洗后的数据zip打包或者不打包。</p>
  </li>
  <li>
    <p><code class="language-bash$">--output_dir</code>：输入目录。需要提前建立目录，否则运行会报错。</p>
  </li>
</ul>

<h2 id="trimmomatic">3. Trimmomatic</h2>

<p><strong>简介</strong>：<a href="http://www.usadellab.org/cms/?page=trimmomatic">Trimmomatic</a>是针对Illumina高通量测序平台设计的接头去除和低质量reads清洗软件。软件中包括有Illumina平台常见接头序列，可以很方便处理单端和双端RNA-seq数据。Trimmomatic也支持自己设计要去除的接头序列文件。</p>

<p><strong>平台</strong>：Java跨平台使用</p>

<p><strong>快速运行</strong>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Example code of runing the Trimmomatic </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 处理双端测序结果</span>
</span><span class="line"><span class="nv">$ </span>java -jar /path/trimmomatic-0.33.jar PE<span class="se">\</span>
</span><span class="line">       -threads <span class="m">12</span> -phred33 -trimlog mySeq_1-trim.log <span class="se">\</span>
</span><span class="line">       mySeq_1_1.fastq.gz mySeq_1_2.fastq.gz <span class="se">\</span>
</span><span class="line">       mySeq_1_1-trim.fastq.gz mySeq_1_1-unpair.fastq.gz <span class="se">\</span>
</span><span class="line">       mySeq_1_2-trim.fastq.gz mySeq_1_2-unpair.fastq.gz <span class="se">\</span>
</span><span class="line">       ILLUMINACLIP:/path/TruSeq3-PE.fa:2:30:10 <span class="se">\</span>
</span><span class="line">       LEADING:3 <span class="se">\</span>
</span><span class="line">       TRAILING:3 <span class="se">\</span>
</span><span class="line">       SLIDINGWINDOW:4:15 <span class="se">\</span>
</span><span class="line">       MINLEN:51
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>重要参数解释</strong>：</p>

<ul>
  <li>
    <p><code class="language-bash">-threads</code>：设置线程数目。</p>
  </li>
  <li>
    <p><code class="language-bash">-phred33</code>：选择<code class="language-bash">-phred33</code>或者<code class="language-bash">-phred64</code>，表示测序平台使用的Phred quality score。查询方法：首先，运行<a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/">FastQC</a>，在结果报告第一项会“猜出”测序平台。之后，查询平台对应Phred<a href="http://en.wikipedia.org/wiki/FASTQ_format">列表</a>。</p>
  </li>
  <li>
    <p><code class="language-bash">-trimlog</code>：输出运行日志。日志中包括对每一个read具体选择数据，所以文件会比较大。</p>
  </li>
  <li>
    <p><code class="language-bash">ILLUMINACLIP</code>：跟随四个参数，分别是<code class="language-bash">:&lt;fastaWithAdaptersEtc&gt;</code>为adaptesr文件完整路径（在Trimmomatic的默认安装目录下的 <code class="language-bash">adapter</code>，有整理好的）；<code class="language-bash">&lt;fastaWithAdaptersEtc&gt;</code>为seed matches（16bases）在匹配时的最大错配数目；<code class="language-bash">&lt;palindrome clip threshold&gt;</code>对于一对reads当得分超过30（约50 bases），seeds会被延伸和固定；<code class="language-bash">&lt;simple clip threshold&gt;</code>，对于单端reads当得分超过10（约17 bases），seeds会被延伸和固定。</p>
  </li>
  <li>
    <p><code class="language-bash">LEADING</code>和<code class="language-bash">TRAILING</code>：分别为去除read头部和尾部的低质量（低于quality3）碱基数目。</p>
  </li>
  <li>
    <p><code class="language-bash">SLIDINGWINDOW</code>：跟随两个参数，分别是 <code class="language-bash">&lt;windowSize&gt;</code>为扫描“窗口”长度；<code class="language-bash">&lt;requiredQuality&gt;</code>为窗口碱基质量的平均阈值，低于此会被删除。</p>
  </li>
  <li>
    <p><code class="language-bash">MINLEN</code>：设置最短reads数目。需要根据下游alignment软件设定，比如<a href="http://bowtie-bio.sourceforge.net/index.shtml">Bowtie</a>适用于短序列，比如50bp以下；而<a href="http://bowtie-bio.sourceforge.net/bowtie2/index.shtml">Bowtie2</a>适用于50bp以上。<a href="http://ccb.jhu.edu/software/tophat/index.shtml">TopHat</a> 则根据实际使用Bowtie或者Bowtie2选择。</p>
  </li>
</ul>

<h3 id="section">更新记录</h3>

<p>2016年9月10日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二代测序中的短序列比对]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/07/26/short-sequence-alignment/"/>
    <updated>2014-07-26T02:04:25+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/07/26/short-sequence-alignment</id>
    <content type="html"><![CDATA[<p>在二代测序数据分析中，非常重要的一步是将测得的短序列“对应”到基因组上。所使用的工具被称为“短序列比对工具（short sequence aligners）”。以下是一些常用工具的介绍。</p>

<h2 id="bowtie">1. Bowtie</h2>

<p><strong>简介</strong>：<a href="http://bowtie-bio.sourceforge.net/">Bowtie2</a>是现在广泛使用的序列比对工具。</p>

<p><strong>运行方式</strong>：所有平台</p>

<p><strong>特点</strong>：</p>

<ul>
  <li>
    <p>相比较<a href="http://bowtie-bio.sourceforge.net/index.shtml">Bowtie1</a>，处理大于50bp的短序列，速度更快、也更敏感。Bowtie1在处理小于50bp的短序列上，效果更好。</p>
  </li>
  <li>
    <p><a href="http://support.illumina.com/sequencing/sequencing_software/igenome.ilmn">iGenomes</a>提供一些事先编排（index）的基因组。
<!--more--></p>
  </li>
</ul>

<p><strong>快速运行</strong>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 建立一系列FASTA文件目录</span>
</span><span class="line"><span class="nv">$ </span>bowtie2-build /filePath/genomeFastaFile indexName
</span><span class="line">
</span><span class="line"><span class="c"># 从已经index文件中提取原始基因组</span>
</span><span class="line"><span class="nv">$ </span>bowtie2-inspect indexName &gt; genomeFastaFile
</span><span class="line">
</span><span class="line"><span class="c"># unpaired序列比对</span>
</span><span class="line"><span class="nv">$ </span>bowtie2 -p <span class="m">4</span> -x indexName -U readFiles -S samFileName
</span><span class="line">
</span><span class="line"><span class="c"># paired序列比对</span>
</span><span class="line"><span class="nv">$ </span>bowtie2 -p <span class="m">4</span> -x indexName  -1 readFiles1 -2 readFiles2 -S eg2.sam
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p><code>-p</code>：多线程</p>
  </li>
  <li>
    <p><code>-x</code>：之后跟index名称</p>
  </li>
  <li>
    <p><code>-U</code>：测序文件（比如Fasta，Fastq文件）</p>
  </li>
  <li>
    <p><code>-1</code>/<code>-2</code>：标识paired文件</p>
  </li>
  <li>
    <p><code>-S</code>：SAM格式输出文件</p>
  </li>
</ul>

<h3 id="section">参考网址</h3>

<ul>
  <li><a href="http://lh3lh3.users.sourceforge.net/NGSalign.shtml">Heng Li总结的工具列表</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RNA-seq基本概念和数据分析流程]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/07/23/rna-seq-analysis/"/>
    <updated>2014-07-23T05:03:15+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/07/23/rna-seq-analysis</id>
    <content type="html"><![CDATA[<p>RNA-seq相比较基因芯片，价格虽然昂贵一些，精度和灵敏度更高。同时，在测序深度足够时，也可以检测mRNA选择性剪切类型。</p>

<h2 id="section">1. 样品制备</h2>

<!--more-->

<h2 id="section-1">2. 测序</h2>

<p>Illumina双端测序<a href="http://www.illumina.com/technology/next-generation-sequencing/paired-end-sequencing_assay.html">动画</a>和<a href="http://onetipperday.blogspot.sg/2013/12/illumina-hiseq2000-adapter-and.html">图示</a>。</p>

<h2 id="section-2">3. 分析流程</h2>

<p>RNA-seq<a href="http://blog.qiuworld.com:8080/archives/2343">主要分析流程</a>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Workflow of RNA-seq data analysis </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">原始数据质量评估 --&gt;
</span><span class="line">数据清洗（去除接头和低质量read） --&gt;
</span><span class="line">清洗数据质量评估 --&gt;
</span><span class="line">map测序结果至基因组（转录组） --&gt;
</span><span class="line">map数据质量评估 --&gt;
</span><span class="line">差异表达基因/选择性剪切/新基因/融合基因选择 --&gt;
</span><span class="line">GO和pathway分析 --&gt;
</span><span class="line">共表达网络分析
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">3.1 序列清洗</h3>

<p>序列清洗主要是去除测序结果中的<a href="http://onetipperday.blogspot.sg/2013/06/illumina-hiseq2000-adapter.html">adapter</a>或通用引物等。</p>

<p>以下使用Illumina HiSeq2000平台，对一个人类样本的RNA测序。统计各种序列清洗方法和选择后的reads数目。原始数据两端测序reads分别为54,492,228和54,492,228。</p>

<hr />

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>#Trimmed</th>
      <th>#Mapped*</th>
      <th>#Filtered</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>r50-notrim</td>
      <td>108,984,456</td>
      <td>109,278,388</td>
      <td>79,143,942</td>
    </tr>
    <tr>
      <td>r50-nomixed-notrim</td>
      <td>108,984,456</td>
      <td>103,548,800</td>
      <td>79,143,942</td>
    </tr>
    <tr>
      <td>r50-nomixed-trimmomatic-min20</td>
      <td>104,164,622</td>
      <td>116,315,394</td>
      <td>80,337,256</td>
    </tr>
    <tr>
      <td>r50-nomixed-trimmomatic-min36</td>
      <td>101,548,172</td>
      <td>110,778,108</td>
      <td>79,248,896</td>
    </tr>
    <tr>
      <td>r50-nomixed-trimmomatic-min50</td>
      <td>98,525,312</td>
      <td>106,659,988</td>
      <td>77,779,424</td>
    </tr>
    <tr>
      <td>r50-nomixed-galore-min20</td>
      <td>107,097,862</td>
      <td>114,943,386</td>
      <td>83,039,928</td>
    </tr>
    <tr>
      <td>r100-nomixed-galore-min20</td>
      <td>107,097,862</td>
      <td>114,944,672</td>
      <td>87,899,316</td>
    </tr>
    <tr>
      <td>r165sd45-nomixed-galore-min20</td>
      <td>107,097,862</td>
      <td>114,201,366</td>
      <td>90,750,208</td>
    </tr>
    <tr>
      <td>r165sd45G-nomixed-galore-min20</td>
      <td>107,097,862</td>
      <td>109,901,742</td>
      <td>93,477,122</td>
    </tr>
    <tr>
      <td>r165sd45-nomixed-galore-min50</td>
      <td>104,869,208</td>
      <td>109,258,544</td>
      <td>89,329,672</td>
    </tr>
  </tbody>
</table>

<p><strong>*</strong>：使用TopHat2把序列mapped到hs19基因组。TopHat2默认设置为，如果一个reads能mapped到多个位点，则都会报道。因此数目可能比原始数据多。</p>

<hr />

<h2 id="section-4">4. 分析过程注意事项</h2>

<ol>
  <li>参考转录组注释文件（GFF/GTF）的染色体编号，与基因组信息一致。比如都用<code class="language-bash">chr1</code>，或者都用<code class="language-bash">1</code>标识1号染色体。可能出现问题地方：</li>
</ol>

<blockquote>
  <ul>
    <li>
      <p><a href="http://ccb.jhu.edu/software/tophat/manual.shtml">TopHat</a>的<code class="language-bash">-G/--GTF</code>参数。</p>
    </li>
    <li>
      <p><a href="http://miso.readthedocs.org/en/fastmiso/#human-mouse-gene-models-for-isoform-centric-analyses">MISO</a>程序<code class="language-bash">pe_utils</code>的传入转录组注释文件。</p>
    </li>
  </ul>

</blockquote>

<h2 id="section-5">5. 基本概念</h2>

<ul>
  <li>
    <p><strong>Read</strong>：是组成测序的结果的基本单位。</p>
  </li>
  <li>
    <p><strong>Count</strong>：在某次测序中，对于某个指标（比如某个基因），得到的reads数的总和。</p>
  </li>
  <li>
    <p><strong>RPKM</strong>（Reads Per Kilobase per Million）和<strong>FPKM</strong>（Fragments Per Kilobase per Million）：</p>
  </li>
</ul>

<blockquote>
  <p>首先需要解释FPKM和RPKM的原理是相似的，区别在于FPKM对应的是DNA片段，比如在一个Illumina的pair-end（双尾）RNA-seq中，一对（两个）reads对应是一个DNA片段。有了FPKM（RPKM）概念，我们就能比较：同一个样本中基因A和基因B的相对表达量；或者不同样本中，同一个基因的相对表达量。</p>

  <p>具体的原因是：引入“每一千碱基（per kilobase）”的原因在于，不同的RNA可能有不同长度，长度越长，对应的reads就越多。当每个RNA都除以自身长度（以1000碱基为单位）时，就可以比较同一个样本中不同基因的相对表达量了。相似地，引入“每一百万reads”的原因是，不同的样本可能测序的深度不一样，深度越深，当然对应的reads就越多了。如果结果除以各自库的数量（以一百万reads为单位），那么我们就能很好地衡量两个不同样本中同一个基因的相对表达量。</p>
</blockquote>

<ul>
  <li>
    <p><strong>Alignment</strong>：确定测得的reads在基因组上的位置的过程。</p>
  </li>
  <li>
    <p><strong>Mapping</strong>：确定aligned reads对应的转录本。</p>
  </li>
  <li>
    <p><strong>Pair end (PE)</strong>和<strong>Mate-Pair (MP)</strong>：</p>
  </li>
</ul>

<blockquote>
  <p>两种双端测序的方法，主要区别在样品库制备和测序上。比如PE制备的库是adapter在目标序列两端，而MP库中adapter在目标序列中间。因此，在数据分析时，MP类型测序必须注意剔除adapter。具体参考<a href="http://seqanswers.com/forums/showthread.php?t=503">论坛讨论</a>和<a href="http://scottmyourstone.blogspot.sg/2013/11/difference-between-paired-end-and-mate.html">Difference Between Paired-End and Mate-Pair Reads</a>。</p>

  <p>在序列软件软件中，有时也称呼一对测序reads（对同一个目标片段分别测得的正义链和反义链），它们互为mate，分别存在两个对应的测序结果文件中。</p>
</blockquote>

<ul>
  <li><strong>Adapter（接头）</strong>、<strong>Barcode（标签）</strong>和<strong>Insert（插入片段）</strong>：</li>
</ul>

<blockquote>
  <p>adapter是一段短的序列已知的核酸链，用于链接序列未知的目标测序片段。</p>

  <p>barcode，也称为index，是一段很短的寡居核酸链，用于在多个样品混合测序时，标记不同的样品。
insert是用于测序的目标片段，因为是包括在两个adapter之间，所以被称为“插入”片段。</p>

  <p>一个常见测序片段类似与<code class="language-bash">adapter--barcode--insert--adapter</code>。测序开始时前几个碱基无法测得，第一个adapter在数据输出时被去除；由于测序仪读长限制，第二个adapter通常无法测得。所以，经常得到类似 <code class="language-bash">barcode--部分insert</code>的read。最后，把barcode去除，只保留测度insert的片段，这个操作的术语是demultiplexing。</p>

  <p>需要注意的是，<a href="http://www.illumina.com/documents/products/datasheets/datasheet_truseq_sample_prep_kits.pdf">Illumina TruSeq</a>样品库制备方法中，barcode是在adapter中部，而且是与insert分开测序。而<a href="http://res.illumina.com/documents/products/technotes/technote_nextera_matepair_data_processing.pdf">Illumina Nextera Mate Pair</a>样品库制备中，adapter在目标序列中部。</p>
</blockquote>

<ul>
  <li>
    <p><strong>Concordant Pairs</strong>和<strong>Discordant Pairs</strong>：根据<a href="http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#paired-inputs">Bowtie2</a>的解释，concordant pairs表示一对reads在alignment时，既方向匹配又有合适距离（Bowtie2中是200bp～500bp）。如果上述方向和距离，任意一个条件不满足，则称为discordant pairs。</p>
  </li>
  <li>
    <p><strong>chrN_random</strong>和<strong>chrUn</strong>：基因组文件中通常含有类似<code class="language-bash">chr9_gl000198_random</code>和<code class="language-bash">chrUn_gl000211</code>的基因组。根据<a href="https://genome.ucsc.edu/FAQ/FAQdownloads.html#download11">UCSC</a>解释，<code class="language-bash">chrN_random</code>包括基因组已知但具体位置未知序列，或者位置已知但具体内容未完成序列。<code class="language-bash">ChrUn</code>中包括一些具体位置未知的序列。</p>
  </li>
  <li>
    <p><strong>chrN_xxx_hap1</strong>：转录组注释文件中会出现类似<code class="language-bash">chr6_apd_hap1</code>和<code class="language-bash">chr6_dbb_hap3</code>的基因组注释。根据<a href="http://genome.ucsc.edu/cgi-bin/hgGateway?org=Human&amp;db=hg19">UCSC解释</a>这些基因组是[单倍型(haplotype)]基因组(http://hapmap.ncbi.nlm.nih.gov/originhaplotype.html.en)。</p>
  </li>
</ul>

<h3 id="section-6">参考网址</h3>

<ul>
  <li>
    <p>推荐幻灯片<a href="http://www.slideshare.net/mikaelhuss/all-bio-rnaseqqc?from_action=save">RNA-seq quality control and pre-processing</a></p>
  </li>
  <li>
    <p><a href="http://faculty.ucr.edu/~tgirke/HTML_Presentations/Manuals/Workshop_Dec_12_16_2013/Rrnaseq/Rrna">Bioconductor详细流程</a></p>
  </li>
  <li>
    <p>RPKM和FPKM：<a href="http://jefworks.com/rpkm-and-fpkm-explained/">1</a>、 <a href="http://www.cureffi.org/2013/09/12/counts-vs-fpkms-in-rna-seq/">2</a>和<a href="http://www.partek.com/Tutorials/microarray/User_Guides/UnderstandingReads.pdf">3一个计算RPKM的例子</a></p>
  </li>
  <li>
    <p>ENCODE推荐的RNA-seq数据分析指导 <a href="http://genome.ucsc.edu/ENCODE/protocols/dataStandards/ENCODE_RNAseq_Standards_V1.0.pdf">The ENCODE Consortium: Standards, Guidelines and Best Practices for RNA-seq</a></p>
  </li>
  <li>
    <p>RNA-seq差异表达分析工作流程：<a href="http://216.49.144.90:8080/archives/3007/comment-page-2">中文</a>，<a href="http://vallandingham.me/RNA_seq_differential_expression.html">英文</a></p>
  </li>
  <li>
    <p><a href="http://www.rna-seqblog.com/how-many-reads-are-enough/">多少个read才够</a></p>
  </li>
  <li>
    <p><a href="http://www.macrogencn.com/_d275872179.htm">高通量测序常用名词汇总</a></p>
  </li>
  <li>
    <p><a href="http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#paired-inputs">Bowtie2对一些常用名词解释</a></p>
  </li>
  <li>
    <p><a href="http://www.plob.org/2014/11/09/8672.html">二代测序中barcodes index的介绍</a></p>
  </li>
  <li>
    <p>Illumina样品制备参考：<a href="https://www.med.unc.edu/pharm/calabreselab/files/tufts-sequencing-primer">Illumina TruSeq DNA Adapters De-Mystified</a>和<a href="http://bioinformatics.cvr.ac.uk/blog/illumina-adapter-and-primer-sequences/">Illumina adapter and primer sequences</a></p>
  </li>
  <li>
    <p><a href="http://www.research.janahang.com/quality-control-and-trimming-of-rna-seq-data/">Quality Control and Trimming of RNA-seq data</a></p>
  </li>
  <li>
    <p><a href="http://cgrlucb.wikispaces.com/file/view/readMapping.pdf">Best Practices and Suggestions for Read Alignment</a></p>
  </li>
  <li>
    <p><a href="http://barcwiki.wi.mit.edu/wiki/SOPs/rna-seq-diff-expressions">Using RNA-seq to quantify gene levels and assay for differential expression</a></p>
  </li>
</ul>

<h3 id="section-7">更新记录</h3>

<p>2015年5月19日</p>
]]></content>
  </entry>
  
</feed>
