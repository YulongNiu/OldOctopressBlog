<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bioinfor | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/bioinfor/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2015-12-20T20:09:48+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UCSC Table下载注释文件]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/06/02/download-ucsc-gene-mask/"/>
    <updated>2015-06-02T16:49:41+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/06/02/download-ucsc-gene-mask</id>
    <content type="html"><![CDATA[<p>在进行RNA-seq数据分析时，需要从<a href="http://genome.ucsc.edu/cgi-bin/hgTables">UCSC Table</a>下载各种注释信息。比如Cufflinks等要求的转录组注释信息、Cufflinks建议去除的rRNA/tRNA/线粒体组注释。</p>

<h2 id="section">1. 基因注释信息</h2>

<p>下载转录组Ensembl注释文件：</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_ensembl.png" title="image" alt="UCSC下载Ensembl注释" /></p>

<!--more-->

<p>在“table”选择中，<code class="language-bash">ensemblSource</code>表示Ensembl类型注释，<code class="language-bash">ensemblToGeneName</code>表示Ensembl到基因名注释对应。</p>

<h2 id="rrna">2. rRNA注释信息</h2>

<p>分为两步：</p>

<p>第一步， “table”选择<code class="language-bash">wgEncodeGencodeBasicV19</code>。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_rRNA.png" title="image" alt="UCSC下载rRNA注释" /></p>

<p>第二步，按照下图编辑“filter”。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_rRNA_maskTable.png" title="image" alt="UCSC下载rRNA注释Table" /></p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_rRNA_mask.png" title="image" alt="UCSC下载rRNA注释筛选" /></p>

<h2 id="trna">3. tRNA注释信息</h2>

<p>分为两步：</p>

<p>第一步，“track”选择 <code class="language-bash">tRNA Genes</code>。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_tRNA.png" title="image" alt="UCSC下载tRNA注释" /></p>

<p>第二步，保留pseudo tRNA注释。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_tRNA_mask.png" title="image" alt="UCSC下载tRNA注释" /></p>

<h2 id="section-1">4. 线粒体基因组注释</h2>

<p>分为两步：</p>

<p>第一步， “table”选择<code class="language-bash">wgEncodeGencodeBasicV19</code>。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_chrM.png" title="image" alt="UCSC下载chrM注释" /></p>

<p>第二步，按照下图编辑“filter”。</p>

<p><img src="http://yulongniu.bionutshell.org/images/hg19_chrM_mask.png" title="image" alt="UCSC下载chrM注释筛选" /></p>

<h3 id="section-2">参考资料</h3>

<ul>
  <li>
    <p>USCS Genome Browser的Google论坛：<a href="https://groups.google.com/a/soe.ucsc.edu/forum/#!topic/genome/IL_aeOuPYU0">1</a>、<a href="https://groups.google.com/a/soe.ucsc.edu/forum/#!msg/genome/jSAY8w1JVVo/P6lk4OJzDNEJ">2</a></p>
  </li>
  <li>
    <p>另一种选择rRNA、tRNA和线粒体组注释的方法<a href="http://onetipperday.blogspot.tw/2012/08/how-to-get-trnarrnamitochondrial-gene.html">How to get tRNA/rRNA/mitochondrial gene GTF file</a></p>
  </li>
  <li>
    <p><a href="http://webappl.blogspot.tw/2015/02/extract-rrna-and-trna-features-from.html">Extract rRNA and tRNA features from UCSC Browser</a></p>
  </li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2015年6月1日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[过滤TopHat分析双端测序的输出]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/16/filter-tophat2-output/"/>
    <updated>2015-05-16T04:33:10+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/16/filter-tophat2-output</id>
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>

<h2 id="section">0. 结论</h2>

<p>在使用TopHat2匹配双端测序结果后，建议根据成对reads的map基因组位置唯一、方向正确和距离合适的标准，筛选得到的匹配结果。比如，TopHat2可能生成<code class="language-bash">accepted_hits.bam</code>文件，处理方法如下：</p>

<p>{% codeblock lang:bash Filter TopHat Outputs%}</p>

<h1 id="bam">首先查看bam文件头部有多少行</h1>
<p>$ samtools view -H accepted_hits.bam | wc -l
86</p>

<h1 id="mapreadsnr--86">筛选成对且成功map到基因组唯一位置的reads，按照上一条输出结果，调整“NR &lt;= 86”</h1>
<p>$ samtools view -h accepted_hits.bam | \
    awk ‘{if (NR &lt;= 86) print $0}; {if($5 == 50 &amp;&amp; ($2 == 163 || $2 == 147 || $2 == 83 || $2 == 99)) print $0}’ | \
    samtools view -b - &gt; accepted_filtered.bam</p>

<p>$ samtools view accepted_filtered.bam | wc -l
79143942
{% endcodeblock %}</p>

<h2 id="tophatsam">1. TopHat输出sam文件的第五列</h2>

<p><a href="http://ccb.jhu.edu/software/tophat/manual.shtml">TopHat文档</a>没有解释其输出bam文件（比如<code class="language-bash">accepted_hits.bam</code>）的第五列的意义。按照<a href="http://bowtie-bio.sourceforge.net/bowtie2/index.shtml">Bowtie2</a>输出结果来看，是表示映射质量指标Mapping Quality scores（MAPQ），具体计算参考公式$\eqref{eq:1}$。</p>

<script type="math/tex; mode=display">\begin{align}
MAPQ = -10 \times log_{10}(pvalue)
\label{eq:1}
\end{align}</script>

<!--more-->

<p>MAPQ值越大，表示对应的read的alignment质量越高。然而，在TopHat输出结果中，MAPQ所代表意义略有不同。</p>

<p>{% codeblock lang:bash “MAPQ” distribution from TopHat2 accepted mapping reads%}
# 查看accepted_hits.bam文件的MAPQ数值，并统计出现频数
$ samtools view accepted_hits.bam | awk ‘{print $5}’ | sort –parallel=4 -n | uniq -c
5057430 0
3117731 1
8058500 3
93044727 50</p>

<h1 id="mapqnhin">查看前100位MAPQ数值和NH:i:n分布</h1>
<p>$ samtools view accepted_hits.bam | awk ‘{print $5}’ | head -100 | sort –parallel=4 -n | uniq -c
35 0
42 1
22 3
1 50</p>

<p>$ samtools view accepted_hits.bam | awk ‘{print $20}’ | head -100 | sort –parallel=4 -n | uniq -c
1 NH:i:1
22 NH:i:2
3 NH:i:20
13 NH:i:3
29 NH:i:4
5 NH:i:5
21 NH:i:6
1 NH:i:7
2 NH:i:8
3 NH:i:9</p>

<h1 id="mapqnhin-1">查看前200位MAPQ数值和NH:i:n分布</h1>
<p>$ samtools view accepted_hits.bam | awk ‘{print $5}’ | head -200 | sort –parallel=4 -n | uniq -c
60 0
43 1
67 3
30 50</p>

<p>$ samtools view accepted_hits.bam | awk ‘{print $20}’ | head -200 | sort –parallel=4 -n | uniq -c
30 NH:i:1
8 NH:i:12
7 NH:i:14
67 NH:i:2
3 NH:i:20
13 NH:i:3
30 NH:i:4
5 NH:i:5
31 NH:i:6
1 NH:i:7
2 NH:i:8
3 NH:i:9
{% endcodeblock %}</p>

<p>首先，我们可以看到TopHat输出的MAPQ只有四个数值，分别为<code class="language-bash">50</code>、<code class="language-bash">3</code>、<code class="language-bash">1</code>和<code class="language-bash">0</code>。根据<a href="http://samtools.github.io/hts-specs/SAMv1.pdf">sam文件标准</a>，<code class="language-bash">NH:i:n</code>表示含有查询序列的alignment的数量。因此，通过上述前100位和前200位分析可以发现，MAPQ并不是按照公式$\eqref{eq:1}$计算，而有可能是以下关系：</p>

<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: left">MAPQ (tophat)</th>
      <th style="text-align: center">Tag</th>
      <th style="text-align: right">描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">50</td>
      <td style="text-align: center">NH:i:1</td>
      <td style="text-align: right">map至唯一位置</td>
    </tr>
    <tr>
      <td style="text-align: left">30</td>
      <td style="text-align: center">NH:i:2</td>
      <td style="text-align: right">map至2个位置</td>
    </tr>
    <tr>
      <td style="text-align: left">1</td>
      <td style="text-align: center">NH:i:3/NH:i:4</td>
      <td style="text-align: right">map至3个或4个位置</td>
    </tr>
    <tr>
      <td style="text-align: left">0</td>
      <td style="text-align: center">NH:i:n (n &gt; 4)</td>
      <td style="text-align: right">map到多余4个位置</td>
    </tr>
  </tbody>
</table>

<hr />

<p>展示一个<code class="language-bash">NH:i:1</code>的例子，注意Illumina双端测序平台<code class="language-bash">fr-unstranded</code>：</p>

<p>{% codeblock lang:bash Two pairs of unique mapped reads from Illumina HiSeq2000 %}
HISEQ2000-02:436:C2PG3ACXX:3:2313:10972:95322   163     chr1    637224  50      100M    =       637339  215     AAATGATCTGTACAATAACCCCCTGTGACACCAGTCTACCTATGTAACAAATGCCCCTAAACTTAAAATAAAAGTTAAAAAAAAAGAAAATTAAAATCTC  &lt;@@BDABBDFBCDGEGHIGIIGIABAFHBGDFGGGHIIIFIEIGGGGIIIFFDHIGIIIIIIIICEHIIIIIIHEHHDHFFCBCCB@BCAACCCCCECCC    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1
HISEQ2000-02:436:C2PG3ACXX:3:2313:10972:95322   83      chr1    637339  50      100M    =       637224  -215    GTAATATGAAAAACACAAATCTTTCATTCATTCCTTTCAACTGATGAGGAAAATGAGGCATCGGGAGTTAGTAAAAGTCCACATTGAGATATGAGACCCA  CCADDDCCCCCCCDEEEECAEHEEGGIIHGFAAGGGHEF=IGGGIIGGHGCGIEIIIGIIIIIIIFIHIIIIIIGIIHFEAIGGIIGFFDFHDDDAD@@@    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1</p>

<p>HISEQ2000-06:325:C2RC0ACXX:5:2205:6961:88285    99      chr1    643662  50      100M    =       643707  145     CCTATCAAAATCTTAGCATTCCTCTTAGCCCTCAACAAAGCATTTCTAAAATGTGTATAGAAGACCAAAGGGCCAAAAGAGTCAACTTCTGAAGAAGCGC  CCCFFFFFHHHHHJJJJIJJHJJJJJJJIIJJJJJJJJJJJJIJJJJJIIIJJIIIJJJJJJJJJIJJJJIJJJIHHHHFFEFFFEEEEEEEDDCDDCDD    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1
HISEQ2000-06:325:C2RC0ACXX:5:2205:6961:88285    147     chr1    643707  50      100M    =       643662  -145    CTAAAATGTGTATAGAAGACCAAAGGGCCAAAAGAGTCAACTTCTGAAGAAGCGCAAAAAGAAAGTTGAGGAAATCTTAAAACATGTTATTGAGCTTAAA  CEEEDDDDEDFEEEEEEEBFFFFFHHHHEJJJJJJJJIJJJJGJIIIIHFJJJIIJJJJJIJJJJJJJJJJJJGHJJJJIJJJJJJJGHHHHFFFFFCCC    AS:i:0  XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:100     YT:Z:UU  NH:i:1
{% endcodeblock %}</p>

<h2 id="sam">2. sam文件的第二列</h2>

<p>sam文件中的第二列提供了具体的map情况，下列表格摘自<a href="http://samtools.github.io/hts-specs/SAMv1.pdf">sam文件标准</a>，sam/bam文件中第二列各种条件<strong>求和</strong>的<strong>十进制</strong>标识，<a href="http://broadinstitute.github.io/picard/explain-flags.html">快速解释第二列的bitwise FLAG</a>：</p>

<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: center">Decimal</th>
      <th style="text-align: center">Hexadecimal</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0x1</td>
      <td style="text-align: left">template having multiple segments in sequencing</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">0x2</td>
      <td style="text-align: left">each segment properly aligned according to the aligner</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">0x4</td>
      <td style="text-align: left">segment unmapped</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">0x8</td>
      <td style="text-align: left">next segment in the template unmapped</td>
    </tr>
    <tr>
      <td style="text-align: center">16</td>
      <td style="text-align: center">0x10</td>
      <td style="text-align: left">SEQ being reverse complemented</td>
    </tr>
    <tr>
      <td style="text-align: center">32</td>
      <td style="text-align: center">0x20</td>
      <td style="text-align: left">SEQ of the next segment in the template being reverse complemented</td>
    </tr>
    <tr>
      <td style="text-align: center">64</td>
      <td style="text-align: center">0x40</td>
      <td style="text-align: left">the first segment in the template</td>
    </tr>
    <tr>
      <td style="text-align: center">128</td>
      <td style="text-align: center">0x80</td>
      <td style="text-align: left">the last segment in the template</td>
    </tr>
    <tr>
      <td style="text-align: center">256</td>
      <td style="text-align: center">0x100</td>
      <td style="text-align: left">secondary alignment</td>
    </tr>
    <tr>
      <td style="text-align: center">512</td>
      <td style="text-align: center">0x200</td>
      <td style="text-align: left">not passing quality controls</td>
    </tr>
    <tr>
      <td style="text-align: center">1024</td>
      <td style="text-align: center">0x400</td>
      <td style="text-align: left">PCR or optical duplicate</td>
    </tr>
    <tr>
      <td style="text-align: center">2048</td>
      <td style="text-align: center">0x800</td>
      <td style="text-align: left">supplementary alignment</td>
    </tr>
  </tbody>
</table>

<hr />

<p>在map完成双端测序序列中，我们感兴趣的是一对reads都正确align到基因组上，而且方相匹配又距离合适。符合这样条件的reads，对应的第二列数值为99、147、83和163，具体图示参考<a href="https://biobeat.wordpress.com/2013/04/29/directional-rna-seq-part-1-extract-strand-information-from-sam-file/">Directional RNA-seq— Part 1: SAM file flags</a>。下面表格解释四个数值的具体意义，其中<code class="language-bash">1</code>标识双端测序，<code class="language-bash">2</code>表示一对reads正确地map到基因组合适位置，表格中着重陈述<code class="language-bash">64</code>、<code class="language-bash">32</code>、<code class="language-bash">128</code>和<code class="language-bash">16</code>。</p>

<hr />

<table>
  <thead>
    <tr>
      <th>Flag</th>
      <th>Composition</th>
      <th>Explanation</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>99</td>
      <td>64+32+2+1</td>
      <td>一对引物中第一个map到基因组正义链；第二个反方向map到基因组正义链</td>
    </tr>
    <tr>
      <td>147</td>
      <td>128+16+2+1</td>
      <td>一对引物中第二个反方向map基因组正义链；第一个map到基因组正义链</td>
    </tr>
    <tr>
      <td>83</td>
      <td>64+16+2+1</td>
      <td>一对引物中第一个map到基因组反义链；第二个反方向map到基因组反义链</td>
    </tr>
    <tr>
      <td>163</td>
      <td>128+32+2+1</td>
      <td>一对引物中第二个反方向map基因组正义链；第一个map到基因组正义链</td>
    </tr>
  </tbody>
</table>

<hr />

<p>之后，我们需要筛选含有这些flags的reads。由于我们通常需要操作bam文件，也希望输出是bam文件，中间过程不希望再重新生成sam文件。那么，就需要结合使用<code class="language-bash">awk</code>进行筛选，具体方法见本篇文章开头所示。当然，如果是只是查看，可以使用下面例子中的 <code class="language-bash">samtools view -f 0x2</code>。</p>

<p>{% codeblock lang:bash Count number of unique pair-mapped alignments%}
# map到基因组上唯一位置的reads数目
$ samtools view -q 50 accepted_hits.bam | wc -l
93044727
# 成对reads都map到基因组对应位置的reads数目
$ samtools view -f 0x2 accepted_hits.bam | wc -l
88793640
# 成对且唯一mapped的reads数目
$ samtools view -q 50 -f 0x2 accepted_hits.bam | wc -l
79143942
{% endcodeblock %}</p>

<h2 id="tophat">3. 操作TopHat输出的文件命令集锦</h2>

<p>{% codeblock lang:bash Useful bash for bam files from TopHat%}
# samtools的view -c命令，其实就是输出sam文件有多少行
$ samtools view accepted_hits.bam | wc -l
109278388
$ samtools view -c accepted_hits.bam
109278388</p>

<h1 id="bammappedreads">查看bam文件中mapped的reads长度分布</h1>
<p># 第二种方法是运行FastQC，输出结果中也有显示
samtools view accepted_hits.bam | awk ‘{print length($10)}’ | sort -n | uniq -c</p>

<h1 id="bed">查看bed文件前几行</h1>
<p>$ head junction.bed
# 统计bed文件有多少行，需要去除第一行注释
# 以下两种方式相同，但不够完美
$ wc -l junction.bed
220648 junctions.bed
$ awk ‘END {print NR}’ junctions.bed
220648
{% endcodeblock %}</p>

<h2 id="dnamrna">4. DNA链和mRNA链的称呼总结</h2>

<p>双链DNA和单链mRNA，对每条链都有特定的称呼。总结如下：</p>

<p>{% codeblock lang:bash DNA/RNA strands %}
3’~~~~~UCUGAU~~~~~ 5’ mRNA的对应基因信息在reverse strand</p>

<p>5’—–AGACTA———-ATTGTT—– 3’
3’—–TCTGAT———-TAACAA—– 5’</p>

<pre><code>            5'~~~~~AUUGUU~~~~~ 3' mRNA的对应基因信息在forward strand {% endcodeblock %}
</code></pre>

<p>对于一条双链DNA，称呼列表如下：</p>

<table>
  <thead>
    <tr>
      <th>方向<sup>a</sup></th>
      <th>名称1</th>
      <th>名称2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>从左至右</td>
      <td>forward</td>
      <td>plus</td>
    </tr>
    <tr>
      <td>从右至左</td>
      <td>reverse</td>
      <td>minus</td>
    </tr>
  </tbody>
</table>

<p><sup>a</sup>：方向是指5’至3’的阅读方向，用于区分两条DNA链条</p>

<hr />

<p>对于一条RNA链，其对应的双链DNA称呼如下：</p>

<table>
  <thead>
    <tr>
      <th>mRNA方向<sup>a</sup></th>
      <th>名称1</th>
      <th>名称2</th>
      <th>名称3</th>
      <th>名称4</th>
      <th>名称5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>同向</td>
      <td>coding</td>
      <td>nontemplate</td>
      <td>sense</td>
      <td>positive</td>
      <td>+</td>
    </tr>
    <tr>
      <td>反向</td>
      <td>template</td>
      <td>noncoding</td>
      <td>antisense</td>
      <td>negative</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<p><sup>a</sup>：mRNA方向是指5’至3’。</p>

<hr />

<h3 id="section-1">参考网址</h3>

<ul>
  <li>
    <p><a href="http://blog.qiuworld.com:8080/archives/3321">关于map当中的unique mapped reads问题</a></p>
  </li>
  <li>
    <p>TopHat的bam输出文件第五列（类似MAPQ）的讨论： <a href="https://groups.google.com/forum/#!topic/tuxedo-tools-users/m0p1qXDEqKA">tophat mapping quality</a>和<a href="http://www.acgt.me/blog/2015/3/17/more-madness-with-mapq-scores-aka-why-bioinformaticians-hate-poor-and-incomplete-software-documentation">More madness with MAPQ scores</a></p>
  </li>
  <li>
    <p><a href="https://biobeat.wordpress.com/2013/05/01/directional-rna-seq-part-2-using-samtools/">Directional RNA-seq— Part 2: Explore SAM flags using samtools</a></p>
  </li>
  <li>
    <p><a href="http://www.acgt.me/blog/2015/4/15/filtering-a-sam-file-generated-by-tophat-to-find-uniquely-mapped-concordant-read-pairs-awk-vs-samtools">Filtering a SAM file generated by TopHat to find uniquely mapped, concordant read pairs: AWK vs SAMtools</a></p>
  </li>
  <li>
    <p><a href="https://www.biostars.org/p/3423/">Question: Forward And Reverse Strand Conventions</a></p>
  </li>
  <li>
    <p><a href="http://en.wikipedia.org/wiki/Sense_(molecular_biology)">wiki</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2015年5月25日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二代测序中的短序列比对]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/07/26/short-sequence-alignment/"/>
    <updated>2014-07-26T02:04:25+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/07/26/short-sequence-alignment</id>
    <content type="html"><![CDATA[<p>在二代测序数据分析中，非常重要的一步是将测得的短序列“对应”到基因组上。所使用的工具被称为“短序列比对工具（short sequence aligners）”。以下是一些常用工具的介绍。</p>

<h2 id="bowtie">1. Bowtie</h2>

<p><strong>简介</strong>：<a href="http://bowtie-bio.sourceforge.net/">Bowtie2</a>是现在广泛使用的序列比对工具。</p>

<p><strong>运行方式</strong>：所有平台</p>

<p><strong>特点</strong>：</p>

<ul>
  <li>
    <p>相比较<a href="http://bowtie-bio.sourceforge.net/index.shtml">Bowtie1</a>，处理大于50bp的短序列，速度更快、也更敏感。Bowtie1在处理小于50bp的短序列上，效果更好。</p>
  </li>
  <li>
    <p><a href="http://support.illumina.com/sequencing/sequencing_software/igenome.ilmn">iGenomes</a>提供一些事先编排（index）的基因组。
<!--more--></p>
  </li>
</ul>

<p><strong>快速运行</strong>：</p>

<p>{% codeblock lang:bash %}
# 建立一系列FASTA文件目录
$ bowtie2-build /filePath/genomeFastaFile indexName</p>

<h1 id="index">从已经index文件中提取原始基因组</h1>
<p>$ bowtie2-inspect indexName &gt; genomeFastaFile</p>

<h1 id="unpaired">unpaired序列比对</h1>
<p>$ bowtie2 -p 4 -x indexName -U readFiles -S samFileName</p>

<h1 id="paired">paired序列比对</h1>
<p>$ bowtie2 -p 4 -x indexName  -1 readFiles1 -2 readFiles2 -S eg2.sam</p>

<p>{% endcodeblock %}</p>

<ul>
  <li>
    <p><code>-p</code>：多线程</p>
  </li>
  <li>
    <p><code>-x</code>：之后跟index名称</p>
  </li>
  <li>
    <p><code>-U</code>：测序文件（比如Fasta，Fastq文件）</p>
  </li>
  <li>
    <p><code>-1</code>/<code>-2</code>：标识paired文件</p>
  </li>
  <li>
    <p><code>-S</code>：SAM格式输出文件</p>
  </li>
</ul>

<h3 id="section">参考网址</h3>

<ul>
  <li><a href="http://lh3lh3.users.sourceforge.net/NGSalign.shtml">Heng Li总结的工具列表</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建和展示进化树软件使用心得]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/05/02/phylo-tool-summary/"/>
    <updated>2014-05-02T05:13:59+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/05/02/phylo-tool-summary</id>
    <content type="html"><![CDATA[<h2 id="section">构建进化树</h2>

<h3 id="phyml">1. PhyML</h3>

<p><strong>构建进化树方法</strong>：Maximum Likelihood</p>

<p><strong>评估</strong>：选择bootstrap或者Likelihood-ratio test</p>

<p><strong>运行方式</strong>：所有平台和<a href="http://atgc.lirmm.fr/phyml/">网页</a></p>

<p><strong>心得</strong>：理论上支持4000条序列，小于2000000个字符。但是，对于个人电脑，通常100-200条序列比较合适。命令行运行时，可以选择非常简介的默认模式运行。在默认模式下，bootstrap需要手动开启。安装和使用非常方便，直接下载后可以直接使用。同时，bootstrap可以通过MPI分布计算，但是需要从源代码安装。</p>

<p><strong>快速运行</strong>：</p>

<p>{% codeblock lang:bash %}
phyml -i align_file.phy –no_memory_check
{% endcodeblock %}</p>

<!--more-->

<ul>
  <li><code>-i</code>：后跟需要Phylip格式文件</li>
  <li><code>--no_memory_check</code>：不用检查内存，防止程序运行时跳出</li>
</ul>

<h3 id="raxml">2. RAxML</h3>

<p><strong>构建进化树方法</strong>：Maximum Likelihood</p>

<p><strong>运行方式</strong>：所有<a href="http://www.exelixis-lab.org/">平台</a>和网页。</p>

<p><strong>心得</strong>：推荐<a href="http://www.phylo.org/portal2/login!input.action">网页运行</a>，支持数据的存放和其他构建进化树的方法。本地安装支持MPI和PThreads的分布计算，但是安装有些复杂，需要仔细阅读文档。</p>

<p><strong>快速运行1</strong>：</p>

<p>{% codeblock lang:bash %}
raxmlHPC-PTHREADS-AVX -x 12345 -p 12345 -# 100 -m GTRGAMMA -T 4 -s align_file.phy -n TEST
{% endcodeblock %}</p>

<ul>
  <li><code>-x</code>：bootstrap运行时设定随机数，用于结果重现</li>
  <li><code>-p</code>：parsimony推断时设定随机数，用于结果重现</li>
  <li><code>-#</code>：bootstrap次数。也可以设定为autoMRE，最大次数是1000。</li>
  <li><code>-m</code>：设定使用的模型，GTRGAMMA为核苷酸序列适用模型</li>
  <li><code>-T</code>：设定线程数，不要超过最大线程</li>
  <li><code>-s</code>：输入文件，Phylip或者fasta文件</li>
  <li><code>-n</code>：输入文件记号</li>
</ul>

<p><strong>快速运行2</strong>：</p>

<p>{% codeblock lang:bash %}
raxmlHPC-PTHREADS-AVX -f a -x 12345 -p 12345 -# autoMRE -m GTRCAT -T 4 -s align_file.phy -n TEST
{% endcodeblock %}</p>

<ul>
  <li><code>-f a</code>：选定算法，快速bootstrap</li>
</ul>

<h2 id="section-1">展示进化树</h2>

<h3 id="itol">1. iTOL</h3>

<p><strong>运行方式</strong>：<a href="http://itol.embl.de/">网页</a></p>

<p><strong>心得</strong>：</p>

<ul>
  <li>
    <p>用户可以添加很多自定义的项目，丰富和完善自己的进化树，比如添加柱状图、蛋白结构域、heatmap、基因平行转移（horizontal gene transfer）等；</p>
  </li>
  <li>
    <p>如果输入NCBI taxonomy编号，能够自动转化成物种名称；支持鼠标点击交互式运行，非常方便。
心得：可以在网站上建立自己的帐号，之后设定不同的project展示和存放自己的项目。尝试构建了2000条左右的序列，显示完全没有问题。</p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2014年5月1日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Circos Notes]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/03/18/circos-notes/"/>
    <updated>2014-03-18T03:37:45+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/03/18/circos-notes</id>
    <content type="html"><![CDATA[<p>Mapping data onto a Circos figure requires that you identify what patterns in your data are (a) likely to be important and (b) likely to be present, and create a figure that exposes such patterns. Remember, if the pattern exists, you can’t afford to miss it. If it doesn’t exist, you can’t afford to be fooled into thinking that it’s there, or left wondering whether it’s occluded by other data.</p>

<h2 id="run-circos">1. Run circos</h2>

<p>{% codeblock lang:bash %}
bin/circos
-png
-svg
-conf etc/circos.conf
-outputdir /path/to/your/output/directory
-outputfile yourimage.png
{% endcodeblock %}
<!--more--></p>

<ul>
  <li>
    <p><code class="language-bash">-debug</code> is used for debugging</p>
  </li>
  <li>
    <p><code class="language-bash">-cdump</code> is used for check the parsing file.</p>
  </li>
</ul>

<p>{% codeblock lang:bash %}
# store all debug output in circos.debug.txt and display only karyotype
&gt; circos … -group_debug _all | tee circos.debug.txt | egrep “debuggroup karyotype”
# extract other debug reports
&gt; egrep “debuggroup rule” circos.debug.txt
&gt; egrep “debuggroup (rule|scale)” circos.debug.txt
{% endcodeblock %}</p>

<h2 id="syntax-and-configure-files">2. Syntax and configure files</h2>

<p>Configuration syntax is like:</p>

<p>{% codeblock lang:html %}</p>
<ideogram>
 thickness = 30p
 fill      = yes
 &#8230;
</ideogram>
<p>{% endcodeblock %}
Usefule syntax: hierarchical structure <code class="language-html">&lt;ideogram&gt;</code>; all data points in all plot tracks <code class="language-html">&lt;links&gt;</code> and <code class="language-html">&lt;plots&gt;</code>; local data points in a given track <code class="language-html">&lt;link&gt;</code> and <code class="language-html">&lt;plot&gt;</code>; rules <code class="language-html">&lt;rules&gt;</code> and <code class="language-html">&lt;rule&gt;</code>; highlight<code class="language-html">&lt;hightlight&gt;</code>.</p>

<p>Extermal imports</p>

<p>{% codeblock lang:html %}</p>
<image>
# Included from Circos distribution.
&lt;&lt;include etc/image.conf&gt;&gt;
</image>

<h1 id="colors-fonts-and-fill-patterns">colors, fonts and fill patterns</h1>
<p>«include etc/colors_fonts_patterns.conf»
# system and debug parameters
«include etc/housekeeping.conf»
{% endcodeblock %}</p>

<p>Accessing configuration values<code class="language-html">parameter2 = conf(parameter1)</code> or <code class="language-html">parameter2 = conf(block1,block2,parameter1)</code> for:</p>

<p>{% codeblock lang:html %}</p>
<block1>
<block2>
parameter1 = &#8230;
</block2>
</block1>
<p>{% endcodeblock %}</p>

<p>Eval</p>

<p>{% codeblock lang:html %}
track_color = blue
track_width = 100
track_start = 0.5</p>

<plots>
<plot>
# color=blue
color = conf(track_color)
# r0 = 0.5r
r0    = eval(conf(track_start) . &#8220;r&#8221;)
# r1 = 0.5r+100p
r1    = eval(conf(track_start) . &#8220;r&#8221; + conf(track_width) . &#8220;p&#8221;)
</plot>
</plots>
<p>{% endcodeblock %}</p>

<p>Color</p>

<p>Use the color name given, like <code class="language-html">red</code>, <code class="language-html">lred</code>, <code class="language-html">vlred</code>, <code class="language-html">vvlred</code>, <code class="language-html">dred</code>, <code class="language-html">vdred</code>, <code class="language-html">vvdred</code>. If a pure color is need, use <code class="language-html">pred</code>. For the transparent color, <code class="language-html">red_a1</code>, <code class="language-html">red_a2</code>, and to <code class="language-html">red_a5</code>. <code class="language-html">red_a1</code> has a 17% tansparency and <code class="language-html">red_a5</code> have a 83% transparency.</p>

<h2 id="ideogram">3. Ideogram</h2>

<p>One of the most common used ideogram is the karyotypes plot. The chromosome is marked as:</p>

<p>{% codeblock lang:perl %} 
chr - id label start end color
{% endcodeblock %}
for example</p>

<p>{% codeblock lang:perl %}
chr - hs1 1 0 249250621 chr1
{% endcodeblock %}</p>

<p>The cytogenetic bands data is like:</p>

<p>{% codeblock lang:perl %}
band hs1 p36.33 p36.33 0 2300000 gneg
{% endcodeblock %}
* Choose a subset of chromosomes</p>

<p>{% codeblock lang:perl %}
chromosomes_display_default = no</p>

<p>chromosomes = hs1;hs2;hs3;h4
chromosomes = /hs[1-4]$/
chromosomes = /hs[1-4]$/;hs10;hs11
chromosomes = /hs[1-4]$/;-hs3
chromosomes = hs1:(-100,120-);hs2;hs3;h4
{% endcodeblock %}</p>

<ul>
  <li>Order</li>
</ul>

<p>{% codeblock lang:perl %}
chromosomes_order = hs2,hs3,hs1,hs5,hs4,hs8,hs7,hs6
{% endcodeblock %}</p>

<ul>
  <li>Scale</li>
</ul>

<p>{% codeblock lang:perl %}
chromosomes_scale = hs1=0.25,hs2=2.0
# 25% and 50%
chromosomes_scale = hs1=0.25r,hs2=0.50r
# each is 25%
chromosomes_scale = /hs[12]/=0.5rn
# all ideograms distributed evenly within entire figure
chromosomes_scale   = /./=1rn
{% endcodeblock %}</p>

<ul>
  <li>Rotation</li>
</ul>

<p>{% codeblock lang:html %}</p>
<image>
angle_orientation* = counterclockwise
&lt;&lt;include etc/image&gt;&gt;
</image>
<p>{% endcodeblock %}</p>

<p>{% codeblock lang:perl %}
chromosomes_reverse = /hs[234]/
{% endcodeblock %}</p>

<ul>
  <li>Chromosome color</li>
</ul>

<p>{% codeblock lang:perl %}
chromosomes_color = hs1=red,hs2=orange,hs3=green,hs4=blue
{% endcodeblock %}
Also, the color could be redefined as</p>

<p>{% codeblock lang:perl %}
chr1* = red
chr2* = orange
chr3* = green
chr4* = blue
{% endcodeblock %}</p>

<ul>
  <li>Position</li>
</ul>

<p>{% codeblock lang:perl %}
chromosomes_radius = hs4:0.9r
{% endcodeblock %}</p>

<ul>
  <li>Show bands</li>
</ul>

<p>{% codeblock lang:perl %}
band_transparency = 0
{% endcodeblock %}</p>

<ul>
  <li>Add chromosome</li>
</ul>

<p>For example, add the human mitochondria chromosome.</p>

<p>Add the following to the file <code class="language-bash">data/karyotype/karyotype.human.txt</code></p>

<p>{% codeblock lang:perl %}
chr - hsMT MT 0 16569 chrMT
{% endcodeblock %}</p>

<p>Add “hsMT” color in the file <code class="language-bash">etc/colors.ucsc.conf</code></p>

<p>{% codeblock lang:perl %}
chrMT = 121,204,61
{% endcodeblock %}</p>

<h2 id="highlight">4. Highlight</h2>

<h3 id="data-type">4.1 Data type</h3>

<p>Data type of highlight is</p>

<p>{% codeblock lang:perl %}
chr start end
{% endcodeblock %}
for exmaple,</p>

<p>{% codeblock lang:perl %}
hs1 1298972 1300443
{% endcodeblock %}</p>

<p>We can also add the highlight information into the data file, for example:</p>

<p>{% codeblock lang:perl %}
hs1 100433463 100487964 fill_color=red,r0=0.6r,r1=0.6r+50p
hs1 232817594 240828534 fill_color=chr9,z=61,r0=0.4r-78.7058p,r1=0.4r+78.7058p
{% endcodeblock %}</p>

<h3 id="conf-format">4.2 Conf format</h3>

<p>{% codeblock lang:html %}</p>

<highlights>

<highlight>
&#8230;
</highlight>

<highlight>
&#8230;
</highlight>

<highlight>
&#8230;
</highlight>

</highlights>
<p>{% endcodeblock %}</p>

<h3 id="parameters">4.3 Parameters</h3>

<p><code>r0</code>: inner radius of highlight</p>

<p><code>r1</code>: outer radius of highlight</p>

<p><code>offset</code>:  an offset applied to both r0 and r1 (useful for overriding default r0,r1 values defined at lower precedence)</p>

<p><code>fill_color</code>: color of the highlight slice</p>

<p><code>stroke_color</code>: color of the highlight border, drawn if stroke_thickness is set</p>

<p><code>stroke_thickness</code>: border thickness, if any, of the highlight slice</p>

<p><code>z</code>: z-depth of the highlight, controlling the order in which highlights are drawn</p>

<p><code>ideogram</code>: toggles the position of the highlight to be within the ideogram extent</p>

<h3 id="plot-hightlight">4.4 Plot hightlight</h3>

<p>{% codeblock lang:html %}</p>
<plots>
<plot>
type = highlight
file = data/3/chr.highlights.txt
r0   = 0.3r
r1   = 0.35r
z    = 10
</plot>
</plots>
<p>{% endcodeblock %}</p>

<h2 id="links">5. Links</h2>

<h3 id="data-type-1">5.1 Data type</h3>

<p>{% codeblock lang:perl %}
hs1 100 200 hs2 250 300
{% endcodeblock %}
or</p>

<p>{% codeblock lang:perl %}
segdup00010 hs1 100 200
segdup00010 hs2 250 300
{% endcodeblock %}</p>

<p>with link options</p>

<p>{% codeblock lang:perl %}
hs1 100 200 hs2 250 300 color=blue
hs1 400 550 hs3 500 750 color=red,thickness=5p
hs1 600 800 hs4 150 350 color=black
{% endcodeblock %}</p>

<h3 id="conf-format-1">5.2 Conf format</h3>

<p>{% codeblock lang:html %}</p>
<links>
<link />
file          = data/5/segdup.txt
radius        = 0.8r
bezier_radius = 0r
color         = black_a4
thickness     = 2

</links>
<p>{% endcodeblock %}</p>

<h3 id="parameters-1">5.3 Parameters</h3>

<p><code>radius</code>: this is the radial position of the termination of the link; for relative values, if radius &lt; 1 then it is defined in terms of the inner ideogram radius, otherwise it is defined in terms of the outer ideogram radius</p>

<p><code>bezier_radius</code>: the radial position of the third control point (in addition to the two positions defined by the link coordinates) used to draw the Bezier curve; if this parameter is not defined then straight lines will be used</p>

<p><code>color</code>: color of the link line</p>

<p><code>thickness</code>: thickness of the link line (note that this is not stroke_thickness, since the line isn’t technically stroked)</p>

<p><code>record_limit</code>: if this is defined, the number of records read from the file is capped; coordinate records are sampled from the start of the file; useful for debugging</p>

<p>In each <code class="language-html">&lt;link&gt;</code>, <code class="language-html">&lt;rules&gt;</code> and <code class="language-html">&lt;rule&gt;</code> can be applied to special ruls. Each <code class="language-html">&lt;rule&gt;</code> contains three parts: <em>a condition</em>, <em>formatting statements</em> and <em>an optional ‘flow’ statement</em>.</p>

<p>Marker the priority of rules</p>

<p>{% codeblock lang:html %}</p>
<rule>
# 1st
importance = 10
</rule>
<p>{% endcodeblock %}</p>

<p>Add a tag</p>

<p>{% codeblock lang:html %}</p>
<rule>
flow = goto special_rule if true
&#8230;
</rule>

<rule>
tag = special_rule
&#8230;
</rule>
<p>{% endcodeblock %}</p>

<h2 id="histograms">6. Histograms</h2>

<p>Histogram, line plot, scatter plot, and heat map share the same data format</p>

<p>{% codeblock lang:perl %}
chr start end value [options]
{% endcodeblock %}
for exmaple</p>

<p>{% codeblock lang:perl %}
hs3 196000000 197999999 71.0000 fill_color=blue
{% endcodeblock %}
{% codeblock lang:perl %}
# in data file
hs3 196000000 197999999 71.0000 id=abc</p>

<h1 id="in-rule-block">in rule block</h1>
<rule>
condition  = var(id) eq &#8220;abc&#8221;
fill_color = blue
</rule>
<p>{% endcodeblock %}
Another data format has multiple values</p>

<p>{% codeblock lang:perl %}
chr start end value,value,value,… [options]
{% endcodeblock %}
for example</p>

<p>{% codeblock lang:perl %}
hs3 196000000 197999999 0.0000,7.0000,64.0000,0.0000
{% endcodeblock %}</p>

<ul>
  <li>Plot histogram</li>
</ul>

<p>{% codeblock lang:html %}</p>
<plots>
<plot>
type = histogram
file = data/5/segdup.hs1234.hist.txt
r1   = 0.88r
r0   = 0.81r

fill_color = vdgrey
extend_bin = no
</plot>
{% endcodeblock %}

For multiple values, `fill_color`{:.language-bash} is used to set the different colors.

* Orientation

{% codeblock lang:html %}
orientation = in
{% endcodeblock %}

* Rules

{% codeblock lang:html %}
<rules>
&lt;<include exclude.hs1.rule="">&gt;

{% endcodeblock %}

* Backgrounds and axes

{% codeblock lang:html %}
<plot>
&#8230;

<axes>
 <axis>
 &#8230;
 </axis>
 <axis>
 &#8230;
 </axis>
 &#8230;
</axes>

<backgrounds>
 <background>
 &#8230;
 </background>
 <background>
 &#8230;
 </background>
 &#8230;
</backgrounds>

</plot>
{% endcodeblock %}

* text

text data format is

{% codeblock lang:perl %}
chr start end value
{% endcodeblock %}

for exmaple

{% codeblock lang:perl %}
hs1 100425066 100487997 DBT
{% endcodeblock %}

{% codeblock lang:html %}
<plots>
<plot>
type             = text
color            = black
file             = data/phylo/labelGene.txt
</plot>
</plots>
{% endcodeblock %}

apply rules

{% codeblock lang:html %}
<rules>
<rule>
importance = 90
condition  = var(value) eq &#8220;GeneName&#8221;
color = blue
</rule>
</rules>
{% endcodeblock %}



## Reference ##

* [Ciros grocery of published pictures](http://circos.ca/images/scientific_literature/)

</include></rules></plots>
]]></content>
  </entry>
  
</feed>
