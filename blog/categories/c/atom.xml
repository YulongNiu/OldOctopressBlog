<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2019-03-25T16:21:09+01:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C语言指针记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c/"/>
    <updated>2016-04-17T16:42:25+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c</id>
    <content type="html"><![CDATA[<h2 id="c">1. C语言指针基础</h2>

<p>C语言的指针设计是一致和优雅的。C语言中“指针（pointer）”就是<strong>地址</strong>（所以不能用普通整数储存地址），“指针变量（pointer variable）”是存储地址的变量。一个指针变量，<strong>只能</strong>指向一个特定类型的变量，比如整数、浮点数、字符或者指针。</p>

<p><figure class='code'><figcaption><span>Initiate a pointer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">tmp1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tmp2</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* “=” does not mean “assignment”, it just means “initiating” &lt;em&gt;/</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; p is the address of tmp1, &lt;em&gt;p is equal to the value of tmp1&lt;/em&gt;/</span>
</span><span class='line'><span class="cm">int *p = &amp;amp;tmp1;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;int *q;</span>
</span><span class='line'><span class="cm">q = &amp;amp;tmp2;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;/* p points to tmp1, q points to tmp2, now the value of tmp2 is 1*/</span>
</span><span class='line'><span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* p and q now both points to tmp1*/</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->

<h2 id="section">2. 指针运算有且只有三种</h2>

<ul>
  <li>
    <p>指针加一个整数，该表达式值为同类型指针；</p>
  </li>
  <li>
    <p>指针减一个整数，该表达式值为同类型指针；</p>
  </li>
  <li>
    <p>指针与指针相减，该表达式值为整数。</p>
  </li>
</ul>

<hr />
<p>指针与<code>++</code>和<code>--</code>结合的表达式</p>

<table>
  <thead>
    <tr>
      <th>表达式</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>*p++</code></td>
      <td>表达式值为p指针指向内容，之后指针自增</td>
    </tr>
    <tr>
      <td><code>(*p)++</code></td>
      <td>表达式值为p指针指向内容，之后指向内容自增</td>
    </tr>
    <tr>
      <td><code>++*p</code></td>
      <td>表达式值为p指针指向内容自增，指针不变</td>
    </tr>
    <tr>
      <td><code>*++p</code></td>
      <td>表达式值为p指针自增后指向内容</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="section-1">3. 指针与数组</h2>

<ul>
  <li>
    <p>C语言只有一维数组，其中元素可以是数（整数或浮点数）、字符和指针（字符串、其他类型数组或者其他类型指针）。</p>
  </li>
  <li>
    <p>数组地址为第一个元素地址。可以使用数组名作为指向数组第一个元素的指针，但数组名<span style="color: red">不能</span>被修改，例如不能被重新赋值。因此，假如<code>a</code>数组，<code>a+i</code>等价与<code>&amp;a[i]</code>，<code>*(a+i)</code>等价与<code>a[i]</code>。</p>
  </li>
  <li>
    <p>对于二维数组<code>a</code>，<code>a</code>表示指向第一行的指针（即指针指向一维数组），<code>a[0]</code>表示指向第一行第一个元素的指针。理解<code>a[0]</code>：<code>a[0]</code>等价与<code>*(a + 0)</code>，表示指针<code>a</code>指向的内容，即第一行数组；同时，一维数组名表示指向第一个元素的指针。</p>
  </li>
  <li>
    <p>“字符串字面量（string literal）”被作为字符数组储存，类型为<code>char *</code>，因此对于字符串变量<code>char s[] = "abc";</code>和<code>char *s = "abc";</code>都合法。但是，<code>int a[] = {1, 2, 3};</code>合法，<s>int *a = {1, 2, 3};</s>非法。</p>
  </li>
</ul>

<hr />

<table>
  <thead>
    <tr>
      <th>数组类型</th>
      <th>初始化声明<sup>1</sup></th>
      <th>函数形参声明的指针形式<sup>2</sup></th>
      <th>第一个元素指针声明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>元素为整数的数组</td>
      <td><code>int a[LEN]</code></td>
      <td><code>int *</code></td>
      <td><code>int *p = &amp;a[0]</code>或<code>int *p = a</code></td>
    </tr>
    <tr>
      <td>元素为整数数组的数组（“二维数组”）</td>
      <td><code>int a[ROWNUM][COLNUM]</code></td>
      <td><code>int (*)[COLNUM]</code></td>
      <td><code>int *p = &amp;a[0]</code>或<code>int (*p)[COLNUM] = a</code>　</td>
    </tr>
    <tr>
      <td>元素为字符的数组（“字符串”）</td>
      <td><code>char a[LEN]</code></td>
      <td><code>char *</code></td>
      <td><code>char *p = &amp;a[0]</code>或<code>char *p = a</code></td>
    </tr>
    <tr>
      <td>元素为字符串指针的数组（“字符串数组”）</td>
      <td><code>char *a[LEN]</code></td>
      <td><code>char **</code>或<code>char *[LEN]</code></td>
      <td><code>char **p = &amp;a[0]</code>或<code>char **p = a</code></td>
    </tr>
    <tr>
      <td>元素为结构、联合或枚举的数组</td>
      <td><code>struct t a[LEN]</code></td>
      <td><code>struct t *</code></td>
      <td><code>struct t *p = &amp;a[0]</code>或<code>struct t *p = a</code></td>
    </tr>
  </tbody>
</table>

<p><sup>1</sup>：初始化声明表示在声明同时初始化的形式，比如<code>int a[3] = {1, 2, 3}</code>、<code>char a[] = 'hello'</code>或者<code>char *a[] = {"hello", "world!"}</code>。</p>

<p><sup>2</sup>：在函数中声明形参时，对应的指针类型。形参可以是完整类型或者元素类型，比如，形参<code>char *a[LEN]</code>是完整类型，形参<code>char **a</code>是元素类型；再比如，形参<code>int a[ROWNUM][COLNUM]</code>是完整类型，形参<code>int (*a)[COLNUM]</code>是元素类型；再比如，形参<code>char a[]</code>是完整类型，形参<code>char *a</code>是元素类型。编译器把数组型的形参视为指针。</p>

<hr />

<h2 id="section-2">4. 指针与函数</h2>

<ul>
  <li>
    <p>C语言传入函数的都是值（数组被当做指针传入），而且形参对应对象的一个副本。</p>

    <ul>
      <li>
        <p>形参为指针，可以改变指向的内容。</p>
      </li>
      <li>
        <p>形参为数组，传入指针（指向第一个元素地址）副本。因此，即便是数组名，也可以修改，即可以把数组名当做一个指针用。也可以使用指针传入部分数组。如下代码合法：</p>
      </li>
    </ul>
  </li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">TestFun</span><span class="p">(</span><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="o">++</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="section-3">5. 注意事项</h2>

<ul>
  <li>
    <p>留意未初始化指针，修改未初始化指针所指向内容是<span style="color: red">危险</span>的。字符指针<span style="color: red">必须</span>初始化，比如指向已有字符变量、字符串字面量或动态分配字符串。</p>
  </li>
  <li>
    <p>已有数组名<span style="color: red">不能被</span>重新赋值，<span style="color: red">不能</span>指向其他地址。</p>
  </li>
  <li>
    <p>函数返回指针时，<span style="color: red">不能</span>返回指向局部自动变量的指针，因为局部变量和对应指针在返回时销毁。可以返回指针形式的形参、指向外部变量的指针、指向声明为<code class="language-c">static</code>的局部变量和指向动态分配内存的指针。如下代码合法：</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>return pointer points to malloc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="nf">Add</span><span class="p">(</span><span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">new</span><span class="p">;</span>
</span><span class='line'>  <span class="n">new</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">node</span><span class="p">));</span>
</span><span class='line'>  <span class="err">…</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">new</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="section-4">补充材料</h3>

<ul>
  <li><a id="pointer_array">Pointers and arrays in C</a></li>
</ul>

<p><figure class='code'><figcaption><span>Using pointers to operate arrays in c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;define-n-5&quot;</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">N</span> <span class="mi">5</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">PrintVal</span><span class="p">(</span><span class="kt">int</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">PrintArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">PrintString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Print2Array</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">)[</span><span class="n">colnum</span><span class="p">]);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Print2Array2</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="o">**</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">PrintStringArray</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">PrintStringArray2</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">testVal</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PrintVal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">testVal</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="err">“\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">testArray</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>  <span class="n">PrintArray</span><span class="p">(</span><span class="n">testArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="err">“\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">char</span> <span class="n">testString</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="err">“</span><span class="n">hell</span><span class="err">”</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PrintString</span><span class="p">(</span><span class="n">testString</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="err">“\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">test2Array</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Print2Array</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">test2Array</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">test2Array2</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">test2Array</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">4</span><span class="p">]};</span>
</span><span class='line'>  <span class="n">Print2Array2</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">test2Array2</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">char</span> <span class="o">*</span><span class="n">testStringArray</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">“</span><span class="n">Hello</span><span class="p">,</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">it</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">is</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">me</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">!</span><span class="err">”</span><span class="p">};</span>
</span><span class='line'>  <span class="n">PrintStringArray</span><span class="p">(</span><span class="n">testStringArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PrintStringArray2</span><span class="p">(</span><span class="n">testStringArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">PrintVal</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="mi">3</span><span class="n">d</span><span class="err">”</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">PrintArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="mi">3</span><span class="n">d</span><span class="err">”</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">PrintString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">c</span><span class="err">”</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">Print2Array</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">)[</span><span class="n">colnum</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p</span><span class="p">)[</span><span class="n">colnum</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">colnum</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">q</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">rownum</span><span class="p">;</span> <span class="o">++</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="mi">3</span><span class="n">d</span><span class="err">”</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">Print2Array2</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="o">**</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">colnum</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">q</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">rownum</span><span class="p">;</span> <span class="o">++</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="mi">3</span><span class="n">d</span><span class="err">”</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">PrintStringArray</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">s</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">PrintStringArray2</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">s</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>输出结果为：</p>

<p>
<code>
  2
  2  3  5  0  0
hell
  1  2  3  4  5
  0  0  0  0  0
  0  0  0  0  0
  0  0  0  0  0
  0  0  0  0  0
  1  2  3  4  5
  0  0  0  0  0
  0  0  0  0  0
  0  0  0  0  0
  0  0  0  0  0
Hello,
it
is
me
!
Hello,
it
is
me
!
</code>
</p>

<h3 id="section-5">参考资料</h3>

<ul>
  <li>KN King: <a href="http://www.amazon.com/Programming-Modern-Approach-2nd-Edition/dp/0393979504">C Programming: A Modern Approach, 2nd Edition</a>, 2008.</li>
</ul>

<h3 id="section-6">更新记录</h3>

<p>201６年４月17日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言学习记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note/"/>
    <updated>2014-12-08T00:23:16+01:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note</id>
    <content type="html"><![CDATA[<h2 id="section">1. 基本数据类型</h2>

<h3 id="section-1">1.1 算术类型</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>解释</th>
      <th>说明</th>
      <th>注意事项</th>
      <th>本地字节数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>short</code></td>
      <td>有符号短整数</td>
      <td>完整形式<code>signed short int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>2</td>
    </tr>
    <tr>
      <td><code>unsigned short</code></td>
      <td>无符号短整数</td>
      <td>完整形式<code>unsigned short int</code>，<code>int</code>可以省略</td>
      <td>全部位占满</td>
      <td>2</td>
    </tr>
    <tr>
      <td><code>int</code></td>
      <td>有符号整数</td>
      <td>完整形式<code>signed int</code>，<code>singed</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>unsigned int</code></td>
      <td>无符号整数</td>
      <td> </td>
      <td>全部位占满</td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>long</code></td>
      <td>有符号长整数</td>
      <td>完整形式为<code>signed long int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>unsigned long</code></td>
      <td>无符号长整数</td>
      <td>完整形式为<code>unsigned short int</code>，<code>int</code>可以省略</td>
      <td>全部位占满</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>long long</code></td>
      <td>无符号长长整数</td>
      <td>完整形式为<code>signed long long int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td><span style="color: green"><strong>C99</strong></span>特有</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>unsigned long long </code></td>
      <td>有符号长长整数</td>
      <td>完整形式为<code>unsigned long long int</code>，<code>int</code>可以省略</td>
      <td><span style="color: green"><strong>C99</strong></span>特有</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>char</code></td>
      <td>字符</td>
      <td>实质是“小整数”（可能比短整数占用字节更少）</td>
      <td>分为<code>char</code>、<code>singed char</code>和<code>unsigned char</code>。使用<strong>单引号</strong>标记常量，比如<code>'A'</code>（<strong>值</strong>为65）</td>
      <td>1</td>
    </tr>
    <tr>
      <td><code>_Bool</code></td>
      <td>布尔型整数</td>
      <td>实质是无符号整数</td>
      <td>只能赋值0或1，赋值<code>_Bool</code>类型变量为非零值会导致赋值为1</td>
      <td>1</td>
    </tr>
    <tr>
      <td><code>float</code></td>
      <td>单精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>double</code></td>
      <td>双精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>long double</code></td>
      <td>扩展精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>16</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>强制编辑器处理常量为长整数（十进制、八进制和十六进制），<code>1135L</code>；强制处理为无符号，<code>1135U</code>；混合使用，<code>1135UL</code>，<code>U</code>和<code>L</code>顺序和大小写不重要。
<span style="color: green"><strong>C99</strong></span>中增加了<code>ll</code>或者<code>LL</code>后缀，强制<code>long long int</code>型整数，可以与<code>u</code>或<code>U</code>连用。<strong>避免无符号和有符号整数混用，特别是无符号和有符号整数比较，会产生意想不到的后果</strong>。</p>
  </li>
  <li>
    <p>强制编辑器处理常量为单精度浮点数，<code>11.3f</code>，<code>11.3</code>会被认为是<code>double</code>型；强制为双精度，<code>11.3L</code>或者<code>11.3l</code>（这里看出使用<code>L</code>更好，因为<code>l</code>会被误认为数字<code>1</code>）。</p>
  </li>
  <li>
    <p>强制类型转化表达式的一般形式为：<code>(int) floatNumber</code>。C语言把<code>(type)</code>视为一元运算符，所以其等级高于二元运算符。</p>
  </li>
  <li>
    <p>类型定义一般形式为：<code>typedef int Newint;</code>，注意结尾的<code>；</code>。区别与使用宏定义类型，函数体内定义的<code>typdef</code>变量在函数体外无法使用，而宏可以作用于任何对应位置。</p>
  </li>
  <li>
    <p><code>sizeof</code>运算符一般形式为：<code>sizeof(type)</code>，比如<code>sizeof(long int)</code>计算<code>int</code>类型占用多少个字节。<code>sizeof</code>表达式的类型是<code>size_t</code>（无符号整数），所以安全的方法是强制转换为<code>unsigned long</code>型，比如<code class="language-c">(unsigned long) sizeof(int)</code>。括号不是强制需要，加上括号防止因为优先级不同而引起歧义。可以应用与常量、变量或者表达式。</p>
  </li>
</ul>

<!--more-->

<h3 id="section-2">1.2 数组</h3>

<p>数组索引从0开始；数组按行存储。</p>

<h4 id="section-3">1.2.1 一维数组</h4>

<p>数组长度：</p>

<ul>
  <li>
    <p>数组长度可以是任何整数常量或整数常量表达式，比如<code class="language-c">testLen + 1</code>，<code>testLen</code>之前声明为整数常量（&gt;-1）。</p>
  </li>
  <li>
    <p>数组长度之后可能会变，所以可以使用宏定义一维数组的长度，比如<code class="language-c">#define LEN 5</code>。</p>
  </li>
  <li>
    <p>确定数组长度，可以联合使用宏和<code>sizeof</code>，比如<code class="language-c">#define SIZE ((int) (sizeof(a) / sizeof(a[0])))</code>。</p>
  </li>
</ul>

<p>初始化：</p>

<ul>
  <li>
    <p>声明每一个元素的数值，比如<code class="language-c">int testArray[5] = {1, 2, 3, 4, 5};</code>。这种情况可以忽略数组长度，比如<code class="language-c">int testArray[] = {1, 2, 3, 4, 5};</code>。</p>
  </li>
  <li>
    <p>声明部分元素，比如<code class="language-c">int testArray[5] = {1, 2, 3};</code>，4号与5号元素默认为0。<span style="color: green"><strong>C99</strong></span>提供元素下标初始化，比如：<code class="language-c">int testArray[5] = {[0] = 1, [1] = 2, [2] = 3};</code>；或者混用，比如<code class="language-c">int testArray[5] = {1, 2, [2] = 3};</code>；甚至自动判断长度，比如<code class="language-c">int testArray[] = {[0] = 1, 2, [2] = 3, a[4] = 0};</code>，编译器根据最大元素序号，制定数组长度为5。使用元素下标初始化，<strong>尽量按照下标序号从大到小初始化</strong>，否则可能引起后面元素覆盖前面元素。</p>
  </li>
  <li>
    <p>声明全部元素为0，比如<code class="language-c">int testArray[5] = {0};</code>。</p>
  </li>
</ul>

<h4 id="section-4">1.2.2 多维数组</h4>

<p>初始化：</p>

<ul>
  <li>
    <p>声明每一个元素或者部分元素，其余未声明元素为0。<span style="color: green"><strong>C99</strong></span>同样提供了下标初始化。比如：<code class="language-c">int testArray[2][2] = {[0][0] = 0, [1][1] = 1};</code>。</p>
  </li>
  <li>
    <p>声明全部元素为0，比如<code>int testArray[5][10] = {0};</code>。</p>
  </li>
</ul>

<h4 id="span-stylecolor-greenc99span">1.2.3 <span style="color: green"><strong>C99</strong></span>变长数组</h4>

<p><span style="color: green"><strong>C99</strong></span>允许声明变长数组。但是，变长数组的声明和初始化不能在一条语句中。正确的做法是：先声明变长数组，之后初始化。比如：</p>

<p><figure class='code'><figcaption><span>Initialization of variable-length array (VLA) C99 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Enter</span> <span class="n">size</span> <span class="n">of</span> <span class="nl">array</span><span class="p">:</span> <span class="err">“</span><span class="p">);</span>
</span><span class='line'><span class="n">scanf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">d</span><span class="err">”</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">square</span><span class="p">[</span><span class="n">size</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* initial square */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">square</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4 id="section-5">1.2.4 字符串</h4>

<p>字符串长度：</p>

<ul>
  <li>字符串的实现是使用数组储存字符，最后一个是空字符<code>\0</code>（对应ASCII码为0）。使用<code>&lt;string.h&gt;</code>头文件时，<code>str()</code>函数返回输入字符串中，第一个空字符之前的字符数。</li>
</ul>

<p>初始化：</p>

<ul>
  <li>
    <p>第一种储存为字符数组。<code>char a[6] = "hello";</code>合法，最后一个是空字符；<code>char a[6] = "hell";</code>合法，最后两个是空字符；省略长度，比如<code>char a[] = "hello";</code>合法，最后一个是空字符，自动分配6个字符空间；<code>char a[5] = "hello";</code>对于字符串非法，对于字符数组合法。</p>
  </li>
  <li>
    <p>第二种储存为字符指针。<code>char *b = "hello";</code>合法，声明字符指针；声明字符指针，将其指向已有字符变量、字符串字面量或动态分配字符串，合法；已有字符指针重新指向其他字符串，合法；声明字符指针，却不初始化，非法；声明字符指针，却不初始化，而且修改或赋值指向的字符，非法。</p>
  </li>
  <li>
    <p>字符数组可以修改元素，比如<code>a[0] = 'l';</code>；字符指针指向的字符串不能修改，应该杜绝<s>*b = &#8216;l&#8217;;</s>之类的字符指针赋值，除非保证<code>b</code>是一个字符数组；对于操作字符串的函数，如果形参为字符指针，允许修改其指向的内容，比如<code>*b = 'l';</code>，因为默认（也只允许）传入参数是一个字符数组，而不是一个字符串字面量。</p>
  </li>
</ul>

<h4 id="section-6">1.2.4 字符串数组</h4>

<p>初始化：</p>

<ul>
  <li>使用指针数组储存，比如<code>char *a[5] = {"hello", "it", "is", "me", "!"};</code>；省略长度，<code>char *a[] = {"hello", "it", "is", "me", "!"};</code>合法；<code>char *a[5] = {"hello", "it", "is", "me"};</code>合法，最后一个是空指针（<code>NULL</code>）。</li>
</ul>

<h3 id="section-7">1.3 结构</h3>

<p>结构空间分配：</p>

<ul>
  <li>
    <p>成员按照声明的顺序在内存依次排列。</p>
  </li>
  <li>
    <p>第一个成员之前无间隙，因此方便指针指向结构。但成员之间或者最后一个成员之后，可能有间隙。</p>
  </li>
</ul>

<p>初始化：</p>

<ul>
  <li>
    <p>结构中可以嵌套结构、联合、枚举、字符串等多种类型。</p>
  </li>
  <li>
    <p>不需要初始化全部成员，剩下未初始化的成员使用0作为初始值，比如<code>""</code>作为空字符串。</p>
  </li>
  <li>
    <p><span style="color: green"><strong>C99</strong></span>使用符合字面量，比如<code>(struct test1) {.b = "test that", .c = 1};</code>。</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>initialize struct </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">test1</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="n">p3</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* p1.c is 0 */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">test1</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="err">“</span><span class="n">hello</span><span class="err">”</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* c99 &lt;em&gt;/</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; p1.a is 0 and p1.c is 3 */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">test1</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">{.</span><span class="n">b</span> <span class="o">=</span> <span class="err">“</span><span class="n">world</span><span class="err">”</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* c99 */</span>
</span><span class='line'><span class="p">(</span><span class="k">struct</span> <span class="n">test1</span><span class="p">){.</span><span class="n">c</span> <span class="o">=</span> <span class="mi">10</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>结构、联合和枚举都可以使用<code class="language-c">typedef</code>定义，总结如下：</li>
</ul>

<p><figure class='code'><figcaption><span>initialize struct with typedef </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">ele1</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">ele2</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span> <span class="n">Test1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">union</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ele1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">ele2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">Test2</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span><span class="n">CIRCLE</span><span class="p">,</span> <span class="n">RECTANGLE</span><span class="p">}</span> <span class="n">Test3</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Test1</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">{.</span><span class="n">ele1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>  <span class="n">Test2</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">{.</span><span class="n">ele2</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">};</span>
</span><span class='line'>  <span class="n">Test3</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">CIRCLE</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="section-8">1.4 联合</h3>

<p>联合空间分配：</p>

<ul>
  <li>只为最大的成员分配空间。</li>
</ul>

<p>初始化：</p>

<ul>
  <li>初始化与结构类似。</li>
</ul>

<p><figure class='code'><figcaption><span>initialize union </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">union</span> <span class="n">test1</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">union</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="n">p3</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">union</span> <span class="n">test1</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* c99 */</span>
</span><span class='line'><span class="k">union</span> <span class="n">test1</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">{.</span><span class="n">b</span> <span class="o">=</span> <span class="err">“</span><span class="n">world</span><span class="err">”</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* c99 */</span>
</span><span class='line'><span class="p">(</span><span class="k">union</span> <span class="n">test1</span><span class="p">){.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>如果联合包括两个及两个以上结构成员，而且这些结构中最初一个或多个成员类型匹配，那么这些匹配成员会同步。</li>
</ul>

<p><figure class='code'><figcaption><span>initialize union </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">union</span> <span class="n">test</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">test1</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">b1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">b2</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">test2</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">c2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">t1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">t1</span><span class="p">.</span><span class="n">b</span><span class="p">.</span><span class="n">b1</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* t.c.c1 is 10 */</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">d</span> <span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">t1</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">c1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="section-9">1.5 枚举</h3>

<p>初始化：</p>

<ul>
  <li>枚举元素如不指定，从0开始，依次增加1；可以指定具体数值，指定数值可以相同，允许尾逗号，例如<code class="language-c">enum {THIS = 2, THAT = 10, THESE = 2,} test1;</code>。</li>
</ul>

<p><figure class='code'><figcaption><span>initialize enum </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">enum</span> <span class="p">{</span><span class="n">FIRST</span><span class="p">,</span> <span class="n">SECOND</span><span class="p">}</span> <span class="n">p1</span><span class="p">;</span>
</span><span class='line'><span class="k">enum</span> <span class="n">test1</span> <span class="p">{</span><span class="n">FIRST</span><span class="p">,</span> <span class="n">SECOND</span><span class="p">};</span>
</span><span class='line'><span class="k">enum</span> <span class="n">test1</span> <span class="o">=</span> <span class="n">SECOND</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="section-10">1.6 指针</h3>

<p>参考<a href="http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c/">C语言指针记录</a>。</p>

<h3 id="section-11">1.7 函数</h3>

<h4 id="section-12">1.7.1 函数定义</h4>

<ul>
  <li>
    <p>函数不能返回数组，也不能返回两个数。</p>
  </li>
  <li>
    <p>函数返回类型可以是<code>void</code>，形参可以是<code>void</code>。<code>void</code>类型函数没有返回值，可以写一条表达式为空的<code>return</code>语句，比如<code class="language-c">return;</code>。</p>
  </li>
  <li>
    <p>每个形参必须单独声明类型，使用<code>,</code>连接；</p>
  </li>
  <li>
    <p>使用<code>void</code>丢弃函数返回值，比如<code>printf()</code>函数返回显示的字符数目，强制丢弃返回数值写为：<code class="language-c">(void) printf("Drop the return value.");</code>。</p>
  </li>
  <li>
    <p><code>main</code>函数返回值：<code>return</code>语句；<code>exit()</code>函数（位于<code>&lt;stdlib.h&gt;</code>库）。任何函数调用<code>exit()</code>函数，都会导致程序终止；只有<code>main</code>函数调用<code>return</code>语句，程序才终止。<span style="color: green"><strong>C99</strong></span>规定：非<code>void</code>类型函数必须指定返回类型，不能缺省。</p>
  </li>
  <li>
    <p>函数声明的形式为<code class="language-c">int thisFun(double para1, int para2);</code>。<span style="color: green"><strong>C99</strong></span>规定：函数在调用前，必须事先声明或者定义。调用前声明有很多好处，比如避免实际参数的默认转换等。</p>
  </li>
</ul>

<h4 id="section-13">1.7.2 数组型参数</h4>

<ul>
  <li>定义形参为一维数组的函数，普遍形式为：</li>
</ul>

<p><figure class='code'><figcaption><span>Definition of function using array as the parameter </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* 一维数组长度不是必须 */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* 函数声明 &lt;em&gt;/ </span>
</span><span class='line'><span class="cm">int oneArrayFun(int a[], int len);</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; 省略形参声明 */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="p">[],</span> <span class="kt">int</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* 实际调用 */</span>
</span><span class='line'><span class="n">oneArrayFun</span><span class="p">(</span><span class="n">testArry</span><span class="p">,</span> <span class="n">testLen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>对于一维数组类型的参数，“长度”的实际参数可以比形式参数小，但不能大。</p>
  </li>
  <li>
    <p>函数可以改变一维数组形参的值，并在实参中体现。</p>
  </li>
  <li>
    <p><strong>C89</strong>定义形参为多维数组的函数，只能省略第一维长度，其余维度必须声明（即常量），普遍形式为：</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>Definition of function using array as the parameter </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* 比如二维数组，行不是必须，但必须制定列 */</span>
</span><span class='line'><span class="cp">#define COL 10&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[][</span><span class="n">COL</span><span class="p">],</span> <span class="kt">int</span> <span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* 函数声明 &lt;em&gt;/ </span>
</span><span class='line'><span class="cm">int twoArrayFun(int a[][COL], int row);</span>
</span><span class='line'><span class="cm">/&lt;/em&gt; 省略形参声明 */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="p">[][</span><span class="n">COL</span><span class="p">],</span> <span class="kt">int</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* 实际调用 */</span>
</span><span class='line'><span class="n">twoArrayFun</span><span class="p">(</span><span class="n">testArry</span><span class="p">,</span> <span class="n">testRow</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li><span style="color: green"><strong>C99</strong></span>可以声明任意变长数组作为函数参数，普遍形式为：</li>
</ul>

<p><figure class='code'><figcaption><span>Definition of function using VLA as the parameter in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* 一维VLA */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">len</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* 一维VLA声明的各种形式 &lt;em&gt;/ </span>
</span><span class='line'><span class="cm">int oneArrayFun(int len, int a[len]);</span>
</span><span class='line'><span class="cm">int oneArrayFun(int len, int a[&lt;/em&gt;]);</span>
</span><span class='line'><span class="cm">int oneArrayFun(int, int [*]);</span>
</span><span class='line'><span class="cm">int oneArrayFun(int len, int a[]);</span>
</span><span class='line'><span class="cm">int oneArrayFun(int, int []);&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;/* 实际调用 */</span>
</span><span class='line'><span class="n">oneArrayFun</span><span class="p">(</span><span class="n">testArry</span><span class="p">,</span> <span class="n">testLen</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="cm">/* 二维VLA */</span>
</span><span class='line'><span class="kt">int</span> <span class="n">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/*</span> <span class="err">二维</span><span class="n">VLA</span><span class="err">声明的各种形式</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kt">int</span> <span class="n">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">][</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">]);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[][</span><span class="n">col</span><span class="p">]);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">twoArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[][</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li><span style="color: green"><strong>C99</strong></span>允许在数组参数中使用关键字<code>static</code>，但只能用于第一维。好处是编译器更快访问数组，比如：</li>
</ul>

<p><figure class='code'><figcaption><span>Use static in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* 一维数组长度至少为5 */</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">oneArrayFun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="k">static</span> <span class="mi">5</span><span class="p">],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li><span style="color: green"><strong>C99</strong></span>允许使用<strong>复合字面量</strong>。复合字面量是“左值”，可以包括常量或者常量表达式，形式与数组初始化类似；也可以使用<code>const</code>修饰。</li>
</ul>

<p><figure class='code'><figcaption><span>Use static in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">oneArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Sum</span> <span class="n">is</span> <span class="o">%</span><span class="n">d</span><span class="p">.</span> <span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">oneArray</span><span class="p">((</span><span class="kt">int</span> <span class="p">[]){</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span> <span class="mi">5</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Sum</span> <span class="n">is</span> <span class="o">%</span><span class="n">d</span><span class="p">.</span> <span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">oneArray</span><span class="p">((</span><span class="kt">int</span> <span class="p">[</span><span class="mi">5</span><span class="p">]){</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">},</span> <span class="mi">5</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Sum</span> <span class="n">is</span> <span class="o">%</span><span class="n">d</span><span class="p">.</span> <span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">oneArray</span><span class="p">((</span><span class="kt">int</span> <span class="p">[</span><span class="mi">5</span><span class="p">]){</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">},</span> <span class="mi">4</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">Sum</span> <span class="n">is</span> <span class="o">%</span><span class="n">d</span><span class="p">.</span> <span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>         <span class="n">constOneArray</span><span class="p">((</span><span class="k">const</span> <span class="kt">int</span> <span class="p">[</span><span class="mi">5</span><span class="p">]){</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="mi">3</span><span class="p">));</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">oneArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">constOneArray</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="section-14">2. 操作符类型和优先级</h2>

<p><img src="http://yulongniu.bionutshell.org/images/coperator.png" title="image" alt="C operators" /></p>

<p>图片取自<a href="#Ref">参考资料2</a>。</p>

<ul>
  <li>
    <p>操作符有两个性质：<strong>结合方向</strong>和<strong>优先级</strong>。<strong>结合方向</strong>决定操作符的执行对象，比如多个同等操作符；而<strong>优先级</strong>决定操作符的结合方式，通俗来讲即谁和谁结合在一起。但是，C没有规定表达式运算的先后顺序。比如对于二元操作符<code>+</code>，<code class="language-c">a = i + i++;</code>，由编译器决定是<code>i</code>还是<code>i++</code>先执行。</p>
  </li>
  <li>
    <p>操作符<code>/</code>和<code>%</code>用于负整数操作，结果由编译器决定。<span style="color: green"><strong>C99</strong></span>中<code>/</code>和<code>%</code>操作负数，返回最靠近0的结果。</p>
  </li>
  <li>
    <p>运算符<code>&amp;&amp;</code>和<code>||</code>（从左向右结合），两侧的两个表达式有运算顺序，先左后右。<strong>有可能右侧表达式没有计算，因此不要在右侧放入有副作用的表达式</strong>。</p>
  </li>
</ul>

<h2 id="section-15">3. 表达式</h2>

<ul>
  <li>
    <p>条件表达式<code class="language-c">i &gt; 0 ? i : f</code>，如果<code>i</code>和<code>f</code>是整数型和浮点型，即使条件判定为真，表达式的值为浮点型。</p>
  </li>
  <li>
    <p><code>switch</code>语句最后一个分支，添加<code class="language-c">break;</code>语句。原因是防止之后修改程序，需要再添加判断条件时，遗漏<code class="language-c">break;</code>语句。C语言的<code>switch</code>语句不能判断范围，但适合替代多个<code>OR</code>连接的判断语句。</p>
  </li>
  <li>
    <p>逗号表达式中，<code class="language-c">表达式1, 表达式2</code>，<code>表达式1</code>先计算之后丢弃其值，之后计算<code>表达式2</code>。因此，<strong><code>表达式1</code>必须有副作用</strong>。</p>
  </li>
</ul>

<h2 id="section-16">4. 语法注意事项</h2>

<ul>
  <li>
    <p><code>#define LOWER 0</code>定义常量的语句之后，没有分号<code>;</code>。</p>
  </li>
  <li>
    <p><code class="language-c">break;</code>只能跳出一层循环。</p>
  </li>
  <li>
    <p><code class="language-c">continue;</code>。有意思的应用场景，结合<code>if</code>语句和<code>continue;</code>语句，在循环中<strong>条件性</strong>忽略一些语句。</p>
  </li>
  <li>
    <p><code>EOF</code>是文档结束的标志（End of File），在<code class="language-c">&lt;stdio.h&gt;</code>定义为一个整数<code>-1</code>，代码如下：</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>Definition of EOF in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef EOF</span>
</span><span class='line'><span class="cp"># define EOF (-1)</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>用单引号<code>''</code>标记的字符，对应的是ASCII的数字值。</p>
  </li>
  <li>
    <p><code>for</code>循环声明需要有主体；如无，在<code>for</code>语句后添加<code>;</code>作“无效声明（null statement）”。<strong>为了避免误解，<code>;</code>单独占一行</strong>，或者使用<code>{}</code>代替单独一行的<code>;</code>。</p>
  </li>
  <li>
    <p>顺序点（sequence point）</p>

    <ul>
      <li>
        <p><code class="language-c">&amp;&amp;</code>、<code class="language-c">||</code>和comma operators，左边和右边表达式之间。</p>
      </li>
      <li>
        <p>三元条件操作符<code class="language-c">?:</code>，在条件判断表达式与第二（第三）表达式之间。</p>
      </li>
      <li>
        <p>完整表达式结束，包括赋值、<code class="language-c">return</code>语句、<code class="language-c">if</code>/<code class="language-c">switch</code>/<code class="language-c">while</code>/<code class="language-c">do-while</code>条件表达式判断结束和<code class="language-c">for</code>三个表示式。</p>
      </li>
      <li>
        <p>函数的所有参数赋值和函数第一条语句执行之前（见后举例）。</p>
      </li>
      <li>
        <p>变量初始化语句结束，比如<code class="language-c">int a = 1;</code>。如果多个变量初始化（<code>,</code>分割），则在每一个<code>,</code>结束处，比如 <code class="language-c">int a = 1, b = 2;</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-c">i++</code>与<code class="language-c">++i</code></p>

    <ul>
      <li>
        <p>大多数情况用于整数操作。</p>
      </li>
      <li>
        <p><code class="language-c">++i</code>马上自增，<code class="language-c">i++</code>自增则在两个相邻顺序点之间进行。表达式<code class="language-c">++i</code>值为<code>i+1</code>，表达式<code class="language-c">i++</code>值为<code>i</code>。</p>
      </li>
      <li>
        <p>表达式<code class="language-c">i++ == 0;</code>中，<code>i</code>使用原始数值，在表达式结束后自增；相反，表达式<code class="language-c">++i == 0;</code>中，<code>i</code>马上自增后与0比较。</p>
      </li>
      <li>
        <p>对于表达式<code class="language-c">f(i++)</code>，传入的参数值为<code>i</code>，但是在函数内部开始执行前，<code class="language-c">i</code>完成自增。这是因为在<strong>函数的所有参数赋值和函数第一条语句执行之前</strong>有一个<strong>顺序点</strong>。</p>
      </li>
      <li>
        <p>在<code class="language-c">for</code>语句中，使用<code class="language-c">for(i = 0; i &lt; 10; i++)</code>与<code class="language-c">for(i = 0; i &lt; 10; ++i)</code>效果一样。</p>
      </li>
      <li>
        <p>对于现代编译器，<code class="language-c">i++</code>和<code class="language-c">++i</code>的执行效率没有区别。所以写代码时，按照自认为最清楚的方式写。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>未定义行为（undefined behavior）</p>

    <ul>
      <li>
        <p>一个表达式中既访问又修改同一个变量。</p>
      </li>
      <li>
        <p>数组访问超过上下限。造成原因：很有可能是忘记<strong>数组从0开始索引</strong>。</p>
      </li>
      <li>
        <p><strong>C89</strong>中，非<code>void</code>类型函数，执行到末尾，没有执行<code>return</code>语句。程序调用此类函数，会出现未定义行为。<span style="color: green"><strong>C99</strong></span>中，不合法。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>副作用（side effect）</p>

    <ul>
      <li>
        <p>所有赋值运算、<code class="language-c">i++</code>和<code class="language-c">++i</code>都有副作用，即改变原始变量的值。</p>
      </li>
      <li>
        <p>赋值运算的值是赋值操作后右侧的值，并且将其强制转换为左侧值类型；赋值运算左侧必须为“左值（lvalue）”。</p>
      </li>
      <li>
        <p>在同一个表达式，即访问某个变量，同时又修改这个变量，会造成<strong>“未定义行为”</strong>。有副作用的操作，会带来隐晦未定义行为。未定义行为会随着不同的编译器，而产生不同的结果。其危险性不仅在于阻碍跨平台使用，而且也会有程序运行失败或者得到意想不到结果。<strong>建议：不在一个表达式中即访问又修改同一个变量</strong>。一些典型的未定义行为的例子：</p>
      </li>
    </ul>
  </li>
</ul>

<p><figure class='code'><figcaption><span>Undefined behavior in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># can not decide whether “++”, “=”, or “+” is the first</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;is-not-comma-operator&quot;</span><span class="o">&gt;</span><span class="err">”</span><span class="p">,</span><span class="err">”</span> <span class="n">is</span> <span class="n">not</span> <span class="n">comma</span> <span class="n">operator</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="section-17">5. 标准库</h2>

<h3 id="include-stdiohlanguage-c">5.1 <code class="language-c">#include &lt;stdio.h&gt;</code></h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="mf">3.0f</span> <span class="o">%</span><span class="mf">6.1f</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">fahr</span><span class="p">,</span> <span class="n">celsius</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>%m.pX</code>：格式串模板，<code>m</code>表示要显示的最小字段宽度，<code>p</code>表示精度，<code>X</code>表示类型。</p>

<p>对于 <code class="language-c">printf()</code>函数：</p>

<ul>
  <li>
    <p><code>%d</code>：十进制整数。</p>

    <ul>
      <li>
        <p><code>%1d</code>一个十进制整数，配合<code>scanf()</code>实现单个整数输入操作。</p>
      </li>
      <li>
        <p><code>%6d</code>：十进制整数，至少6位宽，右对齐；如果数字位数超过6位，则全部显示。</p>
      </li>
      <li>
        <p><code>%-6d</code>：同上，区别左对齐。</p>
      </li>
      <li>
        <p><code>%-6.3d</code>：同上，如果数字位数少于3位，左侧加0。比如，<code class="language-c">printf(".2d%", 5)</code>的输出为<code>05</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%u</code>：无符号十进制数。</p>

    <ul>
      <li>
        <p><code>%o</code>：无符号八进制数。</p>
      </li>
      <li>
        <p><code>%x</code>：无符号十六进制数。</p>
      </li>
      <li>
        <p>没有标准方法打印负八进制和负十六进制数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%h</code>：短整数前缀。</p>

    <ul>
      <li>
        <p><code>%l</code>：长整数前缀。</p>
      </li>
      <li>
        <p><code>%ll</code>：长长整数前缀，<span style="color: green"><strong>C99</strong></span>特有。</p>
      </li>
      <li>
        <p><code>%h</code>、<code>%l</code>、<code>%ll</code>与<code>d</code>、<code>u</code>、<code>o</code>和<code>x</code>连用，比如<code>ho</code>表示无符号短八进制数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%f</code>：浮点数，默认小数位为6位。</p>

    <ul>
      <li>
        <p><code>%6f</code>：浮点数，至少6位宽。</p>
      </li>
      <li>
        <p><code>%6.0f</code>：浮点树，至少6位宽，无小数点而且无小数位。</p>
      </li>
      <li>
        <p><code>%.2f</code>：浮点数，小数点后两位。</p>
      </li>
      <li>
        <p><code>%6.2f</code>：浮点数，至少6位宽，小数点后两位。</p>
      </li>
      <li>
        <p><code>%e</code>：科学计数。</p>
      </li>
      <li>
        <p><code>%g</code>：科学计数或者浮点数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%l</code>：<code>double</code>型前缀。</p>

    <ul>
      <li>
        <p><code>%l</code>只在<code class="language-c">scanf()</code>中使用，在<code class="language-c">printf()</code>使用<code>%f</code>和<code>%e</code>（或者<code>%g</code>）表示<code>float</code>型和<code>double</code>型。</p>
      </li>
      <li>
        <p><span style="color: green"><strong>C99</strong></span>中允许在<code class="language-c">printf()</code>使用<code>%lf</code>、<code>%le</code>和<code>%lg</code>，但是<code>l</code>不起作用。</p>
      </li>
      <li>
        <p><code>%L</code>：<code>long double</code>型前缀。</p>
      </li>
      <li>
        <p><code>%l</code>和<code>%L</code>与<code>e</code>、<code>f</code>、<code>g</code>连用。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%c</code>：字符。</p>
  </li>
  <li>
    <p><code>%s</code>：字符串。</p>
  </li>
  <li>
    <p><code>%%</code>：<code>%</code>自身。</p>
  </li>
</ul>

<p>对于<code class="language-c">scanf()</code>函数：</p>

<ul>
  <li>
    <p>格式串中出现空白字符（<strong>空格、水平或者垂直制表符、换页符、换行符</strong>），数量无关紧要，因为可以匹配任意数量（包括0个）空白字符。</p>
  </li>
  <li>
    <p><strong>不要输把空白字符（比如<code>"%d "</code>）放入格式串的结尾</strong>。原因：<code class="language-c">scanf()</code>会挂起，直到出现不能匹配的空白字符。</p>
  </li>
</ul>

<h2 id="span-stylecolor-greenc99span-1">6. <span style="color: green"><strong>C99</strong></span>注意事项</h2>

<ul>
  <li>
    <p>在<code>for</code>语句中声明的计数变量，只能在for循环中使用。比如 <code class="language-c">for(int i = 0; i &lt; 10; i++){...}</code>，变量<code>i</code>只能在循环内起作用。</p>
  </li>
  <li>
    <p>新增加表示布尔数值的头文件<code>&lt;stdbool.h&gt;</code>，使用方法：</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>bool in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdbool.h&gt;&lt;/stdbool.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">trueVal</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span> <span class="n">falseVal</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">bool</span> <span class="n">a1</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">bool</span> <span class="n">a2</span><span class="p">[</span><span class="mi">10</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="nb">false</span><span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>允许使用<code>typedef</code>定义占用特定位数（是“比特数”，不是“字节数”）的整数，比如：</li>
</ul>

<p><figure class='code'><figcaption><span>typedef 32 bit integer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdint.h&gt;&lt;/stdint.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="kt">int32_t</span> <span class="n">Int32</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>BW Kernighan and DM Ritchie: <a href="http://www.amazon.com/The-Programming-Language-2nd-Edition/dp/0131103628">The C Programming Language (2nd Edition)</a>, 1988.</p>
  </li>
  <li>
    <p>KN King: <a href="http://www.amazon.com/Programming-Modern-Approach-2nd-Edition/dp/0393979504">C Programming: A Modern Approach, 2nd Edition</a>, 2008.</p>
  </li>
  <li>
    <p><a href="http://port70.net/~nsz/c/">C各种标准</a></p>
  </li>
  <li>
    <p><a href="http://en.cppreference.com/w/">C在线文档（推荐）</a></p>
  </li>
  <li>
    <p><a href="http://ganquan.info/standard-c/">C头快速查询</a></p>
  </li>
</ul>

<h3 id="section-18">更新记录</h3>

<p>2015年4月30日</p>
]]></content>
  </entry>
  
</feed>
