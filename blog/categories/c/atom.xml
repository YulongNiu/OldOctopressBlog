<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2015-11-09T19:41:21+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C语言学习记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note/"/>
    <updated>2014-12-08T07:23:16+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note</id>
    <content type="html"><![CDATA[<h2 id="section">1. 基本数据类型</h2>

<h3 id="section-1">1.1 算术类型</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>解释</th>
      <th>说明</th>
      <th>注意事项</th>
      <th>本地字节数</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>short</code></td>
      <td>有符号短整数</td>
      <td>完整形式<code>signed short int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>2</td>
    </tr>
    <tr>
      <td><code>unsinged short</code></td>
      <td>无符号短整数</td>
      <td>完整形式<code>unsigned short int</code>，<code>int</code>可以省略</td>
      <td>全部位占满</td>
      <td>2</td>
    </tr>
    <tr>
      <td><code>int</code></td>
      <td>有符号整数</td>
      <td>完整形式<code>signed int</code>，<code>singed</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>unsigned int</code></td>
      <td>无符号整数</td>
      <td> </td>
      <td>全部位占满</td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>long</code></td>
      <td>有符号长整数</td>
      <td>完整形式为<code>signed long int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td>最左边一位表示符号，<code>0</code>为正数，<code>1</code>为负数</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>unsigned long</code></td>
      <td>无符号长整数</td>
      <td>完整形式为<code>unsigned short int</code>，<code>int</code>可以省略</td>
      <td>全部位占满</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>long long</code></td>
      <td>无符号长长整数</td>
      <td>完整形式为<code>signed long long int</code>，<code>singed</code>和<code>int</code>可以省略</td>
      <td><span style="color: green"><strong>C99</strong></span>特有</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>unsigned long long </code></td>
      <td>有符号长长整数</td>
      <td>完整形式为<code>unsigned long long int</code>，<code>int</code>可以省略</td>
      <td><span style="color: green"><strong>C99</strong></span>特有</td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>char</code></td>
      <td>字符</td>
      <td>实质是“小整数”（可能比短整数占用字节更少）</td>
      <td>分为<code>char</code>、<code>singed char</code>和<code>unsigned char</code>。使用<strong>单引号</strong>标记常量，比如<code>'A'</code>（<strong>值</strong>为65）</td>
      <td>1</td>
    </tr>
    <tr>
      <td><code>_Bool</code></td>
      <td>布尔型整数</td>
      <td>实质是无符号整数</td>
      <td>只能赋值0或1，赋值<code>_Bool</code>类型变量为非零值会导致赋值为1</td>
      <td>1</td>
    </tr>
    <tr>
      <td><code>float</code></td>
      <td>单精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>4</td>
    </tr>
    <tr>
      <td><code>double</code></td>
      <td>双精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>8</td>
    </tr>
    <tr>
      <td><code>long double</code></td>
      <td>扩展精度浮点数</td>
      <td> </td>
      <td> </td>
      <td>16</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p>强制编辑器处理常量为长整数（十进制、八进制和十六进制），<code>1135L</code>；强制处理为无符号，<code>1135U</code>；混合使用，<code>1135UL</code>，<code>U</code>和<code>L</code>顺序和大小写不重要。
<span style="color: green"><strong>C99</strong></span>中增加了<code>ll</code>或者<code>LL</code>后缀，强制<code>long long int</code>型整数，可以与<code>u</code>或<code>U</code>连用。<strong>避免无符号和有符号整数混用</strong>。</p>
  </li>
  <li>
    <p>强制编辑器处理常量为单精度浮点数，<code>11.3f</code>，<code>11.3</code>会被认为是<code>double</code>型；强制为双精度，<code>11.3L</code>或者<code>11.3l</code>。</p>
  </li>
  <li>
    <p>强制类型转化表达式的一般形式为：<code>(int)floatNumber</code>。C语言把<code>(type)</code>视为一元运算符，所以其等级高于二元运算符。</p>
  </li>
  <li>
    <p>类型定义一般形式为：<code>typedef int Newint;</code>，注意结尾的<code>；</code>。区别与使用宏定义类型，函数体内定义的<code>typdef</code>变量在函数体外无法使用，而宏可以作用于任何对应位置。</p>
  </li>
  <li>
    <p><code>sizeof</code>运算符一般形式为：<code>sizeof(type)</code>，比如<code>sizeof(long int)</code>计算<code>int</code>类型占用多少个字节。也可以应用与常量、变量或者表达式。</p>
  </li>
</ul>

<!--more-->

<h3 id="section-2">1.2 其他形式</h3>

<ul>
  <li>
    <p><code>arrays</code></p>
  </li>
  <li>
    <p><code>structures</code></p>
  </li>
  <li>
    <p><code>unions</code></p>
  </li>
  <li>
    <p><code>pointers</code></p>
  </li>
  <li>
    <p><code>functions</code></p>
  </li>
</ul>

<h2 id="section-3">2. 操作符类型和优先级</h2>

<p><img src="http://yulongniu.bionutshell.org/images/coperator.png" title="image" alt="C operators" /></p>

<p>图片取自<a href="#Ref">参考资料2</a>。</p>

<ul>
  <li>
    <p>操作符有两个性质：<strong>结合方向</strong>和<strong>优先级</strong>。<strong>结合方向</strong>决定操作符的执行对象，比如多个同等操作符；而<strong>优先级</strong>决定操作符的结合方式，通俗来讲即谁和谁结合在一起。但是，C没有规定表达式运算的先后顺序。比如对于二元操作符<code>+</code>，<code class="language-c">a = i + i++;</code>，由编译器决定是<code>i</code>还是<code>i++</code>先执行。</p>
  </li>
  <li>
    <p>C89中操作符<code>/</code>和<code>%</code>，用于负整数操作，结果由编译器决定。</p>
  </li>
  <li>
    <p>运算符<code>&amp;&amp;</code>和<code>||</code>（从左向右结合），两侧的两个表达式有运算顺序，先左后右。<strong>有可能右侧表达式没有计算，因此不要在右侧放入有副作用的表达式</strong>。</p>
  </li>
</ul>

<h2 id="section-4">3. 表达式</h2>

<ul>
  <li>
    <p>条件表达式<code class="language-c">i &gt; 0 ? i : f</code>，如果<code>i</code>和<code>f</code>是整数型和浮点型，即使条件判定为真，表达式的值为浮点型。</p>
  </li>
  <li>
    <p><code>switch</code>语句最后一个分支，添加<code class="language-c">break;</code>语句。原因是防止之后修改程序，需要再添加判断条件时，遗漏<code class="language-c">break;</code>语句。C语言的<code>switch</code>语句不能判断范围，但适合替代多个<code>OR</code>连接的判断语句。</p>
  </li>
  <li>
    <p>逗号表达式中，<code class="language-c">表达式1, 表达式2</code>，<code>表达式1</code>先计算之后丢弃其值，之后计算<code>表达式2</code>。因此，<strong><code>表达式1</code>必须有副作用</strong>。</p>
  </li>
</ul>

<h2 id="section-5">4. 语法注意事项</h2>

<ul>
  <li>
    <p><code>#define LOWER 0</code>定义常量的语句之后，没有分号<code>;</code>。</p>
  </li>
  <li>
    <p><code class="language-c">break;</code>只能跳出一层循环。</p>
  </li>
  <li>
    <p><code class="language-c">continue;</code>。一个有意思的应用场景，用<code>continue;</code>语句<strong>条件性</strong>忽略一些语句。</p>
  </li>
  <li>
    <p><code>EOF</code>是文档结束的标志（End of File），在<code class="language-c">&lt;stdio.h&gt;</code>定义为一个整数<code>-1</code>，代码如下：</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>definition of EOF in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef EOF</span>
</span><span class='line'><span class="cp"># define EOF (-1)</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>用引号<code>''</code>标记的字符串，对应的是ASCII的数字值。</p>
  </li>
  <li>
    <p><code>for</code>循环声明需要有主体；如无，在<code>for</code>语句后添加<code>;</code>作“无效声明（null statement）”。<strong>为了避免误解，<code>;</code>单独占一行</strong>，或者使用<code>{}</code>代替单独一行的<code>;</code>。</p>
  </li>
  <li>
    <p>矩阵计数从0开始。</p>
  </li>
  <li>
    <p>顺序点（sequence point）</p>

    <ul>
      <li>
        <p><code class="language-c">&amp;&amp;</code>、<code class="language-c">||</code>和comma operators，左边和右边表达式之间。</p>
      </li>
      <li>
        <p>三元条件操作符<code class="language-c">?:</code>，在条件判断表达式与第二（第三）表达式之间。</p>
      </li>
      <li>
        <p>完整表达式结束，包括赋值、<code class="language-c">return</code>语句、<code class="language-c">if</code>/<code class="language-c">switch</code>/<code class="language-c">while</code>/<code class="language-c">do-while</code>条件表达式判断结束和<code class="language-c">for</code>三个表示式。</p>
      </li>
      <li>
        <p>函数的所有参数赋值和函数第一条语句执行之前（见后举例）。</p>
      </li>
      <li>
        <p>变量初始化语句结束，比如<code class="language-c">int a = 1;</code>。如果多个变量初始化（<code>,</code>分割），则在每一个<code>,</code>结束处，比如 <code class="language-c">int a = 1, b = 2;</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-c">i++</code>与<code class="language-c">++i</code></p>

    <ul>
      <li>
        <p>大多数情况用于整数操作。</p>
      </li>
      <li>
        <p><code class="language-c">++i</code>马上自增，<code class="language-c">i++</code>自增则在两个相邻顺序点之间进行。表达式<code class="language-c">++i</code>值为<code>i+1</code>，表达式<code class="language-c">i++</code>值为<code>i</code>。</p>
      </li>
      <li>
        <p>表达式<code class="language-c">i++ == 0;</code>中，<code>i</code>使用原始数值，在表达式结束后自增；相反，表达式<code class="language-c">++i == 0;</code>中，<code>i</code>马上自增后与0比较。</p>
      </li>
      <li>
        <p>对于表达式<code class="language-c">f(i++)</code>，传入的参数值为<code>i</code>，但是在函数内部开始执行前，<code class="language-c">i</code>完成自增。这是因为在<strong>函数的所有参数赋值和函数第一条语句执行之前</strong>有一个<strong>顺序点</strong>。</p>
      </li>
      <li>
        <p>在<code class="language-c">for</code>语句中，使用<code class="language-c">for(i = 0; i &lt; 10; i++)</code>与<code class="language-c">for(i = 0; i &lt; 10; ++i)</code>效果一样。</p>
      </li>
      <li>
        <p>对于现代编译器，<code class="language-c">i++</code>和<code class="language-c">++i</code>的执行效率没有区别。所以写代码时，按照自认为最清楚的方式写。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>副作用（side effect）</p>

    <ul>
      <li>
        <p>所有赋值运算、<code class="language-c">i++</code>和<code class="language-c">++i</code>都有副作用，即改变原始变量的值。</p>
      </li>
      <li>
        <p>赋值运算的值是赋值操作后右侧的值，并且将其强制转换为左侧值类型；赋值运算左侧必须为“左值（lvalue）”。</p>
      </li>
      <li>
        <p>在同一个表达式，即访问某个变量，同时又修改这个变量，会造成<strong>“未定义行为（undefined behavior）”</strong>。有副作用的操作，会带来隐晦为定义行为。未定义行为会随着不同的编译器，而产生不同的结果。其危险性不仅在于阻碍跨平台使用，而且也会有程序运行失败或者得到意想不到结果。<strong>建议：不在一个表达式中即访问又修改同一个变量</strong>。一些典型的未定义行为的例子：</p>
      </li>
    </ul>
  </li>
</ul>

<p><figure class='code'><figcaption><span>Undefined behavior in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># can not decide whether “++”, “=”, or “+” is the first</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;is-not-comma-operator&quot;</span><span class="o">&gt;</span><span class="err">”</span><span class="p">,</span><span class="err">”</span> <span class="n">is</span> <span class="n">not</span> <span class="n">comma</span> <span class="n">operator</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="section-6">5. 标准库</h2>

<h3 id="include-stdiohlanguage-c">5.1 <code class="language-c">#include &lt;stdio.h&gt;</code></h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="mf">3.0f</span> <span class="o">%</span><span class="mf">6.1f</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">fahr</span><span class="p">,</span> <span class="n">celsius</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>%m.pX</code>：格式串模板，<code>m</code>表示要显示的最小字段宽度，<code>p</code>表示精度，<code>X</code>表示类型。</p>

<p>对于 <code class="language-c">printf()</code>函数：</p>

<ul>
  <li>
    <p><code>%d</code>：十进制整数。</p>

    <ul>
      <li>
        <p><code>%1d</code>一个十进制整数，配合<code>scanf()</code>实现单个整数输入操作。</p>
      </li>
      <li>
        <p><code>%6d</code>：十进制整数，至少6位宽，右对齐；如果数字位数超过6位，则全部显示。</p>
      </li>
      <li>
        <p><code>%-6d</code>：同上，区别左对齐。</p>
      </li>
      <li>
        <p><code>%-6.3d</code>：同上，如果数字位数少于3位，左侧加0。比如，<code class="language-c">printf(".2d%", 5)</code>的输出为<code>05</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%u</code>：无符号十进制数。</p>

    <ul>
      <li>
        <p><code>%o</code>：无符号八进制数。</p>
      </li>
      <li>
        <p><code>%x</code>：无符号十六进制数。</p>
      </li>
      <li>
        <p>没有标准方法打印负八进制和负十六进制数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%h</code>：短整数前缀。</p>

    <ul>
      <li>
        <p><code>%l</code>：长整数前缀。</p>
      </li>
      <li>
        <p><code>%ll</code>：长长整数前缀，<span style="color: green"><strong>C99</strong></span>特有。</p>
      </li>
      <li>
        <p><code>%h</code>、<code>%l</code>、<code>%ll</code>与<code>d</code>、<code>u</code>、<code>o</code>和<code>x</code>连用，比如<code>ho</code>表示无符号短八进制数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%f</code>：浮点数，默认小数位为6位。</p>

    <ul>
      <li>
        <p><code>%6f</code>：浮点数，至少6位宽。</p>
      </li>
      <li>
        <p><code>%6.0f</code>：浮点树，至少6位宽，无小数点而且无小数位。</p>
      </li>
      <li>
        <p><code>%.2f</code>：浮点数，小数点后两位。</p>
      </li>
      <li>
        <p><code>%6.2f</code>：浮点数，至少6位宽，小数点后两位。</p>
      </li>
      <li>
        <p><code>%e</code>：科学计数。</p>
      </li>
      <li>
        <p><code>%g</code>：科学计数或者浮点数。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>l</code>：<code>double</code>型前缀。</p>

    <ul>
      <li>
        <p><code>l</code>只在<code class="language-c">scanf()</code>中使用，在<code class="language-c">printf()</code>使用<code>%f</code>、<code>%e</code>和<code>%g</code>表示<code>float</code>型和<code>double</code>型。</p>
      </li>
      <li>
        <p><span style="color: green"><strong>C99</strong></span>中允许在<code class="language-c">printf()</code>使用<code>%lf</code>、<code>%le</code>和<code>%lg</code>，但是<code>l</code>不起作用。</p>
      </li>
      <li>
        <p><code>L</code>：<code>long double</code>型前缀。</p>
      </li>
      <li>
        <p><code>l</code>和<code>L</code>与<code>e</code>、<code>f</code>、<code>g</code>连用。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>%c</code>：字符。</p>
  </li>
  <li>
    <p><code>%s</code>：字符串。</p>
  </li>
  <li>
    <p><code>%%</code>：<code>%</code>自身。</p>
  </li>
</ul>

<p>对于<code class="language-c">scanf()</code>函数：</p>

<ul>
  <li>
    <p>格式串中出现空白字符（<strong>空格、水平或者垂直制表符、换页符、换行符</strong>），数量无关紧要，因为可以匹配任意数量（包括0个）空白字符。</p>
  </li>
  <li>
    <p><strong>不要输把空白字符（比如<code>"%d "</code>）放入格式串的结尾</strong>。原因：<code class="language-c">scanf()</code>会挂起，直到出现不能匹配的空白字符。</p>
  </li>
  <li>
    <p><code>%f</code>、<code>%e</code>、<code>%g</code>：可以互换使用；double型，使用<code>%lf</code>等；long double型，<code>%Lf</code>等。</p>
  </li>
</ul>

<h2 id="span-stylecolor-greenc99span">6. <span style="color: green"><strong>C99</strong></span>注意事项</h2>

<ul>
  <li>
    <p>在<code>for</code>语句中声明的计数变量，只能在for循环中使用。比如 <code class="language-c">for(int i = 0; i &lt; 10; i++){...}</code>，变量<code>i</code>只能在循环内起作用。</p>
  </li>
  <li>
    <p>新增加表示布尔数值的头文件<code>&lt;stdbool.h&gt;</code>，使用方法</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>bool in <span style="color: green">C99</span> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdbool.h&gt;&lt;/stdbool.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">trueVal</span> <span class="o">=</span> <span class="nb">true</span><span class="p">,</span> <span class="n">falseVal</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>允许使用<code>typedef</code>定义占用特定位数（是“比特数”，不是“字节数”）的整数，比如：</li>
</ul>

<p><figure class='code'><figcaption><span>typedef 32 bit integer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdint.h&gt;&lt;/stdint.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="kt">int32_t</span> <span class="n">Int32</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>BW Kernighan and DM Ritchie: <a href="http://www.amazon.com/The-Programming-Language-2nd-Edition/dp/0131103628">The C Programming Language (2nd Edition)</a>, 1988.</p>
  </li>
  <li>
    <p>KN King: <a href="http://www.amazon.com/Programming-Modern-Approach-2nd-Edition/dp/0393979504">C Programming: A Modern Approach, 2nd Edition</a>, 2008.</p>
  </li>
  <li>
    <p><a href="http://port70.net/~nsz/c/">C各种标准</a></p>
  </li>
</ul>

<h3 id="section-7">更新记录</h3>

<p>2014年12月7日</p>
]]></content>
  </entry>
  
</feed>
