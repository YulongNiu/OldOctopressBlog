<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2015-10-26T17:06:04+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C语言学习记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note/"/>
    <updated>2014-12-08T07:23:16+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/12/08/c-program-note</id>
    <content type="html"><![CDATA[<h2 id="section">1. 基本数据类型</h2>

<h3 id="section-1">1.1 数字形式</h3>

<p>数字的位数是多少？</p>

<ul>
  <li>
    <p><code>int</code>：整数</p>
  </li>
  <li>
    <p><code>short</code>：短整数</p>
  </li>
  <li>
    <p><code>long</code>：长整数</p>
  </li>
  <li>
    <p><code>float</code>：浮点数</p>
  </li>
  <li>
    <p><code>double</code>：双浮点数</p>
  </li>
  <li>
    <p><code>char</code>：字符</p>
  </li>
</ul>

<!--more-->

<h3 id="section-2">1.2 其他形式</h3>

<ul>
  <li>
    <p><code>arrays</code></p>
  </li>
  <li>
    <p><code>structures</code></p>
  </li>
  <li>
    <p><code>unions</code></p>
  </li>
  <li>
    <p><code>pointers</code></p>
  </li>
  <li>
    <p><code>functions</code></p>
  </li>
</ul>

<h2 id="section-3">2. 操作符类型和优先级</h2>

<p><img src="http://yulongniu.bionutshell.org/images/coperator.png" title="image" alt="C operators" /></p>

<p>图片取自<a href="#Ref">参考资料2</a>。</p>

<ul>
  <li>
    <p>操作符有两个性质：<strong>结合方向</strong>和<strong>优先级</strong>。<strong>结合方向</strong>决定操作符的执行对象，比如多个同等操作符；而<strong>优先级</strong>决定操作符的结合方式，通俗来讲即谁和谁结合在一起。但是，C没有规定表达式运算的先后顺序。比如对于二元操作符<code>+</code>，<code class="language-c">a = i + i++;</code>，由编译器决定是<code>i</code>还是<code>i++</code>先执行。</p>
  </li>
  <li>
    <p>C89中操作符<code>/</code>和<code>%</code>，用于负整数操作，结果由编译器决定。</p>
  </li>
</ul>

<h2 id="section-4">3. 语法注意事项</h2>

<ul>
  <li>
    <p><code>#define LOWER 0</code>定义常量的语句之后，没有分号<code>;</code>。</p>
  </li>
  <li>
    <p><code>EOF</code>是文档结束的标志（End of File），在<code class="language-c">&lt;stdio.h&gt;</code>定义为一个整数<code>-1</code>，代码如下：</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>definition of EOF in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef EOF</span>
</span><span class='line'><span class="cp"># define EOF (-1)</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>用引号<code>''</code>标记的字符串，对应的是ASCII的数字值。</p>
  </li>
  <li>
    <p><code>for</code>循环声明需要有主体，如无，在<code>for</code>语句后添加<code>;</code>作“无效声明（null statement）”。</p>
  </li>
  <li>
    <p>矩阵计数从0开始。</p>
  </li>
  <li>
    <p>顺序点（sequence point）</p>

    <ul>
      <li>
        <p><code class="language-c">&amp;&amp;</code>、<code class="language-c">||</code>和comma operators，左边和右边表达式之间。</p>
      </li>
      <li>
        <p>三元条件操作符<code class="language-c">?:</code>，在条件判断表达式与第二（第三）表达式之间。</p>
      </li>
      <li>
        <p>完整表达式结束，包括赋值、<code class="language-c">return</code>语句、<code class="language-c">if</code>/<code class="language-c">switch</code>/<code class="language-c">while</code>/<code class="language-c">do-while</code>条件表达式判断结束和<code class="language-c">for</code>三个表示式。</p>
      </li>
      <li>
        <p>函数的所有参数赋值和函数第一条语句执行之前（见后举例）。</p>
      </li>
      <li>
        <p>变量初始化语句结束，比如<code class="language-c">int a = 1;</code>。如果多个变量初始化（<code>,</code>分割），则在每一个<code>,</code>结束处，比如 <code class="language-c">int a = 1, b = 2;</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-c">i++</code>与<code class="language-c">++i</code></p>

    <ul>
      <li>
        <p>大多数情况用于整数操作。</p>
      </li>
      <li>
        <p><code class="language-c">++i</code>马上自增，<code class="language-c">i++</code>自增则在两个相邻顺序点之间进行。表达式<code class="language-c">++i</code>值为<code>i+1</code>，表达式<code class="language-c">i++</code>值为<code>i</code>。</p>
      </li>
      <li>
        <p>对于表达式<code class="language-c">f(i++)</code>，传入的参数值为<code>i</code>，但是在函数内部开始执行前，<code class="language-c">i</code>完成自增。这是因为在<strong>函数的所有参数赋值和函数第一条语句执行之前</strong>有一个<strong>顺序点</strong>。</p>
      </li>
      <li>
        <p>在<code class="language-c">for</code>语句中，使用<code class="language-c">for(i = 0; i &lt; 10; i++)</code>与<code class="language-c">for(i = 0; i &lt; 10; ++i)</code>效果一样。</p>
      </li>
      <li>
        <p>对于现代编译器，<code class="language-c">i++</code>和<code class="language-c">++i</code>的执行效率没有区别。所以写代码时，按照自认为最清楚的方式写。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>副作用（side effect）</p>

    <ul>
      <li>
        <p>所有赋值运算、<code class="language-c">i++</code>和<code class="language-c">++i</code>都有副作用，即改变原始变量的值。</p>
      </li>
      <li>
        <p>赋值运算的值是赋值操作后右侧的值，并且将其强制转换为左侧值类型；赋值运算左侧必须为“左值（lvalue）”。</p>
      </li>
      <li>
        <p>在同一个表达式，即访问某个变量，同时又修改这个变量，会造成<strong>“未定义行为（undefined behavior）”</strong>。有副作用的操作，会带来隐晦为定义行为。未定义行为会随着不同的编译器，而产生不同的结果。其危险性不仅在于阻碍跨平台使用，而且也会有程序运行失败或者得到意想不到结果。<strong>建议：不在一个表达式中即访问又修改同一个变量</strong>。一些典型的未定义行为的例子：</p>
      </li>
    </ul>
  </li>
</ul>

<p><figure class='code'><figcaption><span>Undefined behavior in C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp"># can not decide whether “++”, “=”, or “+” is the first</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;is-not-comma-operator&quot;</span><span class="o">&gt;</span><span class="err">”</span><span class="p">,</span><span class="err">”</span> <span class="n">is</span> <span class="n">not</span> <span class="n">comma</span> <span class="n">operator</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">d</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="o">++</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="section-5">4. 标准库</h2>

<h3 id="include-stdiohlanguage-c">4.1 <code class="language-c">#include &lt;stdio.h&gt;</code></h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="mf">3.0f</span> <span class="o">%</span><span class="mf">6.1f</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">fahr</span><span class="p">,</span> <span class="n">celsius</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>%m.pX</code>：格式串模板，<code>m</code>表示要显示的最小字段宽度，<code>p</code>表示精度，<code>X</code>表示类型。</p>

<p>对于 <code class="language-c">printf()</code>函数：</p>

<ul>
  <li>
    <p><code>%d</code>：十进制整数。</p>
  </li>
  <li>
    <p><code>%ld</code>：长十进制整数。</p>
  </li>
  <li>
    <p><code>%6d</code>：十进制整数，至少6位宽，右对齐；如果数字位数超过6位，则全部显示。</p>
  </li>
  <li>
    <p><code>%-6d</code>：同上，区别左对齐。</p>
  </li>
  <li>
    <p><code>%-6.3d</code>：同上，如果数字位数少于3位，左侧加0。</p>
  </li>
  <li>
    <p><code>%f</code>：浮点数，默认小数位为6位。</p>
  </li>
  <li>
    <p><code>%6f</code>：浮点数，至少6位宽。</p>
  </li>
  <li>
    <p><code>%6.0f</code>：浮点树，至少6位宽，无小数点而且无小数位。</p>
  </li>
  <li>
    <p><code>%.2f</code>：浮点数，小数点后两位。</p>
  </li>
  <li>
    <p><code>%6.2f</code>：浮点数，至少6位宽，小数点后两位。</p>
  </li>
  <li>
    <p><code>%e</code>：科学计数。</p>
  </li>
  <li>
    <p><code>%g</code>：科学计数或者浮点数。</p>
  </li>
  <li>
    <p><code>%o</code>：八进制。</p>
  </li>
  <li>
    <p><code>%x</code>：六进制。</p>
  </li>
  <li>
    <p><code>%c</code>：字符。</p>
  </li>
  <li>
    <p><code>%s</code>：字符串。</p>
  </li>
  <li>
    <p><code>%%</code>：<code>%</code>自身。</p>
  </li>
</ul>

<p>对于<code class="language-c">scantf()</code>函数：</p>

<ul>
  <li>
    <p>格式串中出现空白字符（空格、水平或者垂直制表符、换页符、换行符），数量无关紧要，因为可以匹配任意数量（包括0个）空白字符。</p>
  </li>
  <li>
    <p><strong>不要输把空白字符（比如<code>"%d "</code>）放入格式串的结尾</strong>。原因：<code class="language-c">scantf()</code>会挂起，直到出现不能匹配的空白字符。</p>
  </li>
  <li>
    <p><code>%f</code>、<code>%e</code>、<code>%g</code>：可以互换使用。</p>
  </li>
</ul>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>BW Kernighan and DM Ritchie: <a href="http://www.amazon.com/The-Programming-Language-2nd-Edition/dp/0131103628">The C Programming Language (2nd Edition)</a>, 1988.</p>
  </li>
  <li>
    <p>KN King: <a href="http://www.amazon.com/Programming-Modern-Approach-2nd-Edition/dp/0393979504">C Programming: A Modern Approach, 2nd Edition</a>, 2008.</p>
  </li>
  <li>
    <p><a href="http://port70.net/~nsz/c/">C各种标准</a></p>
  </li>
</ul>

<h3 id="section-6">更新记录</h3>

<p>2014年12月7日</p>
]]></content>
  </entry>
  
</feed>
