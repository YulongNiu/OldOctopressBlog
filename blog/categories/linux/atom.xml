<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2015-12-20T20:09:48+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQL使用指南]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/07/29/postgresql-usage/"/>
    <updated>2015-07-29T18:24:10+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/07/29/postgresql-usage</id>
    <content type="html"><![CDATA[<h2 id="section">1. 查询</h2>

<p>{% codeblock lang:psql Query %}
– 选取特定的一列或者多列
SELECT column1, column2
FROM dataset</p>

<p>– 选取全部列
SELECT *
FROM dataset</p>

<p>– 去除重复，选取一列或多列中唯一元素
– 如输入多列，则去除多列组合后的重复
SELECT DISTINCT column1, column2
FROM dataset</p>

<p>– 指定输出列数
– a是输出行数，b是输出起始行（第一行计为0）
SELECT column
FROM dataset
LIMIT a OFFSET b
{% endcodeblock %}</p>

<!--more-->

<ul>
  <li>
    <p>使用<code class="language-bash">;</code>结束一条SQL语句，本文中省略；</p>
  </li>
  <li>
    <p>返回未排序数据；</p>
  </li>
</ul>

<h2 id="section-1">2. 排序</h2>

<p>{% codeblock lang:psql Ordering %}
– 按照一列或者多列升序排序
– 可以按照“不查询”的列排序
– 先按照column2排，再按照column5排
SELECT column1, column2, column3
FROM dataset
ORDER BY column2, column5</p>

<p>– 降序
– DESC只作用于最靠近的唯一一列，即column2，不作用于column5
SELECT column1, column2, column3
FROM dataset
ORDER BY column2 DESC, column5</p>

<p>–使用查询列相对编号
SELECT column1, column2, column3
FROM dataset
ORDER BY 2, column5
{% endcodeblock %}</p>

<ul>
  <li>
    <p>使用相对列查询时，不查询的列，比如上述例子的column5，不能用数字代替。</p>
  </li>
  <li>
    <p>使用相对列查询有风险，不采用。</p>
  </li>
  <li>
    <p>升序关键字为<code class="language-psql">ASC</code>，通常升序为默认。</p>
  </li>
  <li>
    <p><code class="language-psql">ORDER BY</code>必须在制定列和数据集后出现。</p>
  </li>
</ul>

<h2 id="section-2">3. 筛选</h2>

<p>{% codeblock lang:psql Filter %}
– ORDER BY语句需要在WHERE之后
– AND表示“且”， OR表示“或”，第一个条件满足即终止
– AND和OR可有任意多个
SELECT column1, column2
FROM dataset 
WHERE (column3 = a OR column3 = b) AND column1 = c
ORDER BY column3</p>

<p>– 多个OR语句使用IN代替，比如上述例子为：
SELECT column1, column2
FROM dataset 
WHERE column3 IN (a, b) AND column1 = c
ORDER BY column3</p>

<p>– NOT与IN连用
SELECT column1, column2
FROM dataset 
WHERE column3 NOT IN (a, b)</p>

<p>– BETWEEN a AND b语句，a必须小于等于b
– 如a等于b，则相当于筛选与a（或者b）相等数值
SELECT column1, column2
FROM dataset
WHERE column1 BETWEEN a AND b</p>

<p>–筛选NULL值使用IS NULL
–筛选非NULL值使用IS NOT NULL
SELECT column1, column2
FROM dataset
WHERE column1 IS NULL
{% endcodeblock %}</p>

<ul>
  <li>
    <p><a href="http://www.postgresql.org/docs/9.4/static/functions-comparison.html#FUNCTIONS-COMPARISON-TABLE">PostgreSQL支持的比较符</a>：<code class="language-psql">&lt;</code>、<code class="language-psql">&lt;=</code>、<code class="language-psql">&gt;</code>、<code class="language-psql">&gt;=</code>、<code class="language-psql">=</code>和<code class="language-psql">!=</code>（“不等于”也可以表示为<code class="language-psql">&lt;&gt;</code>）。</p>
  </li>
  <li>
    <p>筛选字符串条件，需要对筛选串加引号，比如例子中<code class="language-psql">a</code>为<code class="language-psql">"testStr"</code>。</p>
  </li>
  <li>
    <p>合理使用括号，强制规定<code class="language-psql">AND</code>和<code class="language-psql">OR</code>先后顺序。</p>
  </li>
  <li>
    <p><code class="language-psql">IN</code>语句执行效率高，并且可以嵌套多层<code class="language-psql">SELECT</code>语句（每个<code class="language-psql">SELECT</code>只返回一列数据）。</p>
  </li>
  <li>
    <p>尽量在数据库查询过程，而非自己后续手写，完成数据筛选，因为：1. SQL数据库操作通常比自己手写效率高；2. 便于后续扩展。</p>
  </li>
</ul>

<h2 id="section-3">4. 模式匹配</h2>

<p>{% codeblock lang:psql Pattern Matching %}
– LIKE和NOT LIKE支持对字符串的模式匹配
– “_”匹配单一一个字符
– “%”匹配0个或多个字符
SELECT column1, column2
FROM dataset
WHERE column1 LIKE ‘F_y%’</p>

<p>– SIMILAR TO和NOT SIMILAR TO支持正则匹配
– 正则匹配中，仍然使用“_”和“%”
SELECT column1, column2
FROM dataset
WHERE column1 SIMILAR TO ‘[^JM]%’
{% endcodeblock %}</p>

<ul>
  <li>
    <p>PostgreSQL支持<code class="language-psql">ILIKE</code>和<code class="language-psql">NOT ILIKE</code>忽略大小写敏感搜索，这不是标准SQL语法。</p>
  </li>
  <li>
    <p>注意数据库自动补充的空格，比如 <code class="language-psql">'F_y'</code>只能匹配“F开头-间隔一个字符-y结尾”的字符串，如果字符串后跟有空格，则不能匹配。</p>
  </li>
  <li>
    <p><a href="http://www.postgresql.org/docs/9.4/static/functions-matching.html">PostgreSQL支持的通配符</a></p>
  </li>
  <li>
    <p>模式匹配效率不高，尽量后置，不要过度使用。</p>
  </li>
</ul>

<h2 id="section-4">5. 函数</h2>

<p>{% codeblock lang:psql Function %}
–数学计算
SELECT column1, column2 * column3 AS newName
FROM dataset</p>

<p>– 字符串连接
SELECT RTRIM(column1) || ‘ (‘ || RTRIM(column1) || ‘)’ AS newName
FROM dataset
ORDER BY column1</p>

<p>– 使用函数
SELECT column1, UPPER(column2) AS newName
FROM dataset</p>

<p>– 筛选日期
SELECT column1, columnDate 
FROM dataset
WHERE DATE_PART(‘year’, columnDate) = 2015</p>

<p>– 汇总数据
SELECT AVG(DISTINCT column1) AS newName1,
       SUM(column2) AS newName2,
       MAX(column3) AS newName3,
       MIN(column4) AS newName4
FROM Products 
WHERE vend_id = ‘DLL01’
{% endcodeblock %}</p>

<ul>
  <li>
    <p>使用<code class="language-psql">AS</code>及时命名新列。</p>
  </li>
  <li>
    <p>支持数字列的运算有<code class="language-psql">+</code>、<code class="language-psql">-</code>、<code class="language-psql">*</code>和<code class="language-psql">/</code>，更多操作参考<a href="http://www.postgresql.org/docs/9.4/static/functions-math.html">PostgreSQL支持的数值操作</a>。</p>
  </li>
  <li>
    <p>为了移植性考虑，如果使用数据库内置函数，需要对代码相应部分添加详细注释。</p>
  </li>
</ul>

<h2 id="section-5">6. 分组</h2>

<p>{% codeblock lang:psql Group %}
– 分组的意思是对一列或者多列数据归总
SELECT column1, column2, COUNT(<em>) AS newName 
FROM dataset
WHERE column4 &gt; 3
GROUP BY column1, column2
HAVING COUNT(</em>) &gt; 1
ORDER BY newName
{% endcodeblock %}</p>

<ul>
  <li>
    <p><code class="language-psql">GROUP BY</code>必须出现在<code class="language-psql">WHERE</code>后，<code class="language-psql">ORDER BY</code>前。</p>
  </li>
  <li>
    <p><code class="language-psql">GROUP BY</code>需要配合聚集函数，比如<code class="language-psql">AVE()</code>，一起使用。</p>
  </li>
  <li>
    <p><code class="language-psql">GROUP BY</code>不保证返回结果有特定顺序，如果需要特定顺序，需要指明<code class="language-psql">ORDER BY</code>。<code class="language-psql">ORDER BY</code>可以使用新列名。</p>
  </li>
  <li>
    <p><code class="language-psql">SELECT</code>语句中出现的列，必须在<code class="language-psql">GROUP BY</code>中出现。</p>
  </li>
  <li>
    <p><code class="language-psql">NULL</code>单独给出，多个<code class="language-psql">NULL</code>合并为一组。</p>
  </li>
  <li>
    <p><code class="language-psql">HAVING</code>对分组汇总后数据筛选，区别<code class="language-psql">WHERE</code>（汇总分组前筛选）。不能使用新列名，比如<code class="language-psql">HAVING newName &gt; 1</code>非法。</p>
  </li>
</ul>

<h2 id="postgresql">8. PostgreSQL支持的函数</h2>

<h3 id="section-6">8.1 数值</h3>

<table>
  <thead>
    <tr>
      <th>函数名</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-psql">ABS()</code></td>
      <td>绝对值</td>
    </tr>
    <tr>
      <td><code class="language-psql">SQRT()</code></td>
      <td>平方根</td>
    </tr>
    <tr>
      <td><code class="language-psql">ROUND(v numeric, s int)</code></td>
      <td>取特定小数位数</td>
    </tr>
    <tr>
      <td><code class="language-psql">AVG()</code></td>
      <td>平均值，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">MAX()</code></td>
      <td>最大值，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">MIN()</code></td>
      <td>最小指，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">SUM()</code></td>
      <td>求和，忽略<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">COUNT(*)</code></td>
      <td>所有行数，包括<code class="language-psql">NULL</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">COUNT(column1)</code></td>
      <td>行数，忽略<code class="language-psql">NULL</code></td>
    </tr>
  </tbody>
</table>

<p>详细参考：<a href="http://www.postgresql.org/docs/9.4/static/functions-math.html">PostgreSQL支持的数值操作</a></p>

<h3 id="section-7">8.2 字符串</h3>

<table>
  <thead>
    <tr>
      <th>函数名</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-psql">RTRIM()</code></td>
      <td>删除字符串左侧空格</td>
    </tr>
    <tr>
      <td><code class="language-psql">LTRIM()</code></td>
      <td>删除字符串右侧空格</td>
    </tr>
    <tr>
      <td><code class="language-psql">TRIM()</code></td>
      <td>删除双侧空格</td>
    </tr>
    <tr>
      <td><code class="language-psql">SUBSTRING(string [from int] [for int])</code></td>
      <td>按照索引取字符串（从1开始）</td>
    </tr>
    <tr>
      <td><code class="language-psql">SUBSTRING(string [from int] [for int])</code></td>
      <td>选取符合POSIX正则匹配字符串</td>
    </tr>
    <tr>
      <td><code class="language-psql">CHAR_LENGTH()</code></td>
      <td>计算字符串长度，等同于<code class="language-psql">LENGTH()</code></td>
    </tr>
    <tr>
      <td><code class="language-psql">UPPER()</code></td>
      <td>大写</td>
    </tr>
    <tr>
      <td><code class="language-psql">LOWER()</code></td>
      <td>小写</td>
    </tr>
    <tr>
      <td><code class="language-psql">LEFT(string, n int)</code></td>
      <td>截取左侧n个字符串（从1开始）</td>
    </tr>
  </tbody>
</table>

<p>详细参考：<a href="http://www.postgresql.org/docs/9.4/static/functions-string.html">PostgreSQL支持的字符串操作</a></p>

<h3 id="section-8">8.3 日期</h3>

<table>
  <thead>
    <tr>
      <th>函数名</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-psql">CURRENT_DATE</code></td>
      <td>当前日期</td>
    </tr>
    <tr>
      <td><code class="language-psql">DATE_PART(text, timestamp)</code></td>
      <td>选取日期中的年、月或日</td>
    </tr>
  </tbody>
</table>

<p>详细参考：<a href="http://www.postgresql.org/docs/9.4/static/functions-datetime.html">PostgreSQL支持的日期操作</a></p>

<h2 id="section-9">使用建议</h2>

<ol>
  <li>数据集的名字为一个单词，比如<code class="language-psql">priceCustom</code>而不是一个字符串 <code class="language-psql">'price custom'</code>。同样，命名别名（使用<code class="language-psql">AS</code>）也如此。</li>
</ol>

<h3 id="section-10">参考资料</h3>

<ul>
  <li>
    <p>《SQL必知必会（SQL in 10 Minutes, Sams Teach Yourself (4th Edition)）》<a href="https://book.douban.com/subject/24250054/">豆瓣链接</a></p>
  </li>
  <li>
    <p><a href="https://wiki.postgresql.org/wiki/9.1%E7%AC%AC%E5%9B%9B%E7%AB%A0">PostgreSQL Wiki</a></p>
  </li>
</ul>

<h3 id="section-11">更新记录</h3>

<p>2015年7月29日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash简易编程]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/28/bash-program/"/>
    <updated>2015-05-28T21:24:32+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/28/bash-program</id>
    <content type="html"><![CDATA[<h2 id="section">1. 循环</h2>

<p><code class="language-bash">for</code>循环体</p>

<p>{% codeblock lang:bash for in Bash%}
for i in *.zip
do
    echo “$i”
done
{% endcodeblock %}</p>

<!--more-->

<h2 id="section-1">2. 字符串分割</h2>

<p>{% codeblock lang:bash Split strings%}
# write in file “testsplit.sh”
IFS=’,’ read -ra splitArray «&lt; “This,is,a,test”
for i in “${splitArray[@]}”
do
    echo “$i”
done</p>

<p>$ bash testsplit.sh
This
is
a
test
{% endcodeblock %}</p>

<h2 id="section-2">3. 屏幕输出存入变量</h2>

<p>某个bash命令，比如<code class="language-bash">ls -l</code>存入变量，之后引用变量。</p>

<p>{% codeblock lang:bash Save Command Output into Variables%}
# 注意等号前后不能加空格
listOutput=<code>ls -l</code>
echo “$listOutput”
{% endcodeblock %}</p>

<h3 id="section-3">参考网址</h3>

<ul>
  <li>
    <p><a href="http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash">How do I split a string on a delimiter in Bash?</a></p>
  </li>
  <li>
    <p><a href="http://stackoverflow.com/questions/4651437/how-to-set-a-bash-variable-equal-to-the-output-from-a-command">How to set a BASH variable equal to the output from a command?</a></p>
  </li>
</ul>

<h3 id="section-4">更新记录</h3>

<p>2015年5月27日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora安装与使用PostgreSQL]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/08/install-use-postgresql/"/>
    <updated>2015-05-08T18:30:54+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/08/install-use-postgresql</id>
    <content type="html"><![CDATA[<h2 id="postgresql">1. 安装和开启postgresql</h2>

<p>Fedora直接使用<code class="language-bash">dnf</code>安装相关组件。</p>

<p>{% codeblock lang:bash %}
# 安装PostgreSQL
# dnf install postgresql postgresql-server postgresql-contrib postgresql-devel pgadmin3
{% endcodeblock %}</p>

<!--more-->

<p>初始化（只需要执行一次）。如果出现类似<code class="language-bash">Data directory is not empty!</code>报错，可以尝试执行删除操作<code>rm -f -r /usr/local/pgsql/data</code></p>

<p>{% codeblock lang:bash %}
# 初始化
# postgresql-setup –initdb –unit postgresql</p>

<h1 id="section">开启服务</h1>
<p># service postgresql start</p>

<h1 id="section-1">查询工作状态</h1>
<p># service postgresql status</p>

<h1 id="section-2">关闭服务</h1>
<p># service postgresql stop</p>

<h1 id="section-3">开机启动</h1>
<p># chkconfig postgresql on
{% endcodeblock %}</p>

<h2 id="section-4">2. 创建用户和数据库</h2>

<p>为了方便使用，可以在PostgreSQL中创建一个与当前系统用户名相同的用户，比如目前系统登陆用户为Kitty。</p>

<p>{% codeblock lang:bash %}
# 进入home路径
# cd /home/</p>

<h1 id="postgresroot">进入默认postgres用户，需要输入root密码。</h1>
<p># 之后系统命令提示符会变成类似“bash-4.3$”。
# su postgres</p>

<h1 id="section-5">创建用户</h1>
<p># -P：创建用户后立即创建密码
# -s：用户为superuser
# -e：打印消息
bash-4.3$ createuser -P -s -e Kitty</p>

<h1 id="section-6">创建数据库</h1>
<p># -O：制定用户
bash-4.3$ createdb -O Kitty testdb</p>

<h1 id="section-7">退出</h1>
<p>bash-4.3$ exit</p>

<h1 id="postgres">再创建新的数据库时，不需要进入postgres。</h1>
<p># 直接在当前登录用户下创建即可。
# 由于PostgreSQL用户与系统登录用户相同，不需要指定PostgreSQL用户
$ creatdb testdb2</p>

<h1 id="section-8">删除数据库</h1>
<p>$ dropdb testdb2
{% endcodeblock %}</p>

<p>创建完用户和对应数据库后，可以登录数据库控制台。登录后，系统命令提示符会变成类似“testdb=#”。</p>

<p>{% codeblock lang:bash %}</p>

<h1 id="testdb">登录testdb数据库控制台</h1>
<p>$ psql testdb</p>

<h1 id="section-9">完整登录命令</h1>
<p># -U：用户名
# -d：数据库
# -h：host，默认为local socket
# -p：端口
$ psql -U Kitty -d testdb -h /var/run/postgresql -p 5432</p>

<h1 id="postgresql-1">查看PostgreSQL配制文件路径</h1>
<p>testdb=# SHOW config_file;</p>

<h1 id="section-10">查看所有用户</h1>
<p>testdb=# \du</p>

<h1 id="table">查看表格（table）</h1>
<p>testdb=# \dt</p>

<h1 id="section-11">查看所有数据库</h1>
<p>testdb=# \l</p>

<h1 id="section-12">退出</h1>
<p>testdb=# \q
{% endcodeblock %}</p>

<h3 id="section-13">参考资料</h3>

<ul>
  <li>
    <p><a href="http://www.postgresql.org/docs/9.4/interactive/index.html">PostgreSQL 9.4 Manuals</a></p>
  </li>
  <li>
    <p><a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html">PostgreSQL新手入门</a></p>
  </li>
  <li>
    <p><a href="http://www.heatware.net/linux-unix/how-install-postgresql-8-4-centos-5/">初始化错误</a></p>
  </li>
</ul>

<h3 id="section-14">更新记录</h3>

<p>2015年7月29日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用命令集锦]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2010/11/09/linux-command/"/>
    <updated>2010-11-09T06:00:40+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2010/11/09/linux-command</id>
    <content type="html"><![CDATA[<h2 id="section">1. 压缩与解压缩</h2>

<p><code class="language-bash">.tar.gz</code>格式文件</p>

<p>{% codeblock lang:bash %}
# 解压 
$ tar -zxvf /filePath/filename.tar.gz</p>

<h1 id="section-1">压缩</h1>
<p>$ tar -zcvf /filePath/filename.tar.gz /filePath/filename</p>

<h1 id="section-2">解压到特定文件夹</h1>
<p>$ tar -zxvf /filePath/filename.tar.gz -C /filePath/filename</p>

<h1 id="section-3">压缩到特定文件夹</h1>
<p>$ tar -zcvf /filePath/filename.tar.gz -C /filePath/filename</p>

<h1 id="txt">压缩所有txt类型文件</h1>
<p>$ gzip *.txt
{% endcodeblock %}</p>

<p><code class="language-bash">.tar.bz2</code>格式文件</p>

<p>{% codeblock lang:bash %}
# 解压 
$ tar -jxvf /filePath/filename.taz.bz2</p>

<h1 id="section-4">压缩</h1>
<p>$ tar -jcvf /filePath/filename.tar.bz2 /filePath/filename
{% endcodeblock %}</p>

<!--more-->

<p><code class="language-bash">.rar</code>格式文件</p>

<p>需要安装<a href="http://www.rarsoft.com/download.html">rar工具</a>, 下载对应的linux版本，解压，<code class="language-bash">make</code>即可。</p>

<p>{% codeblock lang:bash %}
# 解压
$ rar e /filePath/filename.rar /filePath/filename</p>

<h1 id="section-5">压缩</h1>
<p>$ rar a -m5 /filePath/filename.rar /filePath/filename
{% endcodeblock %}</p>

<p><code class="language-bash">.zip</code>格式文件</p>

<p>需要安装zip和unzip工具</p>

<p>{% codeblock lang:bash %}
# dnf install zip
# dnf install unzip
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
# 解压
$ unzip filename.zip</p>

<h1 id="section-6">只打印最简短解压信息，并不解压</h1>
<p>$ unzip -tq filename.zip</p>

<h1 id="section-7">解压其中一个文件</h1>
<p>$ unzip filename.zip onefile</p>

<h1 id="section-8">解压到特定目录</h1>
<p>$ unzip filename.zip -d /filePath/filename</p>

<h1 id="section-9">压缩当前目录</h1>
<p>$ zip filename *</p>

<h1 id="section-10">压缩当前目录包括所有子目录</h1>
<p>$ zip -r filename *
{% endcodeblock %}</p>

<p><code class="language-bash">gzip</code>使用方法:</p>

<p>{% codeblock lang:bash %}
# 保留源文件压缩
$ gzip -c filename &gt; filename.gz</p>

<h1 id="section-11">保留源文件解压</h1>
<p>$ gunzip -c filename.gz &gt; filename
{% endcodeblock %}</p>

<h2 id="section-12">2. 文件夹操作</h2>

<p>{% codeblock lang:bash %}
# 创建 
$ mkdir</p>

<h1 id="section-13">删除</h1>
<p>$ rm</p>

<h1 id="section-14">删除整个文件夹</h1>
<p>$ rm -rf</p>

<h1 id="section-15">复制</h1>
<p>$ cp</p>

<h1 id="section-16">复制文件夹</h1>
<p>$ cp -r
{% endcodeblock %}</p>

<h2 id="section-17">3. 目录</h2>

<p>{% codeblock lang:bash %}
# 显示 
$ ls</p>

<h1 id="section-18">列表显示文件和相关权限</h1>
<p>$ ls -l</p>

<h1 id="section-19">列表显示文件并按照文件名逆序排列</h1>
<p>$ ls -rl</p>

<h1 id="section-20">显示隐藏文件</h1>
<p>$ ls -a</p>

<h1 id="section-21">可以配合使用</h1>
<p>$ ls -al</p>

<h1 id="section-22">查看文件夹大小</h1>
<p>$ ls -lhs</p>

<h1 id="section-23">查看目录树</h1>
<p>$ tree
{% endcodeblock %}</p>

<h2 id="sh">4. 运行 *.sh文件</h2>

<p>{% codeblock lang:bash %}
# 将sh文件赋予可执行权限
$ chomd 777 filename.sh
$ sh /filePath/filename.sh
{% endcodeblock %}</p>

<h2 id="section-24">5. 更改文件名</h2>

<p>{% codeblock lang:bash %}
$ mv oldfile newfile
{% endcodeblock %}</p>

<h2 id="md5">6. md5报文摘要算法</h2>

<p>md5（Message-Digest Algorithm 5）报文摘要，可以用来验证网络文件传输的完整性。</p>

<p>{% codeblock lang:bash %}
$ md5sum file
{% endcodeblock %}</p>

<h2 id="java">7. java类型文件</h2>

<p>Java Control Panel位置<code class="language-bash">/usr/java/jdk1.7.0_45/bin/ControlPanel</code></p>

<p>{% codeblock lang:bash %}
# 执行.jar格式文件
$ java -jar filename.jar
# 指定内存运行.jar格式文件
$ java -Xmx2000M -jar filename.jar</p>

<h1 id="jnlp">执行.jnlp格式文件</h1>
<p>$ javaws filename.jnlp
{% endcodeblock %}</p>

<h2 id="section-25">8. 查看文件</h2>

<p>{% codeblock lang:bash %}
# 将文件直接打印在屏幕上
$ cat filename  <br />
{% endcodeblock %}</p>

<h2 id="section-26">9. 查看系统</h2>

<p>{% codeblock lang:bash %}
# 32位还是64位
$ uname -a</p>

<h1 id="section-27">查询操作系统发行版本</h1>
<p># lsb_release -a
{% endcodeblock %}</p>

<h2 id="section-28">10. 查看当前路径</h2>

<p>{% codeblock lang:bash %}
$ pwd
{% endcodeblock %}</p>

<h2 id="section-29">11. 查看某个程序/库的安装路径</h2>

<p>{% codeblock lang:bash %}
# 比如查看R的安装位置
$ which R</p>

<h1 id="section-30">查看某个文件的位置</h1>
<p>$ whereis filename
{% endcodeblock %}</p>

<h2 id="section-31">12. 查看一个命令的文档帮助</h2>

<p>{% codeblock lang:bash %}
# 比如man R
$ man commandname
{% endcodeblock %}</p>

<h2 id="section-32">13. 批量处理文件</h2>

<p>{% codeblock lang:bash %}
# 删除满足条件的数据
$ find ./ -name ‘*’ | xargs rm -rf</p>

<h1 id="section-33">移动大数据量的文件.</h1>
<p>$ find ./ -name “*.gif” | xargs -i mv {} /filePath/ 
{% endcodeblock %}</p>

<h2 id="pathldlibrarypath">14. 修改PATH和LD_LIBRARY_PATH</h2>

<p>假设我们程序的绝对路径是<code class="language-bash">/opt/arbtest/arb</code>
两种方法:</p>

<ul>
  <li>直接命令行运行</li>
</ul>

<p>{% codeblock lang:bash %}
# export PATH=$PATH:/opt/arbtest
{% endcodeblock %}</p>

<p>这种方法当前有效，重启之后就失效了。</p>

<p>{% codeblock lang:bash %}
# 查看修改该好的PATH
$ export
{% endcodeblock %}
* 修改<code class="language-bash">/etc/profile</code>（系统设置，任何用户都可使用）或者<code class="language-bash">~/.bashrc</code>（当前用户）文件。
向这两个文件中添加<code class="language-bash">export PATH=$PATH:/opt/arbtest</code>或者<code class="language-bash">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/arbtest</code>。</p>

<p>{% codeblock lang:bash %}
# 载入修改好的文件</p>

<h1 id="rootprofile">载入root权限profile</h1>
<p># source /etc/profile</p>

<h1 id="bashrc">载入当前用户.bashrc文件</h1>
<p>$ source ~/.bashrc</p>

<h1 id="section-34">查看修改好的路径</h1>
<p>$ echo $PATH
{% endcodeblock %}</p>

<h2 id="section-35">15. 定向输入输出</h2>

<p>禁止屏幕输出，即将屏幕输出导入Linux的无底洞 <code class="language-bash">/dev/null</code>，比如</p>

<p>{% codeblock lang:bash %}
$ cat myFile &gt; /dev/null
{% endcodeblock %}</p>

<p>此时，导入的是标准屏幕输出（标号为1）stdout。如果要导入标准错误输出（标号为2）stderr，执行</p>

<p>{% codeblock lang:bash %}
$ cat myFile 2 &gt; /dev/null
{% endcodeblock %}</p>

<p>如果将两种输出全部导入<code class="language-bash">/dev/null</code>，执行</p>

<p>{% codeblock lang:bash %}
# 最后的”2&gt;$1”表示2的操作等同于1
$ cat myFile &gt; /dev/null 2&gt;$1
{% endcodeblock %}</p>

<h2 id="section-36">16. 更改文件权限和所有者</h2>

<p>使用命令<code class="language-bash">chmod</code>更改文件权限。</p>

<ul>
  <li>
    <p><code class="language-bash">u</code>：所有者（user）</p>
  </li>
  <li>
    <p><code class="language-bash">g</code>：群组（group）</p>
  </li>
  <li>
    <p><code class="language-bash">o</code>：其他人（others）</p>
  </li>
  <li>
    <p><code class="language-bash">a</code>：所有人（all）</p>
  </li>
  <li>
    <p><code class="language-bash">r</code>：表示可读（read），对应数值4</p>
  </li>
  <li>
    <p><code class="language-bash">w</code>：表示可写（write），对应数值2</p>
  </li>
  <li>
    <p><code class="language-bash">x</code>：表示可执行（excute），对应数值1</p>
  </li>
  <li>
    <p><code class="language-bash">-</code>：表示什么操作都不行，对应数值0</p>
  </li>
</ul>

<p>{% codeblock lang:bash %}
# 比如rw-rw-r–对应664
$ chomd 664 filename
{% endcodeblock %}</p>

<p>使用命令<code class="language-bash">chown</code>更改文件所有者：</p>

<p>{% codeblock lang:bash An instance of using chown%}
# chown -R myOwner:myGroup fileName
{% endcodeblock %}</p>

<h2 id="section-37">17.更改文件时间戳</h2>

<p>{% codeblock lang:bash %}
# 更新myfile的存取和修改时间；如果myfile不存在，则创建该文件
$ touch filename
{% endcodeblock %}</p>

<h2 id="ntfs">18. 挂载NTFS分区</h2>

<p>CentOS需要手动挂在NTFS分区，下载并安装<a href="http://www.tuxera.com/community/ntfs-3g-download/">NTFS-3G</a>，安装方法：</p>

<p>{% codeblock lang:bash %}
# ./configure 
# make
# make install 
{% endcodeblock %}</p>

<p>查找NTFS分区路径，此处假定为<code class="language-bash">/dev/sta1</code>：</p>

<p>{% codeblock lang:bash %}
# 查看硬盘分区
# fdisk -l</p>

<h1 id="ntfs-1">挂载NTFS分区</h1>
<p># mkdir /mnt/NTFStest
# mount -t ntfs-3g /dev/sta1 /mnt/NTFStest</p>

<h1 id="section-38">卸载分区</h1>
<p># umount /mnt/NTFStest
{% endcodeblock %}</p>

<p>如果需要自动挂载ntfs分区，首先要查看分区信息，比如uuid</p>

<p>{% codeblock lang:bash %}
# blkid
{% endcodeblock %}</p>

<p>之后修改<code class="language-bash">/etc/fstab</code>，添加需要挂载的分区</p>

<p>{% codeblock lang:bash %}
UUID=12D345251F34 /media/D ntfs defaults 0 0
{% endcodeblock %}</p>

<h2 id="yum">19. yum服务相关</h2>

<p>以下命令都可以配合<code class="language-bash">grep</code>使用</p>

<p>{% codeblock lang:bash %}
# 安装最快源插件
# yum install yum-plugin-fastestmirror</p>

<h1 id="section-39">安装并行下载工具</h1>
<p># yum install yum-axelget</p>

<h1 id="yum-1">终止yum安装</h1>
<p># rm -f /var/run/yum.pid</p>

<h1 id="section-40">查询包</h1>
<p># yum search pkg</p>

<h1 id="section-41">重新安装包</h1>
<p># yum reinstall pkg</p>

<h1 id="section-42">升级包</h1>
<p># yum update pkg</p>

<h1 id="section-43">卸载包</h1>
<p># yum remove pkg</p>

<h1 id="section-44">查询已安装包信息</h1>
<p># yum info pkg</p>

<h1 id="section-45">查看仓库包列表</h1>
<p># yum list pkg*</p>

<h1 id="section-46">查看已安装的包</h1>
<p># yum list installed
{% endcodeblock %}</p>

<h2 id="section-47">20. 修改配置文件</h2>

<p>可以使用多种文本编辑器，最常用的是<a href="http://www.gnu.org/software/emacs/">Emacs</a>和<a href="http://www.vim.org/">Vim</a>，使用方法直<code class="language-bash">emacs</code>或者<code class="language-bash">vim</code>和文件名即可。</p>

<p>{% codeblock lang:bash %}
# 修改Apache服务器配制文件
$ vim httpd.conf
$ emacs httpd.conf
{% endcodeblock %}</p>

<h2 id="section-48">21. 用户管理</h2>

<p>{% codeblock lang:bash %}
# 查看用户 
$ w 
$ who
# 超过500为后建用户
$ cat /etc/passwd</p>

<h1 id="section-49">新建用户</h1>
<p>$ useradd usrname</p>

<h1 id="section-50">新建用户设置密码</h1>
<p>$ passwd usrname newpasswd</p>

<h1 id="section-51">删除用户</h1>
<p>$ userdel -r usrname</p>

<h1 id="section-52">查看用户登陆</h1>
<p>$ last
$ last usrname</p>

<h1 id="section-53">查看当前任务</h1>
<p>$ top
{% endcodeblock %}</p>

<h2 id="debrpm">22. deb和rpm包互转</h2>

<ul>
  <li>第一种方法是使用<a href="http://joeyh.name/code/alien/">alien</a></li>
</ul>

<p>{% codeblock lang:bash %}
# deb转换为rpm
$ alien -r filename.deb</p>

<h1 id="rpmdeb">rpm转换成deb</h1>
<p>$ alien -d filename.rpm
{% endcodeblock %}</p>

<ul>
  <li>第二种方法是直接使用<code class="language-bash">apt</code>，非常方便，配置方法如下</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install apt
# apt-get update
# apt-get pkg
{% endcodeblock %}</p>

<h2 id="section-54">23. 查看和终止进程</h2>

<p>{% codeblock lang:bash %}
# 查看进程树
$ pstree -p</p>

<h1 id="section-55">看全部进程</h1>
<p>$ ps -A</p>

<h1 id="section-56">强制终止进程</h1>
<p>$ kill -9 7473</p>

<h1 id="section-57">释放内存</h1>
<p>$ free -m
{% endcodeblock %}</p>

<h2 id="section-58">24. 查看网络有监听的端口</h2>

<p>{% codeblock lang:bash %}
$ netstat -lntp
{% endcodeblock %}</p>

<h2 id="ssh">25. SSH服务行</h2>

<p>断开SSH终端，仍需要程序后台执，则使用<code class="language-bash">nohup</code>命令</p>

<p>{% codeblock lang:bash %}
$ nohup /filepath/testScript.py 
{% endcodeblock %}</p>

<p>解决SSH终端链接一段时间后自动断开，修改文件<code class="language-bash">/etc/ssh/sshd_config</code>，找到<code class="language-bash">ServerAliveInterval</code>语句，将其注释去掉，改为</p>

<p>{% codeblock lang:bash %}
ServerAliveInterval 60
{% endcodeblock %}</p>

<h2 id="section-59">26. 查看某一个库文件的位置</h2>

<p>{% codeblock lang:bash %}
$ locate libGLU.so
{% endcodeblock %}</p>

<h2 id="rpm">27. rpm包</h2>

<p>{% codeblock lang:bash %}
# 安装rpm包 
# rpm -ivh pkg.rpm</p>

<h1 id="rpm-1">更新rpm包</h1>
<p># rpm -Uvh pkg.rpm</p>

<h1 id="section-60">查看已经安装的包</h1>
<p># rpm -qa | grep pkg.rpm</p>

<h1 id="rpm-2">卸载rpm包</h1>
<p># rpm -e pkg
{% endcodeblock %}</p>

<h2 id="centos-6--python-27">28. Centos 6 升级 python 2.7</h2>

<p>参考网址 <a href="https://github.com/0xdata/h2o/wiki/Installing-python-2.7-on-centos-6.3.-Follow-this-sequence-exactly-for-centos-machine-only">1</a>, <a href="http://toomuchdata.com/2012/06/25/how-to-install-python-2-7-3-on-centos-6-2/">2</a></p>

<h2 id="cpu">29. CPU信息</h2>

<p>{% codeblock lang:bash %}
# 查询CPU信息
$ lscpu</p>

<h1 id="cpu-1">物理CPU个数</h1>
<p>$ grep ‘physical id’ /proc/cpuinfo | sort -u | wc -l</p>

<h1 id="section-61">核心个数</h1>
<p>$ grep ‘core id’ /proc/cpuinfo | sort -u | wc -l</p>

<h1 id="section-62">线程个数</h1>
<p>$ grep ‘processor’ /proc/cpuinfo | sort -u | wc -l
$ nproc
{% endcodeblock %}</p>

<p>查看CPU温度</p>

<p>{% codeblock lang:bash %}
# 安装lm_sensors工具
# yum install lm_sensors
$ sensors
{% endcodeblock %}</p>

<h2 id="section-63">30. 查询文件和文件夹大小</h2>

<p>{% codeblock lang:bash %}
$ du -h myfile
$ du -h filepath
{% endcodeblock %}</p>

<h2 id="section-64">31. 查看内存情况</h2>

<p>{% codeblock lang:bash %}
# 查看内存使用情况
$ free</p>

<h1 id="section-65">物理内存</h1>
<p># dmidecode -t memory | grep Size
{% endcodeblock %}</p>

<h2 id="section-66">32. 查看文件头部和尾部</h2>

<p>{% codeblock lang:bash %}
# 头部
$ head -5 file</p>

<h1 id="section-67">尾部</h1>
<p>$ tail -7 file
{% endcodeblock %}</p>

<h2 id="section-68">33. 下载命令</h2>

<p>{% codeblock lang:bash %}
$ wget -c -t 0 -w 30 httplink
{% endcodeblock %}</p>

<ul>
  <li>
    <p><code class="language-bash">-c</code>：表示接着下载没下载的文件</p>
  </li>
  <li>
    <p><code class="language-bash">-t</code>：表示尝试连接次数</p>
  </li>
  <li>
    <p><code>0</code>：表示不停尝试</p>
  </li>
  <li>
    <p><code class="language-bash">-w</code>：表示每两次尝试的时间间隔</p>
  </li>
</ul>

<h2 id="section-69">34. 开机启动</h2>

<p>{% codeblock lang:bash %}
# 开机启动httpd
# chkconfig httpd on
# 关闭httpd
# chkconfig httpd off
# 开启启动列表
# chkconfig –list
{% endcodeblock %}</p>

<h2 id="section-70">35. 系统运行日志</h2>

<p>{% codeblock lang:bash %}
# cat /var/log/messages
{% endcodeblock %}</p>

<h2 id="section-71">36. 获取系统时间</h2>

<p>{% codeblock lang:bash Time %}
# 获取文件时间
$ stat filename | grep Modify | awk ‘{print $2, $3}</p>

<h1 id="section-72">获取当前时间</h1>
<p>$ date
$ date -d ‘-1 day’
$ date -d ‘+1 hour’
$ date -d yesterday ‘+%F %T’
$ date -d tomorrow +%s</p>

<h1 id="section-73">获取本月日历</h1>
<p>$ cal
{% endcodeblock %}</p>

<h2 id="section-74">37. 定时执行程序</h2>

<p>使用cron，首先开启：</p>

<p>{% codeblock lang:bash Start Crond %}
# 开启
# service crond start
# 重启
# service crond restart
{% endcodeblock %}</p>

<p>建立描述文件，比如<code class="language-bash">testCron</code></p>

<p>{% codeblock lang:bash Description file %}
# 每半个小时执行command
0,30 * * * * commmand
{% endcodeblock %}</p>

<p>提交</p>

<p>{% codeblock lang:bash Submit cron files %}
# 提交
$ crontab testCron
# 查看
$ crontab -l
# 删除
$ crontab -r
# 编辑
$ crontab -e
{% endcodeblock %}</p>

<h3 id="section-75">参考资料</h3>

<ul>
  <li>
    <p><a href="http://blog.csdn.net/dqswuyundong/article/details/5970004">大量文件操作</a></p>
  </li>
  <li>
    <p><a href="http://www.cnblogs.com/amboyna/archive/2008/03/08/1096024.html">修改PATH</a></p>
  </li>
  <li>
    <p>挂载NTFS分区：<a href="http://www.ha97.com/2832.html">1</a>, <a href="http://blog.csdn.net/zouyongjin/article/details/6439232">2</a></p>
  </li>
  <li>
    <p>rpm下的apt：<a href="http://wiki.debian.org.hk/w/Install_APT_in_Fedora_Linux">1</a>, <a href="http://yinbiao.blog.51cto.com/2765456/511542">2</a></p>
  </li>
  <li>
    <p><a href="http://www.liukai.cn/in-linux-setup-rar-for-linux/">Linux使用rar</a></p>
  </li>
  <li>
    <p><a href="http://www.ibm.com/developerworks/cn/linux/l-cn-nohup/">后台执行程序</a></p>
  </li>
  <li>
    <p><a href="http://www.dayuer.com/freebsd-tooltips/wget_help">wget使用</a></p>
  </li>
  <li>
    <p><a href="http://www.cyberciti.biz/tips/how-can-i-zipping-and-unzipping-files-under-linux.html">zip/unzip</a></p>
  </li>
  <li>
    <p><a href="http://seisman.info/linux-environment-for-seismology-research.html">用CentOS 7打造合适的科研环境</a></p>
  </li>
  <li>
    <p><a href="http://blog.sina.com.cn/s/blog_c078bab701015sih.html">解决SSH闲置时间过长中断命令执行</a></p>
  </li>
  <li>
    <p><a href="http://codingstandards.iteye.com/blog/1157513">Linux时间</a></p>
  </li>
  <li>
    <p><a href="http://www.linuxsong.org/2010/09/shell-date-compare/">http://www.linuxsong.org/2010/09/shell-date-compare/</a></p>
  </li>
  <li>
    <p><a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/crontab.html">crontab 定时任务</a></p>
  </li>
</ul>

<h3 id="section-76">更新记录</h3>

<p>2015年9月1日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux常用软件集锦]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2010/07/08/linux-software/"/>
    <updated>2010-07-08T11:09:31+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2010/07/08/linux-software</id>
    <content type="html"><![CDATA[<p>本文收集了一些好用或者好玩的Linux软件，安装方法使用<a href="https://getfedora.org/">Fedora</a>系统示例。</p>

<h2 id="section">1. 添加常用源</h2>

<ul>
  <li>
    <p>添加<a href="http://rpmfusion.org/Configuration">rpmfusion</a>的free和nonfree源。</p>
  </li>
  <li>
    <p>添加<a href="http://repo.fdzh.org/">FZUG</a>源。一个中文Fedora的源和社区，在Fedora下安装搜狗输入法、有道词典、百度云客户端等。</p>
  </li>
</ul>

<h2 id="section-1">2. 辅助安装工具</h2>

<ul>
  <li>fed</li>
</ul>

<p><a href="http://folkswithhats.org/">fedy</a>是一个辅助在Fedora系统下，更容易安装Skypy、Chrome、Steam等的工具。</p>

<!--more-->

<h2 id="section-2">3. 影音</h2>

<ul>
  <li>VLC</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install vlc
{% endcodeblock %}</p>

<ul>
  <li>Mplayer</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install mplayer-gui xine smplayer
{% endcodeblock %}</p>

<ul>
  <li>录音工具Audacity</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install audacity
{% endcodeblock %}</p>

<ul>
  <li>屏幕录制RecordMyDesktop</li>
</ul>

<p>Linux下有很多录制屏幕的软件，推荐RecordMyDesktop。可以自己选定屏幕区域和大小，也可以把界面缩小到屏幕的下方，变成一个小的按钮，以方便操作。录制的文件为ogv格式，推荐使用VLC打开。</p>

<p>{% codeblock lang:bash %}
# 安装方法
# yum install recordmydesktop</p>

<h1 id="section-3">使用方法</h1>
<p>$ qt-recordMyDesktop
{% endcodeblock %}</p>

<h2 id="section-4">4. 办公</h2>

<ul>
  <li>字典GoldenDict</li>
</ul>

<p>Linux下曾经风靡一时的字典StarDict，现在有了更加先进和方便的接班人<a href="http://goldendict.org/">GoldenDict</a> 。GoldenDict的主要特点有：</p>

<ol>
  <li>
    <p>字典库丰富;</p>
  </li>
  <li>
    <p>直接查询维基百科和其他网络字典;</p>
  </li>
  <li>
    <p>支持字典分类、发音（字典库包括发音）、光标取词等。</p>
  </li>
</ol>

<p><strong>安装方法：</strong></p>

<p>参考GoldenDict的<a href="https://github.com/goldendict/goldendict">GitHub安装介绍</a>，字典发音需要安装Mplayer，Fedora安装可能依赖的库如下：</p>

<p>{% codeblock lang:bash %}
# dnf install bzip2-devel gcc-c++ git hunspell-devel \
libvorbis-devel libXtst-devel phonon-devel \
qt-devel qtwebkit ffmpeg ffmpeg-devel \
lzo lzo-devel eb eb-devel libao libao-devel \
qtwebkit-devel libtiff-devel lzma-devel</p>

<h1 id="section-5">安装字典</h1>
<p>$ git clone git://github.com/goldendict/goldendict.git
$ cd goldendict
$ qmake-qt4 “CONFIG+=zim_support” &amp;&amp; make
# make install
{% endcodeblock %}</p>

<p><strong>添加离线字典</strong></p>

<ul>
  <li>安装dictd-server</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install dictd-server
{% endcodeblock %}</p>

<ul>
  <li>dsl文件处理</li>
</ul>

<p>GoldenDict只能识别dsl格式的字典文件，所以先进行处理。一般得到dsl文件内容如下：</p>

<p>{% raw %}
<code>
mydict.dsl
mydict.bmp
mydict.ann
mydict.images.rar
mydict.sounds.rar
</code>
{% endraw %}</p>

<blockquote>
  <p>压缩dsl文件：</p>
</blockquote>

<p>{% codeblock lang:bash %}
# dictzip mydict.dsl 
{% endcodeblock %}</p>

<blockquote>
  <p>解压images和sounds的所有文件到同一个文件夹，之后将其<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=48&amp;t=316122&amp;start=0">全部压缩到一个文件夹中</a>：</p>
</blockquote>

<p>{% codeblock lang:bash %}
# find . -name “*” -print | zip -9 ../mydict.dsl.dz.files.zip -@
{% endcodeblock %}</p>

<blockquote>
  <p>最后，得到如下文件，使用GoldenDict载入即可，注意文件的命名都统一为<code>mydict</code>：</p>
</blockquote>

<p>{% raw %}
<code>
mydict.dsl.dz
mydict.dsl.dz.files.zip
mydict.ann
mydict.bmp
</code>
{% endraw %}</p>

<p>以下是两张在GoldenDict中查询维基百科和大英百科的效果图。</p>

<p><img src="http://yulongniu.bionutshell.org/images/linux_software_goldendict1.png" width="500" height="700" title="image" alt="images" /></p>

<p><img src="http://yulongniu.bionutshell.org/images/linux_software_goldendict2.png" width="500" height="700" title="image" alt="images" /></p>

<ul>
  <li>chm阅读器</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install kchmviewer
{% endcodeblock %}</p>

<ul>
  <li>文档注释工具Xournal</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install xournal
{% endcodeblock %}</p>

<ul>
  <li>ePub文件阅读器</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install fbreader
{% endcodeblock %}</p>

<ul>
  <li>djvu文件阅读器</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install djvulibre
{% endcodeblock %}</p>

<ul>
  <li>Fedora 安装搜狗输入法</li>
</ul>

<p>参考<a href="http://www.8dlive.com/post/199.html">fedora 21 安装sogoupinyin 安装搜狗拼音</a></p>

<ul>
  <li>unrar解压工具</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install unrar
{% endcodeblock %}</p>

<ul>
  <li>截屏工具KSnapshot</li>
</ul>

<p>{% codeblock lang:bash %}
# yum install ksnapshot
{% endcodeblock %}</p>

<ul>
  <li>图片转换工具<a href="http://www.imagemagick.org/">ImageMagick</a></li>
</ul>

<p>{% codeblock lang:bash %}
# yum install ImageMagick</p>

<h1 id="section-6">设置转换图片质量，1质量最低，100质量最高</h1>
<p>$ convert -quality 100 input.pdf output.jpg</p>

<h1 id="px">设置像素，比如转换的是500px</h1>
<p>$ convert -density 500 input.pdf output.jpg
{% endcodeblock %}</p>

<ul>
  <li>TeX文本编辑器</li>
</ul>

<p><a href="http://texstudio.sourceforge.net/">TeXstudio</a>支持自动补全、代码高亮、错误提示、文档预览、图片表格公式生成、LaTeX/PDFLaTeX/XeLaTeX。甚至还有一个“放大镜”，放大观察生成文档字体和公式细节。TeXstudio仍然保持持续更新的态势，以下是安装方法和一个阅览图。</p>

<p>{% codeblock lang:bash %}
# yum install texstudio
{% endcodeblock %}</p>

<p><img src="http://yulongniu.bionutshell.org/images/linux_software_texstudio.jpg" width="500" height="700" title="image" alt="images" /></p>

<ul>
  <li>PDF文件编辑工具</li>
</ul>

<p><a href="http://community.coherentpdf.com/">cpdf</a>用于对PDF文件执行分割、合并和压缩等操作。下载预编译版本使用。</p>

<p>{% codeblock lang:bash Example of using cpdf%}
# 选择第一页输出
$ cpdf pdfFile.pdf 1 -o outPdfFile.pdf
{% endcodeblock %}</p>

<h2 id="windows">5. 模拟Windows程序</h2>

<ul>
  <li>Wine</li>
</ul>

<p>Wine可以尽可能模拟Window软件</p>

<p>{% codeblock lang:bash %}
# yum install wine
{% endcodeblock %}</p>

<p>同时可能需要Winetricks辅助</p>

<p>{% codeblock lang:bash %}
# wget http://www.kegel.com/wine/winetricks
# chmod +x winetricks
# mv winetricks /usr/local/bin
# winetricks mfc42 
{% endcodeblock %}</p>

<ul>
  <li>PlayOnLinux</li>
</ul>

<p>{% codeblock lang:bash %}
# wget http://rpm.playonlinux.com/playonlinux.repo
# mv playonlinux.repo /etc/yum.repos.d/
# yum update
# yum install playonlinux
{% endcodeblock %}</p>

<h2 id="section-7">6. 驱动程序</h2>

<ul>
  <li>Fedora安装NVIDIA显卡驱动</li>
</ul>

<p>安装过程参考<a href="http://blog.csdn.net/icemango1209/article/details/18766353">Fedora 20安装Nvidia 显卡驱动</a>。需要注意关闭窗口界面，从而进入完全字符界面操作。</p>

<p>{% codeblock lang:bash %}
# 进入字符界面
# init 3</p>

<h1 id="section-8">进入图形界面</h1>
<p># init 5
{% endcodeblock %}</p>

<h2 id="samsung-ssd">7. Samsung SSD</h2>

<p>三星固态硬盘支持Linux版本的<a href="http://www.samsung.com/global/business/semiconductor/minisite/SSD/global/html/support/server_downloads.html">Magician DC</a>。</p>

<p>{% codeblock lang:bash Samsung SSD Magician %}
# 列出SSD
# magician -L</p>

<h1 id="ssd">列出指定SSD详细信息</h1>
<p># magician -d 0 -I</p>

<h1 id="ssdsmart">列出指定SSD的S.M.A.R.T信息</h1>
<p># magician -d 0 -S
# 列出制定SSD的温度
# magician -d 0 -S -t</p>

<h1 id="trim">trim</h1>
<p># magician -d 0 -T
{% endcodeblock %}</p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li><a href="http://xmodulo.com/convert-pdf-files-to-jpg-format-on-linux.html">pdf转换jpg/jpeg文件</a></li>
</ul>

<h3 id="section-9">更新记录</h3>

<p>2015年12月17日</p>

]]></content>
  </entry>
  
</feed>
