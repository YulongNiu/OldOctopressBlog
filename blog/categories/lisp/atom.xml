<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lisp | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2018-02-09T00:58:12+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spacemacs使用记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/09/30/spacemacs-tutorial/"/>
    <updated>2015-09-30T16:31:09+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/09/30/spacemacs-tutorial</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a>结合了Vim和Emacs，而且定制了各种好用的设置，极大地减轻了Emacs的配置负担。推荐使用<code>hybrid</code>模式，这样浏览代码时可以使用Vim快捷键，进入Insert mode后使用Emacs快捷键。<code>hybrid</code>模式还有一个好处，编辑时方便汉字输入。Vim模式的先导键是<code>SPC</code>，在Emacs模式下是<code>M-m</code>。</p>

<!--more-->

<h2 id="vim">1. Vim快捷键记录</h2>

<p>在Spacemacs中<code>SPC-h-T</code>进入Emacs Evil快速入门。</p>

<h3 id="section">1.1 移动</h3>

<ul>
  <li>
    <p><code>h</code>：前</p>
  </li>
  <li>
    <p><code>j</code>：上</p>
  </li>
  <li>
    <p><code>k</code>：下</p>
  </li>
  <li>
    <p><code>l</code>：后</p>
  </li>
  <li>
    <p><code>gg</code>：</p>

    <ul>
      <li>
        <p>文档开始位置。</p>
      </li>
      <li>
        <p><code>G</code>：文档结束位置。</p>
      </li>
      <li>
        <p><code>:[number]</code>：跳转到制定行。</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="section-1">1.2 插入和替换</h3>

<ul>
  <li>
    <p><code>i</code>：</p>

    <ul>
      <li>
        <p>在<strong>光标前</strong>的位置，进入insert mode，进行编辑。</p>
      </li>
      <li>
        <p><code>ESC</code>或者<code>C-[</code>退出insert mode。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>r</code>：替换<strong>光标所在位置</strong>的单个字符。</p>
  </li>
  <li>
    <p><code>[number] d object</code>：</p>

    <ul>
      <li>
        <p><code>cw</code>或<code>ce</code>：从光标处删除整个单词，并进入insert mode。</p>
      </li>
      <li>
        <p><code>c$</code>：从光标处删除整行，并进入insert mode。</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="section-2">1.3 搜索和替换</h3>

<ul>
  <li>
    <p><code>\</code>：</p>

    <ul>
      <li>
        <p><code>\searchWord</code>：输入搜索内容，<code>n</code>向下搜索，<code>N</code>向上搜索。</p>
      </li>
      <li>
        <p><code>%</code>：在各种括号跳转。</p>
      </li>
      <li>
        <p><code>:s/old/new</code>：替换第一个匹配；<code>:s/old/new/g</code>：替换当前行匹配；<code>:#,#s/old/new/g</code>：替换行（<code>#</code>为行号）之间匹配；<code>:%s/old/new/g </code>：替换全文匹配。</p>
      </li>
      <li>
        <p><code>:%s/old/new/gc</code>：替换全文匹配，每一个匹配会提示是否匹配（输入<code>y</code>表示执行替换，<code>n</code>表示跳过匹配）。</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="section-3">1.4 删除、剪切和粘贴</h3>

<ul>
  <li>
    <p><code>x</code>：删除<strong>光标所在位置</strong>的单个字符。</p>
  </li>
  <li>
    <p><code>[number] d object</code>：</p>

    <ul>
      <li>
        <p><code>dw</code>：从光标处删除整个单词，包括单词后的空格。</p>
      </li>
      <li>
        <p><code>de</code>：从光标处删除整个单词，不包括空格。</p>
      </li>
      <li>
        <p><code>d$</code>：从光标处删除整行。</p>
      </li>
      <li>
        <p><code>dd</code>：删除光标所在的整行。</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code>p</code>：在<strong>光标后</strong>的位置粘贴剪切（<code>d</code>类和<code>x</code>操作）的内容。</p>
  </li>
</ul>

<h3 id="section-4">1.5 撤销</h3>

<ul>
  <li>
    <p><code>u</code>：撤销</p>
  </li>
  <li>
    <p><code>Ctr-R</code>：反撤销</p>
  </li>
</ul>

<h2 id="section-5">2. 常用快捷键</h2>

<p>常用的快捷键参考使用layer的说明文档。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs配置C语言编程环境]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/12/02/emacs-config-c/"/>
    <updated>2014-12-02T06:36:41+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/12/02/emacs-config-c</id>
    <content type="html"><![CDATA[<p>有很多优秀的C语言IDE用来实现高效的编程，比如<a href="https://www.jetbrains.com/clion/">CLion</a>。目前，CLion还在处于公开测试阶段，可以下载试用。本文介绍在Emacs下配置C/C++编程环境。</p>

<!--more-->

<h2 id="section">1. 安装和基本配置</h2>

<h3 id="section-1">1.1. 安装需求</h3>

<ul>
  <li>安装<a href="http://www.gnu.org/software/global/">GNU Global</a></li>
</ul>

<p>{% codeblock lang:bash %}
# dnf install global llvm llvm-devel clang* 
{% endcodeblock %}</p>

<ul>
  <li>安装Emacs的<code>helm</code>、<code>helm-swoop</code>、<code>helm-gtags</code>、<code>sr-speedbar</code>、<code>smartparens</code>、<code>google-c-style</code>、<code>auto-complete</code>、<code>auto-complete-c-headers</code>、<code>auto-complete-clang</code>包。</li>
</ul>

<h3 id="emacs">1.2. Emacs配置</h3>

<p>将<a href="#c-mode-config">附加环境设置</a>添加到Emacs设置文件，比如<code class="language-bash">~/.emacs</code>，此环境配置参考<a href="https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el">tuhdo</a>。</p>

<h2 id="section-2">2. 文件操作</h2>

<h3 id="section-3">2.1. 查找</h3>

<ul>
  <li>当前buffer查找函数、类的定义</li>
</ul>

<blockquote>
  <p><code>C-c h i</code>（helm-semantic-or-imenu）：可以输入部分关键词、空格等，以快速搜索。</p>
</blockquote>

<ul>
  <li>当前project查找定义</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>M-.</code>（helm-gtags-dwim）：输入查找内容。<code>M-,</code>（tags-loop-continue）：返回上一个buffer。</p>
    </li>
    <li>
      <p><code>C-j</code>（helm-gtags-select）：列出当前project所有定义，并且查找。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>查找引用</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>C-c g r</code>（helm-gtags-find-rtags）：光标停留在函数内部，查找该函数名；如果光标停留在函数名，查找该函数的所有引用。</p>
    </li>
    <li>
      <p><code>C-c g s</code>（helm-gtags-find-symbol）：光标停留在变量时的查找。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>查找当前函数引用的函数</li>
</ul>

<blockquote>
  <p><code>C-c g a</code>（helm-gtags-tags-in-this-function）</p>
</blockquote>

<ul>
  <li>查找文件</li>
</ul>

<blockquote>
  <p><code>C-c g P</code>（elm-gtags-find-files）</p>
</blockquote>

<h3 id="section-4">2.2. 列出源码树</h3>

<ul>
  <li>开启和关闭</li>
</ul>

<blockquote>
  <p><code>M-x sr-speedbar-open RET</code>：开启。<code>M-x sr-speedbar-close RET</code>：关闭。</p>
</blockquote>

<ul>
  <li>操作</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>b</code>和<code>f</code>切换到当前buffer和所有文件列表。</p>
    </li>
    <li>
      <p><code>=</code>：展开。<code>g</code>：收回。</p>
    </li>
    <li>
      <p><code>U</code>：上一级目录。</p>
    </li>
  </ol>
</blockquote>

<h3 id="section-5">2.3 代码补全</h3>

<p>代码补全使用<code>auto-complete</code>、<code>auto-complete-c-headers</code>、<code>semantic</code>包。在使用<code>auto-complete-c-headers</code>自动补全头文件名称时，使用以下命令获得头文件路径：</p>

<p>{% codeblock lang:bash %}
$ gcc -xc -E -v -
$ gcc -xc++ -E -v -
{% endcodeblock %}</p>

<p><img src="http://yulongniu.bionutshell.org/images/emacs_config_c_autocomplete.png" width="900" height="900" title="image" alt="images" /></p>

<h2 id="debug">3. 编译和debug</h2>

<h3 id="gcc">3.1 使用gcc编译</h3>

<p>使用<code>M-x compile</code>对源文件进行编译链接；或者开启ansi-term模式<code>M-x ansi-term</code>，进入shell操作。一个直接编译–汇编–链接的简单例子：</p>

<p>{% codeblock lang:bash %}
$ gcc helloworld.c -o helloworld
$ ./helloworld
{% endcodeblock %}</p>

<h2 id="section-6">附加内容</h2>

<p><a id="c-mode-config">C/C++的Emacs编程环境设置</a></p>

<p>{% codeblock Emacs configure lang:emacs-lisp %}</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;
;set up helm
;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘helm-config)
(require ‘helm-grep)
;; The default “C-x c” is quite close to “C-x C-c”, which quits Emacs.
;; Changed to “C-c h”. Note: We must set “C-c h” globally, because we
;; cannot change <code>helm-command-prefix-key' once </code>helm-config’ is loaded.
(global-set-key (kbd “C-c h”) ‘helm-command-prefix)
(global-unset-key (kbd “C-x c”))</p>

<p>(define-key helm-map (kbd “<tab>&#8221;) &#8216;helm-execute-persistent-action) ; rebihnd tab to do persistent action
(define-key helm-map (kbd &#8220;C-i&#8221;) &#8216;helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd &#8220;C-z&#8221;)  &#8216;helm-select-action) ; list actions using C-z</tab></p>

<p>(define-key helm-grep-mode-map (kbd “<return>&#8221;)  &#8216;helm-grep-mode-jump-other-window)
(define-key helm-grep-mode-map (kbd &#8220;n&#8221;)  &#8216;helm-grep-mode-jump-other-window-forward)
(define-key helm-grep-mode-map (kbd &#8220;p&#8221;)  &#8216;helm-grep-mode-jump-other-window-backward)</return></p>

<p>(when (executable-find “curl”)
  (setq helm-google-suggest-use-curl-p t))</p>

<p>(setq
 helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
 helm-quick-update t ; do not display invisible candidates
 helm-ff-search-library-in-sexp t ; search for library in `require&#8217; and `declare-function&#8217; sexp.
 helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
 helm-candidate-number-limit 500 ; limit the number of displayed canidates
 helm-ff-file-name-history-use-recentf t
 helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
 helm-buffers-fuzzy-matching t          ; fuzzy matching buffer names when non-nil
                                        ; useful in helm-mini that lists buffers</prior></next></p>

<p>)</p>

<p>(add-to-list ‘helm-sources-using-default-as-input ‘helm-source-man-pages)</p>

<p>(global-set-key (kbd “M-x”) ‘helm-M-x)
(global-set-key (kbd “M-y”) ‘helm-show-kill-ring)
(global-set-key (kbd “C-x b”) ‘helm-mini)
(global-set-key (kbd “C-x C-f”) ‘helm-find-files)
(global-set-key (kbd “C-h SPC”) ‘helm-all-mark-rings)
(global-set-key (kbd “C-c h o”) ‘helm-occur)</p>

<p>(global-set-key (kbd “C-c h C-c w”) ‘helm-wikipedia-suggest)</p>

<p>(global-set-key (kbd “C-c h x”) ‘helm-register)
;; (global-set-key (kbd “C-x r j”) ‘jump-to-register)</p>

<p>(define-key ‘help-command (kbd “C-f”) ‘helm-apropos)
(define-key ‘help-command (kbd “r”) ‘helm-info-emacs)
(define-key ‘help-command (kbd “C-l”) ‘helm-locate-library)</p>

<p>;; use helm to list eshell history
(add-hook ‘eshell-mode-hook
          #’(lambda ()
              (define-key eshell-mode-map (kbd “M-l”)  ‘helm-eshell-history)))</p>

<p>;;; Save current position to mark ring
(add-hook ‘helm-goto-line-before-hook ‘helm-save-current-pos-to-mark-ring)</p>

<p>;; show minibuffer history with Helm
(define-key minibuffer-local-map (kbd “M-p”) ‘helm-minibuffer-history)
(define-key minibuffer-local-map (kbd “M-n”) ‘helm-minibuffer-history)</p>

<p>(define-key global-map [remap find-tag] ‘helm-etags-select)</p>

<p>(define-key global-map [remap list-buffers] ‘helm-buffers-list)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PACKAGE: helm-swoop                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Locate the helm-swoop folder to your path
(require ‘helm-swoop)</p>

<p>;; Change the keybinds to whatever you like :)
(global-set-key (kbd “C-c h o”) ‘helm-swoop)
(global-set-key (kbd “C-c s”) ‘helm-multi-swoop-all)</p>

<p>;; When doing isearch, hand the word over to helm-swoop
(define-key isearch-mode-map (kbd “M-i”) ‘helm-swoop-from-isearch)</p>

<p>;; From helm-swoop to helm-multi-swoop-all
(define-key helm-swoop-map (kbd “M-i”) ‘helm-multi-swoop-all-from-helm-swoop)</p>

<p>;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)</p>

<p>;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows t)</p>

<p>;; Split direcion. ‘split-window-vertically or ‘split-window-horizontally
(setq helm-swoop-split-direction ‘split-window-vertically)</p>

<p>;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color t)</p>

<p>(helm-mode 1)</p>

<p>(provide ‘setup-helm)</p>

<p>(require ‘setup-helm)
(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key “\C-cg”
 helm-gtags-suggested-key-mapping t
 )</p>

<p>(require ‘helm-gtags)
;; Enable helm-gtags-mode
(add-hook ‘dired-mode-hook ‘helm-gtags-mode)
(add-hook ‘eshell-mode-hook ‘helm-gtags-mode)
(add-hook ‘c-mode-hook ‘helm-gtags-mode)
(add-hook ‘c++-mode-hook ‘helm-gtags-mode)
(add-hook ‘asm-mode-hook ‘helm-gtags-mode)</p>

<p>(define-key helm-gtags-mode-map (kbd “C-c g a”) ‘helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd “C-j”) ‘helm-gtags-select)
(define-key helm-gtags-mode-map (kbd “M-.”) ‘helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd “M-,”) ‘helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd “C-c &lt;”) ‘helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd “C-c &gt;”) ‘helm-gtags-next-history)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;enable semantic mode
;;;;;;;;;;;;;;;;;;;;;
(require ‘cc-mode)
(require ‘semantic)</p>

<p>(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(global-semantic-idle-summary-mode 1)
(global-semantic-stickyfunc-mode 1)</p>

<p>(semantic-mode 1)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;
;open hs-mode
;;;;;;;;;;;;;;;;;;;;;;;
(add-hook ‘c-mode-common-hook   ‘hs-minor-mode)</p>

<p>;;;;;;;;;;;;;;;;;;
;google-c-style
;;;;;;;;;;;;;;;;;;
(add-hook ‘c-mode-common-hook ‘google-set-c-style)
(add-hook ‘c-mode-common-hook ‘google-make-newline-indent)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;smartparens
;;;;;;;;;;;;;;;;;;;;;
(require ‘smartparens-config)
(show-smartparens-global-mode t)
(smartparens-global-mode t)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; auto-complete
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘auto-complete)
(require ‘auto-complete-config)
(ac-config-default)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-complete-c-headers 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my:ac-c-header-init()
  (require ‘auto-complete-c-headers)
  (add-to-list ‘ac-sources ‘ac-source-c-headers)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2”)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/x86_64-redhat-linux”)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/backward”)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/include”)
  (add-to-list ‘achead:include-directories ‘“/usr/local/include”)
  (add-to-list ‘achead:include-directories ‘“/usr/include”)
  )
(add-hook ‘c++-mode-hook ‘my:ac-c-header-init)
(add-hook ‘c-mode-hook ‘my:ac-c-header-init)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-complete-clang 
;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘auto-complete-clang)
(setq ac-auto-start t)
(setq ac-quick-help-delay 0.5)
;; (ac-set-trigger-key “TAB”)
;; (define-key ac-mode-map  [(control tab)] ‘auto-complete)
(define-key ac-mode-map  [(control tab)] ‘auto-complete)
(defun my-ac-config ()
  (setq ac-clang-flags
	(mapcar(lambda (item)(concat “-I” item))
	       (split-string
		“
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/x86_64-redhat-linux
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/backward
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/include
/usr/local/include
/usr/include”
		)))
  (setq-default ac-sources ‘(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
  (add-hook ‘emacs-lisp-mode-hook ‘ac-emacs-lisp-mode-setup)
  ;; (add-hook ‘c-mode-common-hook ‘ac-cc-mode-setup)
  (add-hook ‘ruby-mode-hook ‘ac-ruby-mode-setup)
  (add-hook ‘css-mode-hook ‘ac-css-mode-setup)
  (add-hook ‘auto-complete-mode-hook ‘ac-common-setup)
  (global-auto-complete-mode t))
(defun my-ac-cc-mode-setup ()
  (setq ac-sources (append ‘(ac-source-clang ac-source-yasnippet) ac-sources)))
(add-hook ‘c-mode-common-hook ‘my-ac-cc-mode-setup)
;; ac-source-gtags
(my-ac-config)
{% endcodeblock %}</p>

<h3 id="section-7">参考资料</h3>

<ul>
  <li>
    <p><a href="http://tuhdo.github.io/c-ide.html#sec-1-3">C/C++ Development Environment for Emacs</a></p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=HTUE03LnaXA">YouTube Vedio</a></p>
  </li>
</ul>

<h3 id="section-8">更新记录</h3>

<p>2014年12月7日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs配置HTML/JS/CSS编辑环境]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2012/07/30/emacs-html-css-js/"/>
    <updated>2012-07-30T22:31:13+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2012/07/30/emacs-html-css-js</id>
    <content type="html"><![CDATA[<p>以下所有Emacs mode都使用<a href="http://yulongniu.bionutshell.org/blog/2012/06/25/emacs-extend-skills/">Emacs包安装系统</a>。</p>

<h2 id="web-mode">1. web-mode</h2>

<p><a href="http://web-mode.org/">web-mode</a> 提供了很好的wen配件（HTML、JavaScript、CSS、PHP等）的代码缩进、折叠和高亮等出色的功能。</p>

<p>有用技巧：</p>

<ul>
  <li>
    <p><code class="language-emacs-lisp">C-c C-n</code>：放在HTML标签上，在标签间跳转。</p>
  </li>
  <li>
    <p><code class="language-emacs-lisp">C-c C-f</code>：放在HTML标签上，在标签折叠。
<!--more--></p>
  </li>
</ul>

<h2 id="emmet-mode">2. emmet-mode</h2>

<p><a href="https://github.com/smihica/emmet-mode">emmet-mode</a>是<a href="http://emmet.io/">emmet</a>的Emacs扩展，取代了陈旧的<a href="http://www.emacswiki.org/emacs/ZenCoding">ZenCoding</a>。只需要输入制定的缩写，这个工具可以自动补全HTML标签。非常方便。</p>

<p>有用技巧：</p>

<ul>
  <li>
    <p><code class="language-emacs-lisp">M-x emmet-mode</code>：打开emmet-mode。</p>
  </li>
  <li>
    <p><code class="language-emacs-lisp">C-j</code>：自动补全。</p>
  </li>
</ul>

<p>补全缩写规律：</p>

<ul>
  <li>
    <p><code class="language-emacs-lisp">a</code>：a+href</p>
  </li>
  <li>
    <p><code class="language-emacs-lisp">#q</code>：div+id(q)</p>
  </li>
  <li>
    <p><code class="language-emacs-lisp">.x</code>：div+class(x)</p>
  </li>
  <li>
    <p><code class="language-emacs-lisp">#q.x</code>：div+id(q)+class(x)</p>
  </li>
</ul>

<h2 id="section">附加内容</h2>

<p>Emacs编程环境设置</p>

<p>{% codeblock lang:emacs-lisp Emacs web config %}
;;;;;;;;;;;;;;
;emmet-mode
;;;;;;;;;;;;;
(require ‘emmet-mode)
(add-hook ‘sgml-mode-hook ‘emmet-mode) ;; Auto-start on any markup modes
(add-hook ‘html-mode-hook ‘emmet-mode)
(add-hook ‘web-mode-hook ‘emmet-mode)
(add-hook ‘css-mode-hook  ‘emmet-mode)</p>

<p>;;;;;;;;;;;;;;
;web-mode
;;;;;;;;;;;;;;;
(require ‘web-mode)
(add-to-list ‘auto-mode-alist ‘(“&#46;phtml\’” . web-mode))
(add-to-list ‘auto-mode-alist ‘(“&#46;tpl&#46;php\’” . web-mode))
(add-to-list ‘auto-mode-alist ‘(“&#46;[agj]sp\’” . web-mode))
(add-to-list ‘auto-mode-alist ‘(“&#46;as[cp]x\’” . web-mode))
(add-to-list ‘auto-mode-alist ‘(“&#46;erb\’” . web-mode))
(add-to-list ‘auto-mode-alist ‘(“&#46;mustache\’” . web-mode))
(add-to-list ‘auto-mode-alist ‘(“&#46;djhtml\’” . web-mode))
(add-to-list ‘auto-mode-alist ‘(“&#46;html?\’” . web-mode))
(defun my-web-mode-hook ()
  “Hooks for Web mode.”
  (setq web-mode-markup-indent-offset 2)
)
(add-hook ‘web-mode-hook  ‘my-web-mode-hook)
{% endcodeblock %}</p>

<h3 id="section-1">参考资料</h3>

<ul>
  <li><a href="http://web-mode.org/">web-mode说明文档</a></li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2015年8月30日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs高级使用技巧]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2012/06/25/emacs-extend-skills/"/>
    <updated>2012-06-25T08:01:36+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2012/06/25/emacs-extend-skills</id>
    <content type="html"><![CDATA[<h2 id="emacs">1. Emacs配置文件位置</h2>

<p>在Fedora系统下，Emacs的配置文件位置是<code class="language-bash">~/.emacs</code>。在Emacs配置文件中添加内容后，使用<code class="language-emacs-lisp">M-x eval-buffer</code>，使当前配置生效。编译代码以加快加载速度，<code class="language-eamcs-lisp">M-x byte-compile-file</code>。</p>

<p>使用Eamcs解释器<code class="language-emacs-lisp">M-x ielm</code>。</p>

<h2 id="emacs-1">2. Emacs自带的包管理系统</h2>

<p>在Emacs24之后，自带包管理系统，使用<code class="language-bash">M-x eval-buffer</code>进入。可以添加<a href="http://melpa.org/">MELPA源</a>、<a href="https://marmalade-repo.org/">marmalade源</a>、<a href="http://elpa.gnu.org/packages/">GNU源</a>。</p>

<p>{% codeblock lang:emacs-lisp Add repositories of Emacs packages%}
(require ‘package)
(add-to-list ‘package-archives
	     ‘(“melpa” . “http://melpa.milkbox.net/packages/”))
(add-to-list ‘package-archives
	     ‘(“gnu” . “http://elpa.gnu.org/packages/”))
(package-initialize)
{% endcodeblock %}</p>

<!--more-->

<p>这样设置之后，就不需要类似<code class="language-emacs-lisp">(add-to-list 'load-path "~/.emacs.d/elpa/popup-20140207.1702/")</code>的语句了，因为Emacs会自动识别安装的包。但是，如果需要对某个包进行进一步设置，需要加上<code class="language-bash">(require 'popup)</code>之类的语句。</p>

<h2 id="section">3. 显示行号</h2>

<p>使用<code class="language-eamcs-lisp">M-x linum-mode</code>添加行号。如果需要永久显示，在Emacs配置文件中添加一下内容。</p>

<p>{% codeblock lang:emacs-lisp Show line number%}
;;;;;;;;;;;;;;;;;;;;;;;;;
;open linum mode
;;;;;;;;;;;;;;;;;;;;;;;;;
(setq linum-format “%4d \u2502”)
(add-hook ‘prog-mode-hook ‘linum-mode)
(add-hook ‘ess-mode-hook ‘linum-mode)
{% endcodeblock %}</p>

<h2 id="shell">4. 进入Shell</h2>

<p>三种方法：</p>

<ul>
  <li>
    <p><code class="language-eamcs-lisp">M-x shell</code></p>
  </li>
  <li>
    <p><code class="language-eamcs-lisp">M-x ansi-term</code></p>
  </li>
  <li>
    <p><code class="language-eamcs-lisp">M-x eshell</code></p>
  </li>
</ul>

<h2 id="root">5. root权限</h2>

<p><code class="language-eamcs-lisp">C-x C-f</code> 之后输入root密码<code class="language-eamcs-lisp">/su:root@usrname password</code></p>

<h2 id="section-1">6. 移动整体代码块</h2>

<p>选中代码块后：
向左移动2个字符：<code class="language-eamcs-lisp">C-u -2 C-x TAB</code>
向右移动4个字符：<code class="language-eamcs-lisp">C-u 4 C-x TAB</code></p>

<h2 id="section-2">7. 添加彩虹猫</h2>

<p>添加<code>nyan-mode</code>包，之后在Emacs配置文档中写入：</p>

<p>{% codeblock lang:emacs-lisp Add nyan in modeline%}
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;nyan-mode
;;;;;;;;;;;;;;;;;;;;;;;;;;
(nyan-mode t)
{% endcodeblock %}</p>

<h2 id="yasnippet">8. 自定义YASnippet模板</h2>

<p>使用<code class="language-emacs-lisp">M-x yas-new-snippet</code>，打开一个模板。比如，添加Octopress的语言高亮模板</p>

<p>{% raw %}
&#8220;`
# -<em>- mode: snippet; require-final-newline: nil -</em>-
# name: Highlight Language
# key: hl
# binding: direct-keybinding
# contributor: Yulong Niu <a href="mailto:yulong.niu@aol.com">yulong.niu@aol.com</a>
# –</p>

<p>{% codeblock lang:${1:bash} %}
$0
{% endcodeblock %}
&#8220;`
{% endraw %}</p>

<p>其中 <code class="languag-emacs-lisp">${1:bash}</code>表示光标跳转位置，编号从1开始。<code class="language-emacs-lisp">$0</code>表示光标最后停留位置。如果不需要插入空行，在模板中把多余空行去掉。</p>

<p>自定义的模板建议存放与 <code class="language-bash">~/.emacs.d/snippets/</code>的对应mode文件夹下。比如在markdown模式下使用的模板，存放与 <code class="language-bash">~/.emacs.d/snippets/markdown-mode/</code>。</p>

<h3 id="section-3">参考资料</h3>

<ul>
  <li>
    <p><a href="http://capitaomorte.github.io/yasnippet/">YASnippet Tutorial</a></p>
  </li>
  <li>
    <p><a href="http://www.cnblogs.com/ibgo/p/3900317.html">自定义 Yasnippet 模板</a></p>
  </li>
  <li>
    <p><a href="https://github.com/mad4alcohol/mad4a-blog/blob/master/_posts/2012-08-02-emacs-summary-cont.md">YASnippet添加模板</a></p>
  </li>
  <li>
    <p><a href="Copy/Paste in emacs ansi-term shell">Copy/Paste in emacs ansi-term shell</a></p>
  </li>
</ul>

<h3 id="section-4">更新记录</h3>

<p>2015年5月9日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs和ESS的使用技巧]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2011/08/13/emacs-ess-tips/"/>
    <updated>2011-08-13T05:20:57+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2011/08/13/emacs-ess-tips</id>
    <content type="html"><![CDATA[<h2 id="ess">1. 安装ESS</h2>

<p>有两种方法可以安装，一种是直接使用系统自带的包安装系统，比如<code>yum</code>：</p>

<p>{% codeblock lang:bash %}
# yum install emacs-ess
{% endcodeblock %}</p>

<p>但是，有时可能不是ESS最新版本。所以，推荐第二种方法，使用Emacs自带的包系统，方便、更新及时，设置方法<a href="http://yulongniu.bionutshell.org/blog/2012/06/24/emacs-extend-skills/">参考</a>，安装<code>ess</code>包。</p>

<h2 id="ess-1">2. 使用ESS</h2>

<p>进入GNU Emacs界面之后，输入<code>M-X R</code> 即可进入R界面。在这个过程中，会询问是否在当前运行目录下运行R，可以选择在不同目录下运行。</p>

<ul>
  <li><code>M-x R</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>启动R。R运行的buffer因为是在Emacs编辑器下运行，所以称为inferior（Emacs文档中称之为iESS buffer）。</p>
    </li>
    <li>
      <p><code>C-u M-x R RET --no-save RET</code>：启动R并且不保存。</p>
    </li>
    <li>
      <p><code>M-x ess-transcript-clean-region</code>：清理R界面。</p>
    </li>
    <li>
      <p><code>C-c C-z</code>：强制停止运行的R进程。</p>
    </li>
  </ol>
</blockquote>

<!--more-->

<ul>
  <li><code>C-c C-x</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>代替<code class="language-r">ls()</code>函数。</p>
    </li>
    <li>
      <p><code>C-c C-s</code>：代替<code class="language-r">search()</code>函数。</p>
    </li>
    <li>
      <p><code>C-c C-d</code>：修改已经建立的对象，非常实用。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-c C-n</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>把当前行送到R。</p>
    </li>
    <li>
      <p><code>C-c C-c</code>：把当前段送到R。</p>
    </li>
    <li>
      <p><code>C-c C-b</code>：把当前整个文件送到R。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>
    <p><code>C-c tab</code>：自动补全R代码。</p>
  </li>
  <li>
    <p><code>C-x o</code>：滚动屏幕。</p>
  </li>
  <li>
    <p><code>C--</code>：</p>
  </li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>自动给出R语言中特有的 <code>&lt;-</code>。</p>
    </li>
    <li>
      <p><code>C---</code>：连按两下–，则可以显示下划线。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-c C-o C-o</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>在函数头按下会激活ESS对R代码的注释功能。</p>
    </li>
    <li>
      <p><code>M-x customize-group RET ess RET</code>：配置默认模板，如果需要插入空行，回车没用，猛戳空格。</p>
    </li>
    <li>
      <p><code>C-c C-o C-c</code>：将代码注释为roxygen的<code>##'</code>开头格式，特别是注释example的时候很好用。</p>
    </li>
    <li>
      <p><code>C-c C-o p</code>：光标跳转到注释段落开头。</p>
    </li>
    <li>
      <p><code>C-c C-o n</code>：光标跳转到注释所在函数段落结尾。</p>
    </li>
    <li>
      <p><code>M-q</code>：整理roxygen注释，将多行注释压缩整理。</p>
    </li>
  </ol>
</blockquote>

<p>{% img middle /images/Emacs_ESS_snap.jpg 900 900 ‘Emacs ESS #1’ ‘a snap of Emacs ESS’ %}</p>

<h2 id="section">3. 高级设置</h2>

<p>结合Emacs的自动补全、补全括号、颜色显示等功能，设置更加强大的ESS编辑环境。将<a href="#c-mode-config">附加环境设置</a>添加到Emacs设置文件，比如<code class="language-bash">~/.emacs</code>。所需要的包使用<code class="language-emacs-lisp">M-x list-package</code>安装。</p>

<ul>
  <li>自动补全：<code>auto-complete</code>包</li>
</ul>

<p><img src="http://yulongniu.bionutshell.org/images/emacs_ess_tipes_autocomplete.png" width="900" height="900" title="image" alt="images" /></p>

<ul>
  <li>
    <p>代码折叠：<code>hs-minor-mode</code>（系统自带）</p>
  </li>
  <li>
    <p>括号补全：<code>smartparens</code></p>
  </li>
  <li>
    <p>括号颜色：<code>rainbow-delimiters</code></p>
  </li>
  <li>
    <p>颜色显示：<code>rainbow-mode</code></p>
  </li>
</ul>

<p><img src="http://yulongniu.bionutshell.org/images/emacs_ess_tipes_parent.png" width="500" height="500" title="image" alt="images" /></p>

<h2 id="section-1">附加内容</h2>

<p><a id="c-mode-config">ESS的Emacs编程环境设置</a></p>

<p>{% codeblock Emacs configure lang:emacs-lisp %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; auto-completion
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘auto-complete)
(require ‘auto-complete-config)
(ac-config-default)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;
; ESS set
;;;;;;;;;;;;;;;;;;;;;;;
(require ‘ess-site)
(setq ess-use-auto-complete t)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;
;open hs-mode
;;;;;;;;;;;;;;;;;;;;;;;
(add-hook ‘ess-mode-hook ‘hs-minor-mode)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;smartparens
;;;;;;;;;;;;;;;;;;;;;
(require ‘smartparens-config)
(show-smartparens-global-mode t)
(smartparens-global-mode t)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;rainbow mode 
;;;;;;;;;;;;;;;;;;;;;
(require ‘rainbow-mode)
(dolist (hook ‘(ess-mode-hook inferior-ess-mode-hook))
(add-hook hook ‘rainbow-turn-on))</p>

<p>;;;;;;;;;;;;;;
;rainbow-delimiters
;;;;;;;;;;;;;;
(require ‘rainbow-delimiters)
(add-hook ‘prog-mode-hook ‘rainbow-delimiters-mode)
(add-hook ‘ess-mode-hook ‘rainbow-delimiters-mode)
{% endcodeblock %}</p>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p><a href="http://cos.name/2011/05/write-r-packages-like-a-ninja/">像忍者一样写R包</a></p>
  </li>
  <li>
    <p><a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html">google code R stype</a></p>
  </li>
  <li>
    <p><a href="http://joysofprogramming.com/install-emacs-ess-el-fedora-rhel/">记载ESS的博客</a></p>
  </li>
  <li>
    <p><a href="http://www.damtp.cam.ac.uk/user/sje30/ess11/ess-slides.pdf">ESS幻灯片</a></p>
  </li>
  <li>
    <p><a href="http://ess.r-project.org/Manual/ess.html">ESS文档</a></p>
  </li>
  <li>
    <p><a href="http://ygc.name/2014/12/07/auto-complete-in-ess/">YGC auto-complete in ESS</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2017年1月6日</p>

]]></content>
  </entry>
  
</feed>
