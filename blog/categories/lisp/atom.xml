<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lisp | 牛牛龙]]></title>
  <link href="http://yulongniu.github.io/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://yulongniu.github.io/"/>
  <updated>2015-05-09T15:46:43+08:00</updated>
  <id>http://yulongniu.github.io/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs配置C语言编程环境]]></title>
    <link href="http://yulongniu.github.io/blog/2014/12/02/emacs-config-c/"/>
    <updated>2014-12-02T06:36:41+08:00</updated>
    <id>http://yulongniu.github.io/blog/2014/12/02/emacs-config-c</id>
    <content type="html"><![CDATA[<p>有很多优秀的C语言IDE用来实现高效的编程，比如<a href="https://www.jetbrains.com/clion/">CLion</a>。目前，CLion还在处于公开测试阶段，可以下载试用。本文介绍在Emacs下配置C/C++编程环境。</p>

<!--more-->

<h2 id="section">1. 安装和基本配置</h2>

<h3 id="section-1">1.1. 安装需求</h3>

<ul>
  <li>安装<a href="http://www.gnu.org/software/global/">GNU Global</a></li>
</ul>

<p>{% codeblock lang:bash %}
# yum install global
{% endcodeblock %}</p>

<ul>
  <li>安装Emacs的<code>helm</code>、<code>helm-swoop</code>、<code>helm-gtags</code>、<code>sr-speedbar</code>、<code>smartparens</code>、<code>google-c-style</code>、<code>auto-complete</code>、<code>auto-complete-c-headers</code>、<code>auto-complete-clang</code>包。</li>
</ul>

<h3 id="emacs">1.2. Emacs配置</h3>

<p>将<a href="#c-mode-config">附加环境设置</a>添加到Emacs设置文件，比如<code class="language-bash">~/.emacs</code>，此环境配置参考<a href="https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-helm.el">tuhdo</a>。</p>

<h2 id="section-2">2. 文件操作</h2>

<h3 id="section-3">2.1. 查找</h3>

<ul>
  <li>当前buffer查找函数、类的定义</li>
</ul>

<blockquote>
  <p><code>C-c h i</code>（helm-semantic-or-imenu）：可以输入部分关键词、空格等，以快速搜索。</p>
</blockquote>

<ul>
  <li>当前project查找定义</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>M-.</code>（helm-gtags-dwim）：输入查找内容。<code>M-,</code>（tags-loop-continue）：返回上一个buffer。</p>
    </li>
    <li>
      <p><code>C-j</code>（helm-gtags-select）：列出当前project所有定义，并且查找。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>查找引用</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>C-c g r</code>（helm-gtags-find-rtags）：光标停留在函数内部，查找该函数名；如果光标停留在函数名，查找该函数的所有引用。</p>
    </li>
    <li>
      <p><code>C-c g s</code>（helm-gtags-find-symbol）：光标停留在变量时的查找。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>查找当前函数引用的函数</li>
</ul>

<blockquote>
  <p><code>C-c g a</code>（helm-gtags-tags-in-this-function）</p>
</blockquote>

<ul>
  <li>查找文件</li>
</ul>

<blockquote>
  <p><code>C-c g P</code>（elm-gtags-find-files）</p>
</blockquote>

<h3 id="section-4">2.2. 列出源码树</h3>

<ul>
  <li>开启和关闭</li>
</ul>

<blockquote>
  <p><code>M-x sr-speedbar-open RET</code>：开启。<code>M-x sr-speedbar-close RET</code>：关闭。</p>
</blockquote>

<ul>
  <li>操作</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>b</code>和<code>f</code>切换到当前buffer和所有文件列表。</p>
    </li>
    <li>
      <p><code>=</code>：展开。<code>g</code>：收回。</p>
    </li>
    <li>
      <p><code>U</code>：上一级目录。</p>
    </li>
  </ol>
</blockquote>

<h3 id="section-5">2.3 代码补全</h3>

<p>代码补全使用<code>auto-complete</code>、<code>auto-complete-c-headers</code>、<code>semantic</code>包。在使用<code>auto-complete-c-headers</code>自动补全头文件名称时，使用以下命令获得头文件路径：</p>

<p>{% codeblock lang:bash %}
$ gcc -xc -E -v -
$ gcc -xc++ -E -v -
{% endcodeblock %}</p>

<p><img src="http://yulongniu.github.io/images/emacs_config_c_autocomplete.png" width="900" height="900" title="image" alt="images" /></p>

<h2 id="debug">3. 编译和debug</h2>

<h3 id="gcc">3.1 使用gcc编译</h3>

<p>使用<code>M-x compile</code>对源文件进行编译链接；或者开启ansi-term模式<code>M-x ansi-term</code>，进入shell操作。一个直接编译–汇编–链接的简单例子：</p>

<p>{% codeblock lang:bash %}
$ gcc helloworld.c -o helloworld
$ ./helloworld
{% endcodeblock %}</p>

<h2 id="section-6">附加内容</h2>

<p><a id="c-mode-config">C/C++的Emacs编程环境设置</a></p>

<p>{% codeblock Emacs configure lang:emacs-lisp %}</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;
;set up helm
;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘helm-config)
(require ‘helm-grep)
;; The default “C-x c” is quite close to “C-x C-c”, which quits Emacs.
;; Changed to “C-c h”. Note: We must set “C-c h” globally, because we
;; cannot change <code>helm-command-prefix-key' once </code>helm-config’ is loaded.
(global-set-key (kbd “C-c h”) ‘helm-command-prefix)
(global-unset-key (kbd “C-x c”))</p>

<p>(define-key helm-map (kbd “<tab>&#8221;) &#8216;helm-execute-persistent-action) ; rebihnd tab to do persistent action
(define-key helm-map (kbd &#8220;C-i&#8221;) &#8216;helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd &#8220;C-z&#8221;)  &#8216;helm-select-action) ; list actions using C-z</tab></p>

<p>(define-key helm-grep-mode-map (kbd “<return>&#8221;)  &#8216;helm-grep-mode-jump-other-window)
(define-key helm-grep-mode-map (kbd &#8220;n&#8221;)  &#8216;helm-grep-mode-jump-other-window-forward)
(define-key helm-grep-mode-map (kbd &#8220;p&#8221;)  &#8216;helm-grep-mode-jump-other-window-backward)</return></p>

<p>(when (executable-find “curl”)
  (setq helm-google-suggest-use-curl-p t))</p>

<p>(setq
 helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
 helm-quick-update t ; do not display invisible candidates
 helm-ff-search-library-in-sexp t ; search for library in `require&#8217; and `declare-function&#8217; sexp.
 helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
 helm-candidate-number-limit 500 ; limit the number of displayed canidates
 helm-ff-file-name-history-use-recentf t
 helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
 helm-buffers-fuzzy-matching t          ; fuzzy matching buffer names when non-nil
                                        ; useful in helm-mini that lists buffers</prior></next></p>

<p>)</p>

<p>(add-to-list ‘helm-sources-using-default-as-input ‘helm-source-man-pages)</p>

<p>(global-set-key (kbd “M-x”) ‘helm-M-x)
(global-set-key (kbd “M-y”) ‘helm-show-kill-ring)
(global-set-key (kbd “C-x b”) ‘helm-mini)
(global-set-key (kbd “C-x C-f”) ‘helm-find-files)
(global-set-key (kbd “C-h SPC”) ‘helm-all-mark-rings)
(global-set-key (kbd “C-c h o”) ‘helm-occur)</p>

<p>(global-set-key (kbd “C-c h C-c w”) ‘helm-wikipedia-suggest)</p>

<p>(global-set-key (kbd “C-c h x”) ‘helm-register)
;; (global-set-key (kbd “C-x r j”) ‘jump-to-register)</p>

<p>(define-key ‘help-command (kbd “C-f”) ‘helm-apropos)
(define-key ‘help-command (kbd “r”) ‘helm-info-emacs)
(define-key ‘help-command (kbd “C-l”) ‘helm-locate-library)</p>

<p>;; use helm to list eshell history
(add-hook ‘eshell-mode-hook
          #’(lambda ()
              (define-key eshell-mode-map (kbd “M-l”)  ‘helm-eshell-history)))</p>

<p>;;; Save current position to mark ring
(add-hook ‘helm-goto-line-before-hook ‘helm-save-current-pos-to-mark-ring)</p>

<p>;; show minibuffer history with Helm
(define-key minibuffer-local-map (kbd “M-p”) ‘helm-minibuffer-history)
(define-key minibuffer-local-map (kbd “M-n”) ‘helm-minibuffer-history)</p>

<p>(define-key global-map [remap find-tag] ‘helm-etags-select)</p>

<p>(define-key global-map [remap list-buffers] ‘helm-buffers-list)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PACKAGE: helm-swoop                ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Locate the helm-swoop folder to your path
(require ‘helm-swoop)</p>

<p>;; Change the keybinds to whatever you like :)
(global-set-key (kbd “C-c h o”) ‘helm-swoop)
(global-set-key (kbd “C-c s”) ‘helm-multi-swoop-all)</p>

<p>;; When doing isearch, hand the word over to helm-swoop
(define-key isearch-mode-map (kbd “M-i”) ‘helm-swoop-from-isearch)</p>

<p>;; From helm-swoop to helm-multi-swoop-all
(define-key helm-swoop-map (kbd “M-i”) ‘helm-multi-swoop-all-from-helm-swoop)</p>

<p>;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)</p>

<p>;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows t)</p>

<p>;; Split direcion. ‘split-window-vertically or ‘split-window-horizontally
(setq helm-swoop-split-direction ‘split-window-vertically)</p>

<p>;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color t)</p>

<p>(helm-mode 1)</p>

<p>(provide ‘setup-helm)</p>

<p>(require ‘setup-helm)
(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key “\C-cg”
 helm-gtags-suggested-key-mapping t
 )</p>

<p>(require ‘helm-gtags)
;; Enable helm-gtags-mode
(add-hook ‘dired-mode-hook ‘helm-gtags-mode)
(add-hook ‘eshell-mode-hook ‘helm-gtags-mode)
(add-hook ‘c-mode-hook ‘helm-gtags-mode)
(add-hook ‘c++-mode-hook ‘helm-gtags-mode)
(add-hook ‘asm-mode-hook ‘helm-gtags-mode)</p>

<p>(define-key helm-gtags-mode-map (kbd “C-c g a”) ‘helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd “C-j”) ‘helm-gtags-select)
(define-key helm-gtags-mode-map (kbd “M-.”) ‘helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd “M-,”) ‘helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd “C-c &lt;”) ‘helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd “C-c &gt;”) ‘helm-gtags-next-history)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;enable semantic mode
;;;;;;;;;;;;;;;;;;;;;
(require ‘cc-mode)
(require ‘semantic)</p>

<p>(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(global-semantic-idle-summary-mode 1)
(global-semantic-stickyfunc-mode 1)</p>

<p>(semantic-mode 1)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;
;open hs-mode
;;;;;;;;;;;;;;;;;;;;;;;
(add-hook ‘c-mode-common-hook   ‘hs-minor-mode)</p>

<p>;;;;;;;;;;;;;;;;;;
;google-c-style
;;;;;;;;;;;;;;;;;;
(add-hook ‘c-mode-common-hook ‘google-set-c-style)
(add-hook ‘c-mode-common-hook ‘google-make-newline-indent)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;smartparens
;;;;;;;;;;;;;;;;;;;;;
(require ‘smartparens-config)
(show-smartparens-global-mode t)
(smartparens-global-mode t)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; auto-complete
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘auto-complete)
(require ‘auto-complete-config)
(ac-config-default)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-complete-c-headers 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun my:ac-c-header-init()
  (require ‘auto-complete-c-headers)
  (add-to-list ‘ac-sources ‘ac-source-c-headers)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2”)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/x86_64-redhat-linux”)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/backward”)
  (add-to-list ‘achead:include-directories ‘“/usr/lib/gcc/x86_64-redhat-linux/4.9.2/include”)
  (add-to-list ‘achead:include-directories ‘“/usr/local/include”)
  (add-to-list ‘achead:include-directories ‘“/usr/include”)
  )
(add-hook ‘c++-mode-hook ‘my:ac-c-header-init)
(add-hook ‘c-mode-hook ‘my:ac-c-header-init)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;;
;; auto-complete-clang 
;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘auto-complete-clang)
(setq ac-auto-start t)
(setq ac-quick-help-delay 0.5)
;; (ac-set-trigger-key “TAB”)
;; (define-key ac-mode-map  [(control tab)] ‘auto-complete)
(define-key ac-mode-map  [(control tab)] ‘auto-complete)
(defun my-ac-config ()
  (setq ac-clang-flags
	(mapcar(lambda (item)(concat “-I” item))
	       (split-string
		“
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/x86_64-redhat-linux
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/../../../../include/c++/4.9.2/backward
/usr/lib/gcc/x86_64-redhat-linux/4.9.2/include
/usr/local/include
/usr/include”
		)))
  (setq-default ac-sources ‘(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
  (add-hook ‘emacs-lisp-mode-hook ‘ac-emacs-lisp-mode-setup)
  ;; (add-hook ‘c-mode-common-hook ‘ac-cc-mode-setup)
  (add-hook ‘ruby-mode-hook ‘ac-ruby-mode-setup)
  (add-hook ‘css-mode-hook ‘ac-css-mode-setup)
  (add-hook ‘auto-complete-mode-hook ‘ac-common-setup)
  (global-auto-complete-mode t))
(defun my-ac-cc-mode-setup ()
  (setq ac-sources (append ‘(ac-source-clang ac-source-yasnippet) ac-sources)))
(add-hook ‘c-mode-common-hook ‘my-ac-cc-mode-setup)
;; ac-source-gtags
(my-ac-config)
{% endcodeblock %}</p>

<h3 id="section-7">参考资料</h3>

<ul>
  <li>
    <p><a href="http://tuhdo.github.io/c-ide.html#sec-1-3">C/C++ Development Environment for Emacs</a></p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=HTUE03LnaXA">YouTube Vedio</a></p>
  </li>
</ul>

<h3 id="section-8">更新记录</h3>

<p>2014年12月7日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs高级使用技巧]]></title>
    <link href="http://yulongniu.github.io/blog/2012/06/25/emacs-extend-skills/"/>
    <updated>2012-06-25T08:01:36+08:00</updated>
    <id>http://yulongniu.github.io/blog/2012/06/25/emacs-extend-skills</id>
    <content type="html"><![CDATA[<h2 id="emacs">1. Emacs配置文件位置</h2>

<p>在Fedora系统下，Emacs的配置文件位置是<code class="language-bash">~/.emacs</code>。在Emacs配置文件中添加内容后，使用<code class="language-emacs-lisp">M-x eval-buffer</code>，使当前配置生效。编译代码以加快加载速度，<code class="language-eamcs-lisp">M-x byte-compile-file</code>。</p>

<p>使用Eamcs解释器<code class="language-emacs-lisp">M-x ielm</code>。</p>

<h2 id="emacs-1">2. Emacs自带的包管理系统</h2>

<p>在Emacs24之后，自带包管理系统，使用<code class="language-bash">M-x eval-buffer</code>进入。可以添加<a href="http://melpa.org/">MELPA源</a>、<a href="https://marmalade-repo.org/">marmalade源</a>、<a href="http://elpa.gnu.org/packages/">GNU源</a>。</p>

<p>{% codeblock lang:emacs-lisp Add repositories of Emacs packages%}
(require ‘package)
(add-to-list ‘package-archives
	     ‘(“marmalade” . “http://marmalade-repo.org/packages/”))
(add-to-list ‘package-archives
	     ‘(“melpa” . “http://melpa.milkbox.net/packages/”)
(add-to-list ‘package-archives
	     ‘(“gnu” . “http://elpa.gnu.org/packages/”)))
(package-initialize)
{% endcodeblock %}</p>

<!--more-->

<p>这样设置之后，就不需要类似<code class="language-emacs-lisp">(add-to-list 'load-path "~/.emacs.d/elpa/popup-20140207.1702/")</code>的语句了，因为Emacs会自动识别安装的包。但是，如果需要对某个包进行进一步设置，需要加上<code class="language-bash">(require 'popup)</code>之类的语句。</p>

<h2 id="section">3. 显示行号</h2>

<p>使用<code class="language-eamcs-lisp">M-x linum-mode</code>添加行号。如果需要永久显示，在Emacs配置文件中添加一下内容。</p>

<p>{% codeblock lang:emacs-lisp Show line number%}
;;;;;;;;;;;;;;;;;;;;;;;;;
;open linum mode
;;;;;;;;;;;;;;;;;;;;;;;;;
(setq linum-format “%4d \u2502”)
(add-hook ‘prog-mode-hook ‘linum-mode)
(add-hook ‘ess-mode-hook ‘linum-mode)
{% endcodeblock %}</p>

<h2 id="shell">4. 进入Shell</h2>

<p>三种方法：</p>

<ul>
  <li>
    <p><code class="language-eamcs-lisp">M-x shell</code></p>
  </li>
  <li>
    <p><code class="language-eamcs-lisp">M-x ansi-term</code></p>
  </li>
  <li>
    <p><code class="language-eamcs-lisp">M-x eshell</code></p>
  </li>
</ul>

<h2 id="root">5. root权限</h2>

<p><code class="language-eamcs-lisp">C-x C-f</code> 之后输入root密码<code class="language-eamcs-lisp">/su:root@usrname password</code></p>

<h2 id="section-1">6. 移动整体代码块</h2>

<p>选中代码块后：
向左移动2个字符：<code class="language-eamcs-lisp">C-u -2 C-x TAB</code>
向右移动4个字符：<code class="language-eamcs-lisp">C-u 4 C-x TAB</code></p>

<h2 id="section-2">7. 添加彩虹猫</h2>

<p>添加<code>nyan-mode</code>包，之后在Emacs配置文档中写入：</p>

<p>{% codeblock lang:emacs-lisp Add nyan in modeline%}
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;nyan-mode
;;;;;;;;;;;;;;;;;;;;;;;;;;
(nyan-mode t)
{% endcodeblock %}</p>

<h2 id="yasnippet">8. 自定义YASnippet模板</h2>

<p>使用<code class="language-emacs-lisp">M-x yas-new-snippet</code>，打开一个模板。比如，添加Octopress的语言高亮模板</p>

<p>{% raw %}
# -<em>- mode: snippet; require-final-newline: nil -</em>-
# name: Highlight Language
# key: hl
# binding: direct-keybinding
# contributor: Yulong Niu <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#121;&#117;&#108;&#111;&#110;&#103;&#046;&#110;&#105;&#117;&#064;&#097;&#111;&#108;&#046;&#099;&#111;&#109;">&#121;&#117;&#108;&#111;&#110;&#103;&#046;&#110;&#105;&#117;&#064;&#097;&#111;&#108;&#046;&#099;&#111;&#109;</a>
# –</p>

<p>{% highlight lang:${1:bash} %}
$0
{% endhighlight %}
{% endraw %}</p>

<p>其中 <code class="languag-emacs-lisp">${1:bash}</code>表示光标跳转位置，编号从1开始。<code class="language-emacs-lisp">$0</code>表示光标最后停留位置。如果不需要插入空行，在模板中把多余空行去掉。</p>

<p>自定义的模板建议存放与 <code class="language-bash">~/.emacs.d/snippets/</code>的对应mode文件夹下。比如在markdown模式下使用的模板，存放与 <code class="language-bash">~/.emacs.d/snippets/markdown-mode/</code>。</p>

<h3 id="section-3">参考资料</h3>

<ul>
  <li>
    <p><a href="http://capitaomorte.github.io/yasnippet/">YASnippet Tutorial</a></p>
  </li>
  <li>
    <p><a href="http://www.cnblogs.com/ibgo/p/3900317.html">自定义 Yasnippet 模板</a></p>
  </li>
  <li>
    <p><a href="https://github.com/mad4alcohol/mad4a-blog/blob/master/_posts/2012-08-02-emacs-summary-cont.md">YASnippet添加模板</a></p>
  </li>
</ul>

<h3 id="section-4">更新记录</h3>

<p>2015年5月9日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs和ESS的使用技巧]]></title>
    <link href="http://yulongniu.github.io/blog/2011/08/13/emacs-ess-tips/"/>
    <updated>2011-08-13T05:20:57+08:00</updated>
    <id>http://yulongniu.github.io/blog/2011/08/13/emacs-ess-tips</id>
    <content type="html"><![CDATA[<h2 id="ess">1. 安装ESS</h2>

<p>有两种方法可以安装，一种是直接使用系统自带的包安装系统，比如<code>yum</code>：</p>

<p>{% codeblock lang:bash %}
# yum install emacs-ess
{% endcodeblock %}</p>

<p>但是，有时可能不是ESS最新版本。所以，推荐第二种方法，使用Emacs自带的包系统，方便、更新及时，设置方法<a href="http://yulongniu.bionutshell.org/blog/2012/06/24/emacs-extend-skills/">参考</a>，安装<code>ess</code>包。</p>

<h2 id="ess-1">2. 使用ESS</h2>

<p>进入GNU Emacs界面之后，输入<code>M-X R</code> 即可进入R界面。在这个过程中，会询问是否在当前运行目录下运行R，可以选择在不同目录下运行。</p>

<ul>
  <li><code>M-x R</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>启动R。R运行的buffer因为是在Emacs编辑器下运行，所以称为inferior（Emacs文档中称之为iESS buffer）。</p>
    </li>
    <li>
      <p><code>C-u M-x R RET --no-save RET</code>：启动R并且不保存。</p>
    </li>
    <li>
      <p><code>M-x ess-transcript-clean-region</code>：清理R界面。</p>
    </li>
    <li>
      <p><code>C-c C-z</code>：强制停止运行的R进程。</p>
    </li>
  </ol>
</blockquote>

<!--more-->

<ul>
  <li><code>C-c C-x</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>代替<code class="language-r">ls()</code>函数。</p>
    </li>
    <li>
      <p><code>C-c C-s</code>：代替<code class="language-r">search()</code>函数。</p>
    </li>
    <li>
      <p><code>C-c C-d</code>：修改已经建立的对象，非常实用。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-c C-n</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>把当前行送到R。</p>
    </li>
    <li>
      <p><code>C-c C-c</code>：把当前段送到R。</p>
    </li>
    <li>
      <p><code>C-c C-b</code>：把当前整个文件送到R。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>
    <p><code>C-c tab</code>：自动补全R代码。</p>
  </li>
  <li>
    <p><code>C-x o</code>：滚动屏幕。</p>
  </li>
  <li>
    <p><code>C--</code>：</p>
  </li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>自动给出R语言中特有的 <code>&lt;-</code>。</p>
    </li>
    <li>
      <p><code>C---</code>：连按两下–，则可以显示下划线。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-c C-o</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>在函数头按下会激活ESS对R代码的注释功能。</p>
    </li>
    <li>
      <p><code>M-x customize-group RET ess RET</code>：配置默认模板，如果需要插入空行，回车没用，猛戳空格。</p>
    </li>
    <li>
      <p><code>C-c C-e C-c</code>：将代码注释为roxygen的<code>##'</code>开头格式，特别是注释example的时候很好用。</p>
    </li>
    <li>
      <p><code>C-c C-e p</code>：光标跳转到注释段落开头。</p>
    </li>
    <li>
      <p><code>C-c C-e n</code>：光标跳转到注释所在函数段落结尾。</p>
    </li>
    <li>
      <p><code>M-q</code>：整理roxygen注释，将多行注释压缩整理。</p>
    </li>
  </ol>
</blockquote>

<p>{% img middle /images/Emacs_ESS_snap.jpg 900 900 ‘Emacs ESS #1’ ‘a snap of Emacs ESS’ %}</p>

<h2 id="section">3. 高级设置</h2>

<p>结合Emacs的自动补全、补全括号、颜色显示等功能，设置更加强大的ESS编辑环境。将<a href="#c-mode-config">附加环境设置</a>添加到Emacs设置文件，比如<code class="language-bash">~/.emacs</code>。所需要的包使用<code class="language-emacs-lisp">M-x list-package</code>安装。</p>

<ul>
  <li>自动补全：<code>auto-complete</code>包</li>
</ul>

<p><img src="http://yulongniu.github.io/images/emacs_ess_tipes_autocomplete.png" width="900" height="900" title="image" alt="images" /></p>

<ul>
  <li>
    <p>代码折叠：<code>hs-minor-mode</code>（系统自带）</p>
  </li>
  <li>
    <p>括号补全：<code>smartparens</code></p>
  </li>
  <li>
    <p>括号颜色：<code>rainbow-mode</code></p>
  </li>
  <li>
    <p>颜色显示：<code>rainbow-delimiters</code></p>
  </li>
</ul>

<p><img src="http://yulongniu.github.io/images/emacs_ess_tipes_parent.png" width="500" height="500" title="image" alt="images" /></p>

<h2 id="section-1">附加内容</h2>

<p><a id="c-mode-config">ESS的Emacs编程环境设置</a></p>

<p>{% codeblock Emacs configure lang:emacs-lisp %}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; auto-completion
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require ‘auto-complete)
(require ‘auto-complete-config)
(ac-config-default)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;
; ESS set
;;;;;;;;;;;;;;;;;;;;;;;
(require ‘ess-site)
(setq ess-use-auto-complete t)</p>

<p>;;;;;;;;;;;;;;;;;;;;;;;;
;open hs-mode
;;;;;;;;;;;;;;;;;;;;;;;
(add-hook ‘ess-mode-hook ‘hs-minor-mode)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;smartparens
;;;;;;;;;;;;;;;;;;;;;
(require ‘smartparens-config)
(show-smartparens-global-mode t)
(smartparens-global-mode t)</p>

<p>;;;;;;;;;;;;;;;;;;;;;
;rainbow mode 
;;;;;;;;;;;;;;;;;;;;;
(require ‘rainbow-mode)
(dolist (hook ‘(ess-mode-hook inferior-ess-mode-hook))
(add-hook hook ‘rainbow-turn-on))</p>

<p>;;;;;;;;;;;;;;
;rainbow-delimiters
;;;;;;;;;;;;;;
(require ‘rainbow-delimiters)
(add-hook ‘prog-mode-hook ‘rainbow-delimiters-mode)
(add-hook ‘ess-mode-hook ‘rainbow-delimiters-mode)
{% endcodeblock %}</p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="http://cos.name/2011/05/write-r-packages-like-a-ninja/">像忍者一样写R包</a></p>
  </li>
  <li>
    <p><a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html">google code R stype</a></p>
  </li>
  <li>
    <p><a href="http://joysofprogramming.com/install-emacs-ess-el-fedora-rhel/">记载ESS的博客</a></p>
  </li>
  <li>
    <p><a href="http://www.damtp.cam.ac.uk/user/sje30/ess11/ess-slides.pdf">ESS幻灯片</a></p>
  </li>
  <li>
    <p><a href="http://ess.r-project.org/Manual/ess.html">ESS文档</a></p>
  </li>
  <li>
    <p><a href="http://ygc.name/2014/12/07/auto-complete-in-ess/">YGC auto-complete in ESS</a> </p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2014年12月15日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs使用技巧]]></title>
    <link href="http://yulongniu.github.io/blog/2011/08/13/emacs-tips/"/>
    <updated>2011-08-13T02:57:17+08:00</updated>
    <id>http://yulongniu.github.io/blog/2011/08/13/emacs-tips</id>
    <content type="html"><![CDATA[<h2 id="section">1. 安装</h2>

<p>{% codeblock lang:bash %}
# 安装Emacs
# yum install emacs 
{% endcodeblock %}</p>

<h2 id="section-1">2. 窗口和文件操作</h2>

<p>Emacs的按键操作，约定<code>C</code>代表<code>Ctrl</code>键，<code>M</code>代表<code>Alt</code>键，<code>RET</code>表示Enter键。<code>C-x</code>对应字符扩展，比如<code>C-x C-b</code>表示列出所有buffer；<code>M-x</code>对应命令扩展，比如<code>M-x replace-string</code>（可以用TAB补全）表示字符替换。</p>

<ul>
  <li><code>C-x 2</code>或<code>C-x 3</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>将窗口分割成两个或者三个。</p>
    </li>
    <li>
      <p><code>C-x 1</code>：只保留一个窗口。</p>
    </li>
    <li>
      <p><code>C-x n</code>：开n个窗口</p>
    </li>
  </ol>
</blockquote>

<!--more-->

<ul>
  <li><code>C-x C-f</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>读入文件，如果没有该文件，则自动创建这个文件，这个命令在mini buffer中呼出路径。</p>
    </li>
    <li>
      <p>对于Emacs minibuffer的路径，在Emacs中可以使用<code class="language-r">～/</code>表示当前登录的用户，可以替代<code class="language-r">/home/usr</code>。同时，可以在当前路径下直接输入<code>/home//median/TOOL</code>或者<code>/home//~/</code>进入需要的目录，因为Emacs会自动忽略<code>//</code>或者<code>/～</code>之前的内容（不能在终端使用它）。</p>
    </li>
    <li>
      <p>输入/su:root@localhost Mypassword：用以打开root权限文件。</p>
    </li>
    <li>
      <p><code>M-x ffap</code>（find-file-at-point）：如果光标停留在一个路径上，可以直接打开这个路径对应目录的文件。</p>
    </li>
    <li>
      <p>一个更加酷的命令是Ido模式（Interactively Do Things），可以实现智能化的交互。打开方式：<code>M-x ido-mode</code>。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>补充Dired文件操作（Directory Editor）</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>在Dired buffer下，光标所在处<code>+</code>新建文件夹。</p>
    </li>
    <li>
      <p><code>f</code>或<code>e</code>或者<code>RET</code>在当前buffer下打开文件。<code>o</code>在另一个buffer中打开文件，并且光标跳转到另一个buffer。<code>C-o</code>在另一个buffer下打开文件，光标保留在Dired buffer中。<code>v</code>在新的buffer打开文件，只读权限。<code>^</code>在新的buffer打开上层目录的Dired buffer。<code>i</code>在Dired buffer下打开文件夹。<code>g</code>更新状态。</p>
    </li>
    <li>
      <p><code>m</code>标记文件。<code>%m</code>标记文件名符合正则规则的文件。<code>%g</code>标记内容符合正则规则的文件。<code>u</code>删除当前光标所在文件的标记。<code>M-DEL</code>删除所有标记的文件。</p>
    </li>
    <li>
      <p>以下操作针对标记的文件；如果没有标记的文件，将操作光标所在处文件。<code>C</code>拷贝文件，<code>R</code>移动或者重命名文件，<code>H</code>创建硬链接，<code>C</code>创建软链接，<code>M</code>更改文件执行权限（比如777），<code>D</code>删除文件。</p>
    </li>
    <li>
      <p><code>d</code>标记要删除的文件。<code>～</code>标记所有Emacs备份文件。<code>#</code>标记所有自动保存文件。<code>%d</code>标记文件名符合正则表达式的文件，以供删除。<code>x</code>执行删除操作。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-x C-s</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>保存文件，经常使用这个命令存盘，避免文件丢失。 </p>
    </li>
    <li>
      <p><code>C-x s</code>：把所有的buffer存盘。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-x C-w</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>文件另存为。</p>
    </li>
    <li>
      <p><code>M-x recover Myfilename</code> 之后输入文件名和yes：用来恢复自动保存的文件。Emacs自动保存的文件一般以<code>#Myfilename#</code>来命名。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-x C-b</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>列出所有buffer。</p>
    </li>
    <li>
      <p><code>C-x b</code>：回到某一个buffer，需要在minibuffer中输入需要跳转的buffer名字。</p>
    </li>
    <li>
      <p><code>C-x o</code>（other）：在不同的buffer间切换。</p>
    </li>
    <li>
      <p><code>C-x k</code>：kill一个buffer。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>ibuffer模式：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>ibuffer模式是<code>C-x C-b</code>的功能更加强大版本。可以在<code>～/.emacs</code>文件中写入<code>(global-set-key (kbd "C-x C-b") 'ibuffer)</code>，将原始的模式替换成ibuffer形式。</p>
    </li>
    <li>
      <p><code>/m</code>（mode）：查找符合某个模式的buffer。</p>
    </li>
    <li>
      <p><code>/g</code>（group）：对某个类型的buffer进行分组命名。光标停留在组名上，<code>RET</code>展开和压缩buffer。<code>TAB</code>向下一个组跳转。<code>M-p</code>向上一个组跳转。<code>//</code>返回列出所有buffer的状态。<code>/\</code>清除所有分类。</p>
    </li>
    <li>
      <p><code>g</code>：更新buffer列表状态。比如，当一个buffer被修改后（但未保存），会有星号标记。</p>
    </li>
    <li>
      <p>各种操作：<code>o</code>或者<code>RET</code>打开光标所在处buffer；<code>=</code>比较当前buffer和已保存文件的区别，<code>,</code>对buffer进行各种排序的切换；<code>q</code>退出ibuffer。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>寄存器（Registers）</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>Emacs的寄存器相关命令使用<code>C-x r</code>作为前缀，可以使用<code>C-x r C-h</code>查看帮助。所谓“寄存器”是指Emacs可以保存某个窗口（windows）状态、框架（frame，即多个打开的Emacs窗口）状态或者文字内容。</p>
    </li>
    <li>
      <p><code>C-x r w REG</code>（window-configuration-to-register）：寄存当前窗口为“REG”，“REG”即设定的寄存器名称，可以是数字1、2、3，也可以是字母a、B等。<code>C-x r f REG</code>（frame-configuration-to-register）：寄存当前框架，这些框架不能关闭。<code>C-x r SPC REG</code>（point-to-register）：寄存某个光标位置。<code>C-x r j REG</code>（jump-to-register）：调转到对应的寄存器（框架、窗口或者位置信息）。</p>
    </li>
    <li>
      <p><code>C-x r s REG</code>（copy-to-register）：寄存某个区域。<code>C-x r r REG</code>：寄存某个选中的区域。<code>C-x r i REG</code>（insert-register）：召回（即粘贴）某个区域。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-g</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>终止一条命令，通常是写了一半未完成。</p>
    </li>
    <li>
      <p><code>C-x u</code>：撤销上一步操作。</p>
    </li>
    <li>
      <p><code>C-/</code>（Emacs文档上是<code>C-_</code>）：撤销命令，持续按键可以执行多次撤销。比较有意思的是<code>M-/</code>对应的是自动不全，可以连续按键已获得多个候选补全。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-x C-c</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>退出close Emacs。</p>
    </li>
    <li>
      <p><code>C-z</code>：跳出Emacs窗口，但不关闭。</p>
    </li>
  </ol>
</blockquote>

<h2 id="section-2">3. 光标移动</h2>

<ul>
  <li><code>C-v</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>向前移动一屏，可以用于清屏（右手C-，左手v）。</p>
    </li>
    <li>
      <p><code>C-u 8 C-v</code>：屏幕向下滚动8行。</p>
    </li>
    <li>
      <p><code>M-v</code>：向后移动一屏（右手M-，左手v）。</p>
    </li>
    <li>
      <p><code>C-u 8 M-v</code>：屏幕向上滚动8行。</p>
    </li>
    <li>
      <p><code>C-l</code>：重绘屏幕，并将光标所在行置于屏幕的中央。如果连续按键盘，光标会带动屏幕在上、中、下跳动。<code>M-r</code>光标在该屏幕</p>
    </li>
    <li>
      <p><code>C-v</code>和<code>M-v</code>两个命令中的C-和V-用右手操作，正好C-在更靠右，表示向前；而M-偏左，表示向后。</p>
    </li>
    <li>
      <p><code>M-g</code>：跳转到第n行</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-p</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>移动到上(previous)一行。<code>C-n</code>：移动到下(next)一行。</p>
    </li>
    <li>
      <p><code>M-p</code>：搜索先前命令。<code>M-n</code>：搜索先前命令（后翻）。<code>M-p</code>和<code>M-n</code>可以用于Emacs-ESS R界面的上翻下翻。</p>
    </li>
    <li>
      <p><code>C-a</code>：移动到行首（ahead）。<code>C-e</code>：移动到行尾（end）。</p>
    </li>
    <li>
      <p><code>M-a</code>：移动到句首。<code>M-e</code>：移动到句尾。持续按<code>M-a</code>和<code>M-e</code>会跳行，<code>C-a</code>和<code>C-e</code>不会。<code>M-a</code>和<code>M-e</code>会跳转到语义相关的句首或句尾。</p>
    </li>
    <li>
      <p><code>M-&lt;</code>或者<code>C-x [</code>：移动到文档最开头。<code>M-&gt;</code>或者<code>C-x ]</code>：移动到文档最末尾。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-f</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>右移（forward）一个字符。</p>
    </li>
    <li>
      <p><code>C-b</code>：左移（back）一个字符。</p>
    </li>
    <li>
      <p><code>M-f</code>：右移一个单词。以单词为单位移动，更快并且准确。</p>
    </li>
    <li>
      <p><code>M-b</code>：左移一个单词。</p>
    </li>
    <li>
      <p>左手控制C-和M-。以上操作可以配合<code>C-u Number</code> 作定量Number的移动，如<code>C-u 10 C-b</code>表示左移10个字符； 同时<code>C-u</code> 也可以用作插入同样字符，比如<code>C-u 10 i</code>将插入iiiiiiiiii。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-M-f</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>跳转到下一个匹配的括号，<code>C-M-b</code>：跳转到上一个匹配括号。</p>
    </li>
    <li>
      <p><code>C-M-a</code>：跳到函数头部，<code>C-M-e</code>：跳到函数的尾部。</p>
    </li>
    <li>
      <p><code>C-M-t</code>：向前移动整个匹配括号的内容。<code>C-M-k</code>：删除匹配括号内容（光标停留在匹配括号处）。</p>
    </li>
    <li>
      <p><code>C-M-h</code>：选中当前函数（光标停留在函数中的任意位置）。<code>C-M-SPC</code>：选中匹配括号包括的所有内容（光标停留在匹配括号处）。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-M-v</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>在其他的buffer中向下滚动内容，光标依然停留到当前buffer。</p>
    </li>
    <li>
      <p><code>C-M-S-v</code>：在其他的buffer中向上滚动内容。</p>
    </li>
  </ol>
</blockquote>

<h2 id="section-3">4. 删除剪切复制粘贴</h2>

<ul>
  <li><code>C-@</code>（at）：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>标记起始为点（之后用<code>C-f</code>，<code>M-b</code>等移动命令）。</p>
    </li>
    <li>
      <p><code>M-@</code>：选择光标后的一个单词。</p>
    </li>
    <li>
      <p><code>C-x h</code>（whole发音）：将整个buffer都标记起来。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-x C-x</code>（exchange-point-and-mark）：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>快速选中上次选中标记的代码块。</p>
    </li>
    <li>
      <p>连续按键，光标可以在选中的代码块头部和尾部跳转。因此，可以实现代码向前或或者向后继续高亮；与其他选中命令如<code>C-M-SPC</code>连用。</p>
    </li>
    <li>
      <p><code>C-u C-@</code>：在<code>C-y</code>插入一段代码后，光标返回插入前的位置。同时，这个命令也可以跳转光标到上一个标记的地方。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>DEL</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>删除光标前一个字符。</p>
    </li>
    <li>
      <p><code>M-DEL</code>：删除光标前一个单词。</p>
    </li>
    <li>
      <p><code>C-d</code>（delete）：删除光标后一个字符。</p>
    </li>
    <li>
      <p><code>M-d</code>：删除光标后一单词。</p>
    </li>
    <li>
      <p><code>C-S-DEL</code>：删除一整行。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-k</code>（kill）：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>从光标处剪切至行尾。</p>
    </li>
    <li>
      <p><code>M-k</code>：从光标处剪切至句尾，用于删除一个行或句子。</p>
    </li>
    <li>
      <p>配合<code>C-u</code>使用，<code>C-k</code>只能删除指定的行数，而<code>M-k</code>可以删除句子。所以，<code>M-k</code>可以删除句子间的空白行。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>M-w</code>（write）：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>标记选定范围后复制。</p>
    </li>
    <li>
      <p><code>C-w</code>：标记选定范围后剪切。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>C-y</code>（yank）：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>粘贴。</p>
    </li>
    <li>
      <p>连续<code>M-y</code>可以召回之前的剪切板中的内容。</p>
    </li>
    <li>
      <p><code>C-j</code>：插入空白行。</p>
    </li>
  </ol>
</blockquote>

<h2 id="section-4">5. 查找和替换</h2>

<ul>
  <li><code>C-s</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>搜索（search）。</p>
    </li>
    <li>
      <p><code>C-r</code>：反向搜索（research）。</p>
    </li>
    <li>
      <p><code>C-s C-w</code>：自动搜索光标到临近的第一个词结尾，可以反复按<code>C-w</code>以扩充选中范围。</p>
    </li>
    <li>
      <p><code>C-u C-s</code>：正则匹配选择。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>Occur模式：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>M-s o</code>：打开occur窗口，支持正则搜索的位置信息提纲式显示。在原始文本buffer，可以使用<code>M-g n</code>和<code>M-g p</code>进行上下跳转到符合区域。</p>
    </li>
    <li>
      <p>在Occur buffer下使用<code>C-p</code>和<code>C-n</code>进行上下跳转。<code>&lt;</code>和<code>&gt;</code>跳转到Occur头部和尾部。</p>
    </li>
    <li>
      <p>在Occur buffer下使用<code>o</code>跳转到对应文本位置，并且光标跳转到文本buffer。<code>C-o</code>跳转到对应文本位置，光标继续停留在Occur buffer。</p>
    </li>
    <li>
      <p>在Occur buffer下使用<code>e</code>，启动在文本匹配位置的编辑。编辑完成后使用<code>C-c C-c</code>退出编辑模式。使用<code>g</code>更新搜索。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li>正则搜索</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>M-x rgrep</code>进入正则搜索，可以搜索多个文件，搜索结果会在一个新的buffer中显示搜索结果。在原始文本buffer，可以使用<code>M-g n</code>和<code>M-g p</code>进行上下跳转到符合区域。</p>
    </li>
    <li>
      <p>在新打开的搜索buffer中，使用<code>TAB</code>和<code>S-TAB</code>上下移动，但不显示对应搜索的文本。使用<code>p</code>和<code>n</code>上下移动，同时对应搜索内容。使用<code>{</code>和<code>}</code>移动到上个文件和下个文件。</p>
    </li>
    <li>
      <p>使用<code>C-v</code>和<code>M-v</code>进行上下翻页。</p>
    </li>
    <li>
      <p>使用<code>g</code>更新搜索。使用<code>q</code>退出。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>M-x replace-string RET stringA RET newstring RET</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>将buffer中所有的A替换成B。</p>
    </li>
    <li>
      <p><code>M-x replace-regexp RET regexp RET newstring RET</code>：正则匹配。</p>
    </li>
  </ol>
</blockquote>

<h2 id="section-5">6. 代码整理</h2>

<ul>
  <li>
    <p><code>C-M-\</code>：整理（indent）选定代码块后。</p>
  </li>
  <li>
    <p><code>M-x hs-minor-mode</code>：</p>
  </li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>进入折叠代码模式，以下输入在函数的前大括号处。</p>
    </li>
    <li>
      <p><code>C-c @ C-h</code>：隐藏（hide）代码。</p>
    </li>
    <li>
      <p><code>C-c @ C-s</code>：显示（show）代码。</p>
    </li>
    <li>
      <p><code>C-c @ C-c</code>：隐藏/显示代码的切换。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>M+x comment-region</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>注释选中的代码。</p>
    </li>
    <li>
      <p><code>M+x uncomment-region</code>：反注释选中代码。</p>
    </li>
  </ol>
</blockquote>

<h2 id="macro">7. 宏（Macro）</h2>

<p>Emacs主持宏，用于记录操作的动作。</p>

<ul>
  <li><code>C-x (</code></li>
</ul>

<blockquote>
  <ol>
    <li>
      <p>或者<code>f3</code>开始录入宏。</p>
    </li>
    <li>
      <p><code>C-x )</code>或者<code>f4</code>结束宏录入。</p>
    </li>
    <li>
      <p><code>C-x e</code>或者<code>f4</code>放映宏。使用<code>C-u 0 f4</code>，对整个文件执行宏。使用<code>C-x C-k r</code>（apply-macro-to-region-lines）对选中区域执行宏。</p>
    </li>
  </ol>
</blockquote>

<h2 id="emacs">8. Emacs与系统交互</h2>

<ul>
  <li><code>M-x !</code>：</li>
</ul>

<blockquote>
  <p>执行单条的shell命令。</p>

  <p><code>M-x shell RET</code>：进入系统交互界面。</p>
</blockquote>

<h2 id="emacs-1">9. Emacs帮助信息</h2>

<ul>
  <li><code>C-h</code>：</li>
</ul>

<blockquote>
  <ol>
    <li>
      <p><code>C-h m</code>（mode）：返回当前所有Emacs主要和次要模式（mode）的快捷键。</p>
    </li>
    <li>
      <p><code>C-h c</code>：解释某个命令，后跟命令比如<code>C-x C-f</code>。</p>
    </li>
    <li>
      <p>如果需要查找某个命令，尽可能输入该命令，之后跟随<code>C-h</code>查询帮助信息。</p>
    </li>
    <li>
      <p><code>C-h i</code>：列出Emacs的所有帮助信息。</p>
    </li>
    <li>
      <p><code>C-h r</code>：Emacs帮助文档。</p>
    </li>
  </ol>
</blockquote>

<ul>
  <li><code>M-x man</code>：之后跟随UNIX的命令，比如<code>ls</code>，查询该命令帮助文档。</li>
</ul>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li><a href="http://tuhdo.github.io/emacs-tutor.html">Emacs Mini Manual</a>: a very good Emacs manual including a configure of C/C++. </li>
</ul>

<h3 id="section-6">更新记录</h3>

<p>2014年12月1日</p>

]]></content>
  </entry>
  
</feed>
