<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ppr | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/ppr/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2015-12-20T21:28:42+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python使用小技巧]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/07/28/python-tips/"/>
    <updated>2015-07-28T14:37:38+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/07/28/python-tips</id>
    <content type="html"><![CDATA[<p>收集了一些使用Python过程中的小技巧或者常见错误。</p>

<h2 id="while--if--break">1. While–if–break</h2>

<p>适用情况：<strong>当需要执行一个循环，但是不能事先判断何时终止。</strong> 可以在循环内部加入判断，符合要求时跳出。比如，使用程序在某个目录下新建一个文件夹，如果文件名已经存在，需要重新生成文件名；否则，创建文件夹。</p>

<p>{% codeblock lang:python While–if–break %}
import random, os</p>

<p>while True:
    letter = [chr(i) for i in range(97, 123)]
    folderName = [random.choice(letter) for i in range(5)]
    fn = ‘‘.join(folderName)
    if os.path.exists(fn) is not True:
        # get an unique name 
        os.mkdir(fn)
        break
{% endcodeblock %}</p>

<h2 id="section">2. 链式比较操作</h2>

<p>Python支持一个链式的比较操作。</p>

<p>{% codeblock lang:python comparison chain %}
testNum = 10</p>

<h1 id="section-1">链式比较操作</h1>
<p># 区别if not和if a is not None
if (not 0 &lt; testNum &lt; 5):
    print(‘It passed!’)
{% endcodeblock %}</p>

<!--more-->

<h3 id="section-2">参考网址</h3>

<ul>
  <li>
    <p><a href="https://wiki.python.org/moin/FrontPage">Python Wiki</a></p>
  </li>
  <li>
    <p><a href="http://blog.shenwei.me/python-note/#more-3951">Wei Shen’s Python note</a></p>
  </li>
  <li>
    <p><a href="http://www.codefrom.com/c/214">十个我希望早点知道的python方法</a></p>
  </li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2015年7月27日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django使用介绍]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/09/django-tutorial/"/>
    <updated>2015-05-09T13:42:15+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/09/django-tutorial</id>
    <content type="html"><![CDATA[<p>本文是学习<a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">Django Tutorial</a>的记录，目的为了帮助快速浏览和查找Django使用细节。</p>

<h2 id="django">1. 安装Django</h2>

<p>本文使用<a href="https://www.python.org/">Python 3.3.6</a>和<a href="http://www.postgresql.org/">PostgreSQL 9.3.6</a>学习Django。可以参考<a href="http://yulongniu.bionutshell.org/blog/2015/05/09/python-different-version/">“使用Pyenv控制多个版本Python”</a>和 <a href="http://yulongniu.bionutshell.org/blog/2015/05/08/install-use-postgresql/">“Fedora安装与使用PostgreSQL”</a>，安装对应版本Python和PostgreSQL。</p>

<p>{% codeblock lang:bash %}
# 安装Django
$ pip install django</p>

<h1 id="postgresqlpsycopg2">安装PostgreSQL支持psycopg2</h1>
<p>$ pip install psycopg2 
{% endcodeblock %}</p>

<!--more-->

<p>{% codeblock lang:bash %}
# 检查Django版本
$ python -c “import django; print(django.get_version())”
{% endcodeblock %}</p>

<h2 id="section">2. 创建项目</h2>

<p>{% codeblock lang:bash %}
# 创建名为mysite的项目
$ django-admin startproject mysite
{% endcodeblock %}</p>

<p>之后，配制数据库。修改<code class="language-bash">mysite/settings.py</code>对应位置。</p>

<p>{% codeblock lang:python mysite/settings.py%}
# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases</p>

<p>DATABASES = {
    ‘default’: {
        ‘ENGINE’: ‘django.db.backends.postgresql_psycopg2’,
        ‘NAME’: ‘testdb’,
        ‘USER’: ‘userName’,
        ‘PASSWORD’: ‘passWord’,
        ‘HOST’: ‘/var/run/postgresql’,
        ‘PORT’: ‘5432’,
    }
}
{% endcodeblock %}</p>

<p>{% codeblock lang:bash %}
# 配制好数据库后，链接数据库
$ python manage.py migrate
{% endcodeblock %}</p>

<p>开启Django测试网络服务器</p>

<p>{% codeblock lang:bash %}
$ python manage.py runserver
{% endcodeblock %}</p>

<h2 id="app">3. 创建app</h2>

<p>首先， 创建新的app，比如<code class="language-bash">polls</code></p>

<p>{% codeblock lang:bash %}
$ python manage.py startapp polls
{% endcodeblock %}</p>

<p>其次，修改app</p>

<p>app文件位置<code class="language-bash">polls/models.py</code>，之后在项目配制文件<code class="language-bash">mysite/settings.py</code>中添加app，最后添加app。</p>

<p>{% codeblock lang:bash %}
# 添加app
$ python manage.py makemigrations polls</p>

<h1 id="section-1">如果有数据库操作，可以打印具体的数据库操作脚本</h1>
<p>$ python manage.py sqlmigrate polls 0001</p>

<h1 id="section-2">也可以检查</h1>
<p>$ python manage.py check
{% endcodeblock %}</p>

<p>最后，链接app与数据库</p>

<p>{% codeblock lang:bash %}
$ python manage.py migrate
{% endcodeblock %}</p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li><a href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/">Django Tutorial</a></li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2015年5月9日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Pyenv控制多个版本Python]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2015/05/09/python-different-version/"/>
    <updated>2015-05-09T00:14:10+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2015/05/09/python-different-version</id>
    <content type="html"><![CDATA[<p>同时在一台电脑上使用多个版本的Python，可以通过<a href="https://github.com/yyuu/pyenv">pyenv</a>控制和管理。</p>

<h2 id="section">1. 安装方法</h2>

<p>{% codeblock lang:bash %}
$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv</p>

<h1 id="section-1">写入路径信息</h1>
<p>$ echo ‘export PYENV_ROOT=”$HOME/.pyenv”’ » ~/.bashrc
$ echo ‘export PATH=”$PYENV_ROOT/bin:$PATH”’ » ~/.bashrc
$ echo ‘eval “$(pyenv init -)”’ » ~/.bashrc</p>

<h1 id="section-2">重新载入</h1>
<p>$ source ~/.bashrc
{% endcodeblock %}</p>

<!--more-->

<h2 id="python">2. 安装多个版本Python和对应包</h2>

<p>{% codeblock lang:bash %}
# 查看可提供的Python版本列表
$ pyenv install –list</p>

<h1 id="python-1">安装Python所依赖包</h1>
<p># yum install readline readline-devel readline-static openssl openssl-devel openssl-static sqlite-devel bzip2-devel bzip2-libs</p>

<h1 id="python-2">安装其他版本Python</h1>
<p># 如果命令行下载安装Python太慢，可以将下载的安装包放入~/.pyenv/cache/文件夹中，之后安装
$ pyenv install 3.4.3
$ pyenv rehash</p>

<h1 id="python-3">查看已安装Python版本</h1>
<p>$ pyenv versions</p>

<h1 id="python-4">全局切换Python版本</h1>
<p>$ pyenv global 3.4.3</p>

<h1 id="python-5">安装对应版本Python包。</h1>
<p># 每次安装包之后，都要执行rehash。
$ pip install ipython
$ pyenv rehash
{% endcodeblock %}</p>

<p>如果在使用<code class="language-bash">pip</code>安装包时，下载速度过慢，可以考虑使用国内源。比如：</p>

<ul>
  <li>
    <p>http://pypi.mirrors.ustc.edu.cn/</p>
  </li>
  <li>
    <p>http://pypi.douban.com/</p>
  </li>
</ul>

<p>使用方法为：</p>

<p>{% codeblock lang:bash Using different pip mirror%}
$ pip install –upgrade numpy -i http://pypi.mirrors.ustc.edu.cn/simple
{% endcodeblock %}</p>

<h2 id="pyenv">3. 更新pyenv</h2>

<p>{% codeblock lang:bash %}
$ cd ~/.pyenv
$ git pull
{% endcodeblock %}</p>

<h2 id="python-6">4. 删除特定版本Python</h2>

<p>{% codeblock lang:bash %}
# 查找特定版本Python文件夹位置，之后直接删除即可。
$ pyenv prefix 3.4.3
$ rm -rf ~/.pyenv/versions/3.4.3
{% endcodeblock %}</p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="http://seisman.info/python-pyenv.html">Python多版本共存之pyenv</a></p>
  </li>
  <li>
    <p><a href="http://www.leadnt.com/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90%E6%9D%A5%E5%8A%A0%E9%80%9Fpython-pypi%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85.html">使用国内镜像源来加速python pypi包的安装</a></p>
  </li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2015年5月23日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress安装和使用]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2014/07/23/octopress-install/"/>
    <updated>2014-07-23T01:45:46+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2014/07/23/octopress-install</id>
    <content type="html"><![CDATA[<p>安装和使用Octopress的一些注意事项，详细的内容可以<a href="#Ref">参考网址</a>。</p>

<h2 id="section">1. 安装</h2>

<p>请参考<a href="http://octopress.org/">官网</a>，其他的博客介绍的安装已经失效或者错误。</p>

<p>常用命令:</p>

<p>{% codeblock lang:bash %}
# 预览，可自动更新。使用Ctrl+c终止。
$ rake preview
{% endcodeblock %}</p>

<h2 id="ruby">2. Ruby版本调整</h2>

<p>因为Octopress需要使用Ruby旧版本，推荐使用<a href="https://rvm.io/">RVM</a>安装Ruby 1.9.3版本。在安转过程中可能会出现<code>"gpg: Can't check signature: public key not found"</code>的错误提示，需要执行一下类似命名，添加公用匙。</p>

<p>{% codeblock lang:bash %}
$ gpg2 –keyserver hkp://keys.gnupg.net –recv-keys D39DC0E3
{% endcodeblock %}</p>

<p>使用以下操作设定ruby版本：</p>

<p>{% codeblock lang:bash %}
$ source ~/.rvm/scripts/rvm
$ rvm use 1.9.3
{% endcodeblock %}
<!--more--></p>

<h2 id="section-1">3. 预览错误</h2>

<p>如果在预览博文时出现<code class="language-bash">TCPServer Error: Address already in use - bind(2)</code>的错误，表示端口（Octopress默认4000）被占，解决办法:</p>

<p>{% codeblock lang:bash %}
# 获取占据4000端口程序的PID
$ lsof -wni tcp:4000
$ kill -9 PID
{% endcodeblock %}</p>

<h2 id="section-2">4. 更新博文</h2>

<p>博文放置在<code class="language-bash">source/_posts</code>目录下。</p>

<p>{% codeblock lang:bash %}
$ rake new_post[“new post”]
$ git add .
$ git commit -m “my comment” 
$ git push origin source
$ rake generate
$ rake deploy</p>

<h1 id="generatedeploy">或者generate和deploy一步执行</h1>
<p>$ rake gen_deploy
{% endcodeblock %}
如果需要在首页显示部分博文，在需要隔断的地方（博文markdown文件）加入：</p>

<p>{% codeblock lang:html%}
<!--more-->
{% endcodeblock %}</p>

<h2 id="section-3">5. 使用主题</h2>

<p>当前博客使用的是<a href="http://kaworu.github.io/octopress/">octostrap</a>主题。</p>

<ul>
  <li>
    <p><a href="http://kaworu.github.io/octostrap3/blog/2013/10/03/category-list-aside/">添加Category侧边栏</a></p>
  </li>
  <li>
    <p><a href="http://kaworu.github.io/octostrap3/blog/2013/10/02/pick-a-theme-for-only-one-page/">每个页面更换主题</a></p>
  </li>
  <li>
    <p><a href="http://kaworu.github.io/octostrap3/setup/pick-a-theme/">选择Bootstrap主题</a></p>
  </li>
</ul>

<h2 id="section-4">6. 修改标签图标记</h2>

<p>可以使用<a href="http://converticon.com/">在线转换工具</a>，将png格式图片转换为ico格式（比如32*32），例如文件<code>favicon.ico</code>。之后，将<code>favicon.ico</code>移动到<code class="language-bash">source/</code>目录下。之后修改文件<code class="language-bash">source/_includes/head.html</code>，找到<code>favicon.png</code>将其改为<code>favicon.ico</code>。</p>

<h2 id="section-5">7. 404公益</h2>

<p>在<code class="language-bash">source</code>文件夹下添加<em>404.markdown</em>文件，之后写入</p>

<h2 id="codeblock-langjavascript-">{% codeblock lang:javascript %}</h2>
<p>layout: page
title: “404 Error”
date: 2014-07-22
comments: false
sharing: false
footer: false
—</p>

<script type="text/javascript" src="http://www.qq.com/404/search_children.js?edition=small" charset="utf-8"></script>

<p>{% endcodeblock %}</p>

<h2 id="section-6">8. 私密博文</h2>

<p>Octopress提供了隐藏博文的功能，即使文章已经推送到了github，也可以不在博客主页显示。具体方法是在每篇markdown文件头部添加：</p>

<p>{% codeblock lang:ruby %}
published: false
{% endcodeblock %}</p>

<p>如果需要公开发表，将其删除或者改为：</p>

<p>{% codeblock lang:ruby %}
published: true
{% endcodeblock %}</p>

<h2 id="section-7">9. 代码高亮设置</h2>

<p>安装<code>coderay</code>和<code>kramdown</code></p>

<p>{% codeblock lang:bash %}
$ gem install coderay
$ gem install kramdown
{% endcodeblock %}</p>

<p>在<code class="language-bash">_config.yml</code>文件中写入：</p>

<p>{% codeblock lang:bash %}
markdown: kramdown
kramdown:
  use_coderay: true
  coderay:
    coderay_line_numbers: table
    coderay_css: class
{% endcodeblock %}</p>

<h2 id="kramdown">10. Kramdown语法小技巧</h2>

<ul>
  <li>代码高亮</li>
</ul>

<p>代码段高亮参考<a href="http://octopress.org/docs/plugins/codeblock/">Octopress codeblock</a>，其中<code>[lang:language]</code>设置高亮语言种类。<code>[url]</code>和<code>[linktext]</code>非必须。</p>

<p>{% raw %}
<code>
{% codeblock [lang:language] [title] [url] [link text] %}
code snippet
{% endcodeblock %}
</code>
{% endraw %}</p>

<p>行内引用代码使用
<code>`source/_includes/custom/head.html`{:.language-bash}</code></p>

<ul>
  <li>四个空格或者一个Tab可以生成一个文本块</li>
</ul>

<h2 id="section-8">11. 链接在新的选择卡中打开</h2>

<p>在<code class="language-bash">source/_includes/custom/head.html</code>的末尾添加：</p>

<p>{% codeblock lang:html %}
<!-- link open with new tab  -->
<script>
  function addBlankTargetForLinks () {
  $('a[href^="http"]').each(function(){
  $(this).attr('target', '_blank');
  });
  }</script></p>

<p>$(document).bind(‘DOMNodeInserted’, function(event) {
  addBlankTargetForLinks();
  });
&lt;/script&gt;
{% endcodeblock %}</p>

<h2 id="section-9">12. 修改分页数</h2>

<p>修改<code class="language-bash">_config.yml</code>文件</p>

<p>{% codeblock lang:bash %}
# 每页最多展示的博文数目
paginate: 5</p>

<h1 id="section-10">分页后博文地址</h1>
<p>paginate_path: “posts/:num”
{% endcodeblock %}</p>

<h2 id="section-11">13. 添加图片</h2>

<p>将需要添加的图片移动到目录<code class="language-bash">source/images/</code>，之后在正文中添加：</p>

<p>{% codeblock lang:bash %}
{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}</p>

<h1 id="section-12">例子</h1>
<p>{% img left /images/testimg.png 350 350 ‘image’ ‘images’ %}
{% img right http://placekitten.com/300/500 150 250 Place Kitten #3 %}
{% endcodeblock %}</p>

<h2 id="section-13">14. 添加新页面</h2>

<p>首先，添加新的页面：</p>

<p>{% codeblock lang:bash %}
rake new_page[ANewPage]
{% endcodeblock %}</p>

<p>这会生成一个新的文件<code class="language-bash">source/anewpage/index.markdown</code>。之后，修改<code class="language-bash">source/_includes/custom/navigation.html</code>文件，根据自己主题，添加如下类似内容</p>

<p>{% raw %}
<code>
&lt;li {% if page.navbar == 'ANewPage' %}class="active"{% endif %}&gt;
  &lt;a href="{{ root_url }}/anewpage"&gt;ANewPage&lt;/a&gt;
&lt;/li&gt;
</code>
{% endraw %}</p>

<h2 id="section-14">15. 添加表格</h2>

<p>建立新文件<code>source/stylesheets/data-table.css</code>，写入以下内容，其中<code>#00B9E3</code>是表头的背景颜色，可以更改为自己喜欢的颜色：</p>

<p>{% codeblock data-table lang:css %}
* + table {
  border-style:solid;
  border-width:1px;
  border-color:#e7e3e7;
}</p>

<ul>
  <li>
    <ul>
      <li>table th, * + table td {
border-style:dashed;
border-width:1px;
border-color:#e7e3e7;
padding-left: 3px;
padding-right: 3px;
}</li>
    </ul>
  </li>
  <li>
    <ul>
      <li>table th {
border-style:solid;
font-weight:bold;
background: url(“/images/noise.png?1330434582”) repeat scroll left top #00B9E3;
}</li>
    </ul>
  </li>
  <li>
    <ul>
      <li>table th[align=”left”], * + table td[align=”left”] {
text-align:left;
}</li>
    </ul>
  </li>
  <li>
    <ul>
      <li>table th[align=”right”], * + table td[align=”right”] {
text-align:right;
}</li>
    </ul>
  </li>
  <li>
    <ul>
      <li>table th[align=”center”], * + table td[align=”center”] {
text-align:center;
}
{% endcodeblock %}</li>
    </ul>
  </li>
</ul>

<p>之后，在<code>source/_includes/head.html</code>中修改或者添加：</p>

<p>{% raw %}
&#8220;`</p>

<link href="{{ root_url }}/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" />

<p>{% if page.styles contains ‘data-table’ %}</p>
<link href="{{ root_url }}/stylesheets/data-table.css" media="screen, projection" rel="stylesheet" type="text/css" />

<p>{% endif %}</p>

<p>&#8220;`
{% endraw %}</p>

<p>使用方法，在每篇博客头部位置添加<code>styles: [data-table]</code>，之后使用表格样式即可。如果使用Kramdown，表格对其方法如下：</p>

<hr />

<table>
  <thead>
    <tr>
      <th style="text-align: left"><strong>X/Y</strong></th>
      <th style="text-align: center"><strong>1(Presence)</strong></th>
      <th style="text-align: center"><strong>0(Absence)</strong></th>
      <th style="text-align: right"><strong>Sum</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>1(Presence)</strong></td>
      <td style="text-align: center">a</td>
      <td style="text-align: center">b</td>
      <td style="text-align: right">a+b</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>0(Absence)</strong></td>
      <td style="text-align: center">c</td>
      <td style="text-align: center">d</td>
      <td style="text-align: right">c+d</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td style="text-align: left"><strong>Sum</strong></td>
      <td style="text-align: center">a+c</td>
      <td style="text-align: center">b+d</td>
      <td style="text-align: right">n=a+b+c+d</td>
    </tr>
  </tbody>
</table>

<hr />

<p>{% raw %}
<code>
|---------------+---------------+--------------+---------|
|**X/Y**        |**1(Presence)**|**0(Absence)**|**Sum**  |
|:--------------|:-------------:|:------------:|--------:|
|**1(Presence)**|a              |b             |a+b      |
|---------------|---------------|--------------|---------|
|**0(Absence)** |c              |d             |c+d      |
|---------------|---------------|--------------|---------|
|**Sum**        |a+c            |b+d           |n=a+b+c+d|
|---------------|---------------|--------------|---------|
</code>
{% endraw %}</p>

<p>如果使用Emacs，可以使用Emacs的<a href="http://orgmode.org/">org模式</a>快速建立和编辑表格。</p>

<h2 id="github">16. 重新克隆github上的博文和设置</h2>

<p>{% codeblock lang:bash Re-set Octopress on local computer %}
# 注意切换到指定ruby版本
# 克隆source分支到本地，注意替换“YulongNiu”为自己的GitHub名称
$ git clone -b source git@github.com:YulongNiu/YulongNiu.github.io.git octopress</p>

<h1 id="bundle">安装bundle</h1>
<p>$ cd octopress
$ gem install bundler
$ bundle install</p>

<h1 id="masterdeploy">克隆master分支到_deploy文件夹</h1>
<p>$ mkdir _deploy
$ cd _deploy
$ git init
$ git remote add origin git@github.com:YulongNiu/YulongNiu.github.io.git
$ git pull origin master
$ cd ..
$ rake gen_deploy
{% endcodeblock %}</p>

<h2 id="section-15">17. 多台电脑共同编写博客</h2>

<p>{% codeblock lang:bash Writing Octopress on more than one computer %}
# 设定好Octopress，假定Octopress目录为octopress
$ cd octopress
$ git pull origin source
$ cd ./_deploy
$ git pull origin master
{% endcodeblock %}</p>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>Octopress安装和域名设置：<a href="http://tchen.me/posts/2012-12-16-first-blog.html">1</a>, <a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">2</a></p>
  </li>
  <li>
    <p>Octopress其他配制：<a href="http://812lcl.com/blog/2013/10/26/octopressce-bian-lan-ji-ping-lun-xi-tong-ding-zhi/">1</a>, <a href="http://cn.soulmachine.me/blog/20130402/">2</a></p>
  </li>
  <li>
    <p>添加多说：<a href="http://havee.me/internet/2013-02/add-duoshuo-commemt-system-into-octopress.html">1</a>, <a href="http://kaiimeng.cn/my-first-octopress-blog/">2</a>, <a href="http://cn.soulmachine.me/blog/20130402/">3</a></p>
  </li>
  <li>
    <p>添加Mathjax支持：<a href="http://yanping.me/cn/blog/2012/03/10/octopress-with-latex/">1</a>, <a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">2</a>, <a href="http://adereth.github.io/blog/2013/11/29/colorful-equations/">Mathjax彩色公式</a></p>
  </li>
  <li>
    <p><a href="http://kramdown.gettalong.org/syntax.html">Kramdown语法</a></p>
  </li>
  <li>
    <p><a href="http://kramdown.gettalong.org/quickref.html">Kramdown演示</a></p>
  </li>
  <li>
    <p><a href="http://i.rexdf.org/blog/2014/09/26/octopressbo-ke-geng-xin-ri-zhi/">pygments错误详细提示</a></p>
  </li>
  <li>
    <p><a href="http://pygments.org/docs/lexers/">Octopress highlight language list</a></p>
  </li>
  <li>
    <p>标记Octopress自身语法：<a href="http://stackoverflow.com/questions/15786144/how-to-escape-in-markdown-on-octopress">1</a>，<a href="http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags/13582517#13582517">2</a></p>
  </li>
  <li>
    <p><a href="http://programus.github.io/blog/2012/03/07/add-table-data-css-for-octopress/">Octopress添加表格</a></p>
  </li>
  <li>
    <p><a href="http://swalsh.org/blog/2014/09/07/migrating-octopress-to-a-new-computer/">Octopress重装或者多台电脑上并行写作同步</a></p>
  </li>
</ul>

<h3 id="section-16">更新记录</h3>

<p>2015年12月19日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中使用rpy2模块调用R]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2012/08/21/python-r-rpy2/"/>
    <updated>2012-08-21T19:33:47+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2012/08/21/python-r-rpy2</id>
    <content type="html"><![CDATA[<p>需要在python中调用R，实在是一种无奈的选择。如果能在一门语言中独立完成课题，是一个比较理想的做法。但是，这种想法也不太现实，毕竟每一种语言都有自己的长处。如果能取长补短，综合使用各种语言，也能起到不错的效果。</p>

<p>现在遇到的问题是，如何在python中调用R？这其中包括了如何调用R的对象（函数和包），R和python的对象如何互相转换，以及如何调用R的脚本（外界参数的输入）。python提供了一个模块<a href="http://rpy.sourceforge.net/">rpy2</a> ，可以较好地完成这项工作。rpy2只是提供了一个Python调用R的接口，因此也直接继承了所有R的缺点。一个有意思的项目是<a href="http://www.renjin.org/">renjin</a>，一个基于JVM的R语言解释器。</p>

<p>本文着重记录一些使用过程中的注意事项和小技巧，如有不一致则以<a href="http://rpy.sourceforge.net/rpy2/doc-2.5/html/">官方文档</a>为准。</p>

<h2 id="section">1. 安装</h2>

<p>rpy2作为Python的一个模块，其<a href="http://rpy.sourceforge.net/rpy2/doc-2.5/html/overview.html#installation">安装</a>非常方便。需要做的准备工作是在本地安装好R。</p>

<p>{% codeblock lang:bash Install rpy2 from pip %}
# pip install rpy2
{% endcodeblock %}</p>

<h2 id="pythonr">2. python调用R对象</h2>

<h3 id="rpy2robjectslanguage-python">2.1 使用<code class="language-python">rpy2.robjects</code></h3>

<p>在rpy2中调用R对象，实际上是开启了一个R的交互进程。主要思路是将R的代码写入一个字符串内，之后执行即可。</p>

<p>对于R代码，将一段R代码写成一行，尽管看起来很丑陋而且不推荐，一样可以执行。但是，反过来，对于Python代码则没有这么简单。因为，Python代码是靠缩进来划分代码的区域，假若一段代码中有两个循环嵌套，如果将代码写成一行，执行起来就要麻烦的多（很可能要依赖空格的多少进行解释）。</p>

<p>调用方法：</p>

<p>{% codeblock lang:python Call R objects %}
from rpy2.robjects import r
{% endcodeblock %}</p>

<p>有三种方式可以选择：</p>

<ol>
  <li>
    <p>使用<code class="language-python">r.obj</code>，比如 <code class="language-python">r.c(1, 3)</code>。</p>

    <blockquote>
      <p>这种方法虽然方便，但是对于名称中有“点号”的函数会出问题，比如 <code class="language-r">data.frame</code>或者 <code class="language-r">read.csv</code>等。</p>
    </blockquote>
  </li>
  <li>
    <p>使用<code class="language-python">r['obj']</code>，比如 <code class="language-python">r['c'](1, 3)</code>。</p>

    <blockquote>
      <ul>
        <li>
          <p>这种方法几乎可以调用任何R的函数，而且写法与原始调用很相似，无非是<code class="language-python">r['func'](value1, para2 = value2)</code>。</p>
        </li>
        <li>
          <p>如果一个R函数中的变量名是有“点号”的，不能直接赋值，需要构建一个字典形式，比如 <code class="language-python">r['func'](value1, para2 = value, **{para.3: value3})</code>。</p>
        </li>
        <li>
          <p>如果一个</p>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>使用<code class="language-python">r('obj')</code>，比如 <code class="language-python">r('c(1, 3)')</code>。</p>

    <blockquote>
      <p>这种方法从某种程度上讲是万能的，因为总是可以将任意长度的R代码写成一个Python字符串，之后通过<code class="language-python">r('Rcode')</code>调用执行。</p>
    </blockquote>
  </li>
</ol>

<p>{% codeblock lang:python Example of Calling R objects from rpy2.objects %}
# import r
»&gt; from rpy2.robjects import r</p>

<h1 id="creat-an-r-function">creat an R function</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>r(‘&#8217;’f &lt;- function(r){pi * r}’’’)
r.f(3)
[9.424778]</p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="internal-function-in-r">internal function in R</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>r<a href="">‘ls’</a></p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="two-ways-of-getting-paste-function-in-r">two ways of getting ‘paste’ function in R</h1>
<p># first: direct use R function
»&gt; print(r<a href="l, collapse =" title="-">‘paste’</a>)
# second: eavl R codes
»&gt; coder = ‘paste(%s, collapse = “-“)’ % (l.r_repr())
»&gt; print(r(coder))</p>

<h1 id="call-python-function">call Python function</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>l = r[‘letters’]
len(l)
26
dir(l)
{% endcodeblock %}</p>
    </blockquote>
  </blockquote>
</blockquote>

<h3 id="r">2.2 创建R对象和提取对象的数值</h3>

<p>创建向量，可以使用<code class="language-python">rpy2.robjects.vectors</code>中提供的一系列函数，将一个Python的元组、列表或者字符串转换为R的向量。其中包括 <code class="language-python">StrVector()</code>、<code class="language-python">IntVector()</code>、<code class="language-python">FloatVector()</code>、<code class="language-python">FactorVector()</code>和<code>BoolVector()</code>，分别提供了转换字符、整数、浮点、因子和布尔向量。</p>

<p>创建列表，可以使用<code class="language-python">ListVector()</code>将Python的字典转换为R的列表。</p>

<p>创建矩阵和数据框（data.frame）建议直接使用R函数<code class="language-r">matrix()</code>和<code class="language-r">data.frame()</code>。尽管如此，rpy2提供了 <code class="language-python">DataFram()</code>将Python的字典转换成R的数据框（列顺序可能与输入不一致，Python字典特性造成），<span style="color: blue">注意</span>会把字符串自动转换成因子。</p>

<p>以上这些构建的R对象，有一系列的属性和方法，比如<code class="language-python">names</code>，可以访问和赋值。</p>

<p>{% codeblock lang:Python Build R objects %}
»&gt; from rpy2.robjects import r
»&gt; from rpy2.robjects.vectors import StrVector, IntVector, ListVector, DataFrame</p>

<h1 id="build-r-vector">build R vector</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>testVec = IntVector([1, 2, 3])
testVec = StrVector((‘a’, ‘nice’, ‘day’))
testVec = StrVector(‘abc’)
testVec.names = StrVector((‘name1’, ‘name2’, ‘name3’))
dir(testVec)</p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="build-list-with-names">build List with names</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>testList = ListVector({‘a’: 1, ‘nice’: 2, ‘day’: 3})
testList.names</p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="build-matrix">build matrix</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>m = r.matrix(IntVector([1, 3, 8, 6]), nrow = 2)
m = r.matrix(range(10), nrow = 5)</p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="build-dataframe">build data.frame</h1>
<p># use R function, string vector are automatically transformed as factors
»&gt; dataf = r<a href="S = StrVector(['x'," title="y', 'z']), F = StrVector('acb">‘data.frame’</a>)
»&gt; dataf
&lt;DataFrame - Python:0x7f072235f7e8 / R:0x19fb250&gt;
[FactorVector, FactorVector]
  S: &lt;class ‘rpy2.robjects.vectors.FactorVector’&gt;
  &lt;FactorVector - Python:0x7f072235f518 / R:0x1978fa8&gt;
[       1,        2,        3]
  F: &lt;class ‘rpy2.robjects.vectors.FactorVector’&gt;
  &lt;FactorVector - Python:0x7f072235f440 / R:0x18e9c20&gt;
[       1,        3,        2]
# use string vector “as it is”
»&gt; datav = DataFrame({‘S’: r.I(StrVector([‘x’, ‘y’, ‘z’])), ‘F’: StrVector(‘acb’)})
»&gt; datav
&lt;DataFrame - Python:0x7f072235f638 / R:0x1155ff8&gt;
[StrVector, FactorVector]
  S: &lt;class ‘rpy2.robjects.vectors.StrVector’&gt;
  &lt;StrVector - Python:0x7f07222d95f0 / R:0x23b0168&gt;
[str, str, str]
  F: &lt;class ‘rpy2.robjects.vectors.FactorVector’&gt;
  &lt;FactorVector - Python:0x7f07222d9488 / R:0x10e7e70&gt;
[       1,        3,        2]
{% endcodeblock %}</p>

<p>在rpy2中构建的对象，可以使用名字、索引或者布尔值进行提取或者修改，<span style="color: blue">注意</span>Python从0开始索引，而R从1开始。R对象的提供了方法<code class="language-python">rx()</code>相当于R的 <code class="language-r">[</code>操作，而<code class="language-python">rx2()</code>相当于<code class="language-r">[[</code>操作。</p>

<p>{% codeblock lang:python Extract values %}
»&gt; from rpy2.robjects import r
»&gt; from rpy2.robjects.vectors import StrVector, IntVector, BoolVector, ListVector, DataFrame</p>

<h1 id="vector">vector</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>testVec = IntVector([1, 2, 3])
testVec.names[0]
testVec.names = StrVector((‘name1’, ‘name2’, ‘name3’))
# assign values
testVec[0] = 20
testVec[1: 3] = IntVector([100, 101])
testVec[testVec.names.index(‘name2’)] = 10
# using the rx() method
testVec.rx(‘name2’)
testVec.rx(3)
testVec.rx(-1)
testVec.rx(IntVector([-1, -3]))
testVec.rx(BoolVector([False, True, False]))
# empty vector returns
testVec.rx(0)
# error because R cannot determine the last element 
testVec[1: ] = IntVector([100, 101])
# error because rx() is a method
testVec.rx(IntVector([1, 3])) = IntVector([100, 101])</p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="list-and-matrix">list and matrix</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>tmp = r(“list(a = matrix(1:10, nrow = 2), b = ‘Hello’)”)
print tmp
$a
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    3    5    7    9
[2,]    2    4    6    8   10</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>$b
[1] “Hello”
»&gt; tmp.names
»&gt; tmp.names[1]
»&gt; tmp.rx(‘a’)
&lt;ListVector - Python:0x8afd86c / R:0x8cf71c0&gt;
[Matrix]
  a: &lt;class ‘rpy2.robjects.vectors.Matrix’&gt;
  &lt;Matrix - Python:0x8b013cc / R:0x97de388&gt;
[       1,        2,        3, …,        8,        9,       10]
»&gt; tmp.rx2(‘a’)
# same as the former one
»&gt; tmp.rx(1)
»&gt; tmp.rx2(1)
&lt;Matrix - Python:0x8b01b4c / R:0x97de388&gt;
[       1,        2,        3, …,        8,        9,       10]
»&gt; tmp[tmp.names.index(‘b’)] = 9</p>

<h1 id="operate-matrix">operate matrix</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>tmpMat = tmp.rx2(‘a’)
# first element of ‘a’
tmpMat.rx(1, 1) 
# first row of ‘a’
tmpMat.rx(1, True)
tmpMat.rx
tmpMat.colnames = r[‘letters’][1:6]
tmpMat.rx(True, IntVector([1, 3]))
tmpMat.rx(True, BoolVector((True, False, True, False, False)))
tmpMat.rx(True, ‘b’)
{% endcodeblock %}</p>
    </blockquote>
  </blockquote>
</blockquote>

<h3 id="section-1">2.3 特殊对象</h3>

<ul>
  <li>
    <p>R中的<code class="language-r">NA</code>通过<code class="language-python">rpy2.robjects.NA_Integer</code>或<code class="language-python">rpy2.robjects.NA_Character</code>等引用。</p>
  </li>
  <li>
    <p>全局变量使用<code class="language-python">rpy2.robjects.globalenv</code>。</p>

    <blockquote>
      <p>特别是遇到Python找不到一个R对象时（此时R对象可能通过<code class="language-python">r('Rcode')</code>调用），留意将R对象转变成全局变量。</p>
    </blockquote>
  </li>
</ul>

<p>{% codeblock lang:python Special objects %}
»&gt; from rpy2.robjects import r
»&gt; from rpy2.robjects.vectors import StrVector
»&gt; from rpy2.robjects import globalenv, NA_Character</p>

<h1 id="test-string-na">test string NA</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>testNA = StrVector([‘a’, ‘b’, ‘c’])
testNA[1] = NA_Character</p>
    </blockquote>
  </blockquote>
</blockquote>

<h1 id="test-global-objects">test global objects</h1>
<blockquote>
  <blockquote>
    <blockquote>
      <p>testGlobal = StrVector([‘a’, ‘b’, ‘c’])
globalenv[‘testGlobal’] = testGlobal
connectVec = r(“paste(testGlobal, collapse = ‘-‘)”)
{% endcodeblock %}</p>
    </blockquote>
  </blockquote>
</blockquote>

<h3 id="section-2">2.4 载入和使用包</h3>

<p>使用<code class="language-python">rpy2.robjects.packages.importr</code>调用R包：</p>

<p>{% codeblock lang:python import R packags %}
»&gt; from rpy2.robjects.packages import importr</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>base = importr(‘base’)
stats = importr(‘stats’)
affy = importr(‘affy’)
stats.rnorm(10)
{% endcodeblock %}</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>如果想引用一个包中的隐变量，也很简单，只要载入包，然后所有r命令化成成字符串，之后引用即可（这种方法是万能的），比如：</p>

<p>{% codeblock lang:python Hidden objects in R packages  %}
»&gt; from rpy2.robjects.packages import importr</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>importr(‘hwriter’)
a = r(‘hwriter:::hwrite.table(matrix(1:10, 2))’)
print(a)
[1] “&lt;table border=&#8221;1&#8221;&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n”
{% endcodeblock %}</p>
    </blockquote>
  </blockquote>
</blockquote>

<h2 id="rpython">3. R对象转换成Python对象</h2>

<p>推荐使用<code class="language-python">tuple()</code>或者<code class="language-python">list()</code>函数，将R对象转换成Python的元组或者列表对象。</p>

<p>{% codeblock lang:python Transform R objects to Python ones %}
»&gt; a = r(‘c(1, 2, 3)’)
»&gt; str(a)
‘[1] 1 2 3\n’
»&gt; tuple(a)
(1.0, 2.0, 3.0)
»&gt; list(a)
[1.0, 2.0, 3.0]
»&gt; b = r(‘matrix(1:6, 2, 3)’)
»&gt; print b
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
»&gt; tuple(b)
(1, 2, 3, 4, 5, 6)
»&gt; list(b)
[1, 2, 3, 4, 5, 6]
{% endcodeblock %}</p>

<h2 id="section-3">5. 注意事项</h2>

<ul>
  <li>
    <p>分清楚需要调用的R还是Python的对象；</p>
  </li>
  <li>
    <p>善于使用构建好的rpy2对象的属性和方法，比如<code class="language-python">rpy2Obj.len</code>；</p>
  </li>
  <li>
    <p>如果函数有警告（warnings），在ipython等IDE上能够执行，但是如果是脚本或者与网页服务器交互，则会产生错误。解决办法：</p>

    <blockquote>
      <ol>
        <li>
          <p>鲁莽的解决很简单，强行忽略R的警告，<code class="language-r">options(warn = -1)</code>或者R代码放入函数中<code class="language-r">suppressWarnings()</code>。</p>
        </li>
        <li>
          <p>第二种办法，如果是自己代码中使用了R的 <code class="language-r">warning()</code>函数，则将warning信息换成字符串，之后单独输出。</p>
        </li>
      </ol>
    </blockquote>
  </li>
  <li>
    <p>rpy2不是万能药，它直接继承了R的所有好和不好。</p>
  </li>
</ul>

<h3 id="section-4">参考资料</h3>

<ul>
  <li><a href="http://stackoverflow.com/questions/2125218/python-and-rpy2-calling-plot-function-with-options-that-have-in-them">stackoverflow: Python and Rpy2: Calling plot function with options that have “.” in them</a></li>
</ul>

<h3 id="section-5">更新记录</h3>

<p>2015年7月26日</p>

]]></content>
  </entry>
  
</feed>
