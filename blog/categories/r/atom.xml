<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: R | 牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2018-12-15T22:38:34+08:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[R包dplyr使用集锦]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2018/11/26/r-dplyr/"/>
    <updated>2018-11-26T16:31:58+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2018/11/26/r-dplyr</id>
    <content type="html"><![CDATA[<h2 id="span-stylecolor-bluedplyrspan">1. 使用<span style="color: blue">dplyr</span>包的好处</h2>

<ol>
  <li>
    <p>大多数时间在操作<code>tbl_df</code>对象，而不是<code>data.frame</code>（特别是含有<code>factor</code>的<code>data.frame</code>）。</p>
  </li>
  <li>
    <p>与<span style="color: blue">magrittr</span>包的管道更好地结合。</p>
  </li>
  <li>
    <p>更丰富的列操作，例如<code>mutate</code>、<code>select</code>。<code>group_by</code>会节省很多for循环。</p>
  </li>
</ol>

<!--more-->

<h2 id="section">2. 列操作</h2>

<ul>
  <li>
    <p><code>filter()</code>：过滤列，需要输入一个逻辑向量（注意<code>xor(x, y)</code>：x和y并集除去交集的部分。<code>between(x, left, right)</code>：left &lt;= x &lt;= right。<code>near(x, y)</code>：x和y在一定精度下相等，比<code>==</code>安全）。直接使用列名操作，例如<code>year == 2018</code>。多列操作相当于<code>&amp;</code>。受<code>group</code>操作影响。返回一个空的表格，只保留列名，<code>filter(x, FALSE)</code>。</p>
  </li>
  <li>
    <p><code>arrange()</code>：列排序（默认升序）。多列操作时，先排序第一个，再对第一个相等的排第二个。<code>desc()</code>降序排列。<code>.by_group = FALSE</code>控制是否需要按照group进行组内操作。</p>
  </li>
  <li>
    <p><code>select()</code>：选择列，重新组合新的<code>tbl_df</code>。结合<span style="color: blue">tidyselect</span>包<code>的starts_with()</code>前缀、<code>end_with()</code>后缀、<code>contains()</code>部分字符串、<code>matches()</code>正则匹配、<code>num_range</code>类似V01和x02之类、<code>everything()</code>（剩余）所有的列、<code>last_col(offset = n)</code>倒数第n+1列（默认n为0）。<code>select(Col1 = col1)</code>更改col1列名为Col1，并只返回Col1列。<code>rename(Col1 = col1)</code>返回全部列，但更改列名为Col1。不受<code>group</code>操作影响。</p>
  </li>
  <li>
    <p><code>mutate()</code>：增加列，返回原始对象和增加列，增加列放置最后。<code>transmute()</code>：只返回增加的列。受<code>group</code>操作影响。</p>
  </li>
  <li>
    <p><code>summerise()</code>：聚合列，对某一列或多列进行聚合操作。比如，求均值、方差、极大/小值等。受<code>group</code>操作影响。</p>
  </li>
  <li>
    <p><code>filter()</code>、<code>arrange()</code>、<code>mutate()</code>、<code>select()</code>、<code>transmute()</code>和<code>summerise()</code>：有<code>_all()</code>、<code>_at()</code>和<code>_if()</code>操作，分别表示对全部列、指定列（序号<code>1:4</code>和<code>-1:-2</code>）和满足条件的列操作。参数中的<code>.funs</code>操作是一个匿名函数，例如<code>.funs = funs(ifelse(x, ., NA))</code>，<code>.</code>表示对应的列。同时，<code>.funs</code>可以有多个操作(同时赋值列名)，比如<code>.funs = funs(repNA = ifelse(x, ., NA), repEmp = replace_na(., ''))</code>。使用<code>expr(.)</code>引用列名。</p>
  </li>
  <li>
    <p><code>$</code>依然有效，可以方便取某列或者对某列赋值。</p>
  </li>
</ul>

<h2 id="section-1">3. 行操作</h2>

<ul>
  <li>
    <p><code>sample_n()</code>和<code>sample_frac()</code>：随机选择行。</p>
  </li>
  <li>
    <p><code>top_n()</code>：选择前n行。可以使用负数值，表示倒数n行。</p>
  </li>
  <li>
    <p><code>slice()</code>: 根据行号选择。可以选择多行。受<code>group</code>操作影响。</p>
  </li>
</ul>

<h2 id="section-2">4. 两个表的操作</h2>

<ul>
  <li>
    <p><code>inner_join(x, y)</code>：按照指定的列（可以多列），只返回x和y的共同内容。</p>
  </li>
  <li>
    <p><code>left_join(x, y)</code>：按照指定的列（可以多列），返回x和y相同内容和剩余x内容（y中没有的用<code>NA</code>替代）。</p>
  </li>
  <li>
    <p><code>right_join(x, y)</code>：等价于<code>left_join(y, x)</code>。</p>
  </li>
  <li>
    <p><code>full_join(x, y)</code>：全部x和y内容（没有的用<code>NA</code>代替）。</p>
  </li>
  <li>
    <p><code>semi_join(x, y, by)</code>：按照指定的列（可以多列），返回x中与y相同的内容。制定列可以写为<code>by = c('col1', 'col2')</code>或者<code>by = c('colx1' = 'coly1', 'colx2' = 'coly2')</code>。</p>
  </li>
  <li>
    <p><code>anti_join(x, y)</code>：<code>semi_join()</code>后x剩余的内容。</p>
  </li>
  <li>
    <p><code>bind_rows(x, y)</code>和<code>bind_cols(x, y)</code>：行和列连接。</p>
  </li>
  <li>
    <p><code>intersect(x, y)</code>、<code>setdiff(x, y)</code>和<code>union(x, y)</code>：对行判断，x和y的交集、x中的余集和并集。</p>
  </li>
  <li>
    <p><code>setequal(x, y)</code>：x和y的行是否相同（与行顺序无关）。</p>
  </li>
</ul>

<h2 id="section-3">5. 行名操作</h2>

<ul>
  <li>
    <p><code>rownames_to_column()</code>：把行名变成某列。</p>
  </li>
  <li>
    <p><code>column_to_rownames()</code>：把某列变为行名。</p>
  </li>
</ul>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>Hadley Wickham, Garrett Grolemund: <a href="https://r4ds.had.co.nz/">R for Data Science</a>.</p>
  </li>
  <li>
    <p><a href="https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html">dplyr vignettes</a></p>
  </li>
  <li>
    <p><a href="https://dplyr.tidyverse.org/">dplyr in tidyverse</a></p>
  </li>
  <li>
    <p><a href="https://www.rstudio.com/resources/cheatsheets/">RStudio Cheat Sheets</a></p>
  </li>
</ul>

<h3 id="section-4">更新记录</h3>

<p>2018年12月15日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R和Rcpp的性能检测]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2018/10/03/profile-r-and-rcpp/"/>
    <updated>2018-10-03T19:38:37+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2018/10/03/profile-r-and-rcpp</id>
    <content type="html"><![CDATA[<h2 id="r">1. R性能检测</h2>

<p>直接使用<span style="color: blue">profvis</span>包即可，例如<a href="https://rstudio.github.io/profvis/">示例</a>。</p>

<h2 id="rcpp">2. Rcpp性能检测</h2>

<h3 id="section">2.1 安装依赖软件</h3>

<p><figure class='code'><figcaption><span>Pre-requested tools </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo dnf install gperftools-devel google-perftools graphviz ghostscript kcachegrind
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->

<h3 id="section-1">2.2 编译</h3>

<p>在包（包名称为<code>Mypkg</code>）目录<code>src</code>建立如下文件：</p>

<p><figure class='code'><figcaption><span>Profiler Rcpp code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;Rcpp.h&gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;gperftools/profiler.h&amp;gt;&lt;/Rcpp.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">Rcpp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [[Rcpp::export]]</span>
</span><span class='line'><span class="n">SEXP</span> <span class="n">start_profiler</span><span class="p">(</span><span class="n">SEXP</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ProfilerStart</span><span class="p">(</span><span class="n">as</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">const</span> <span class="kt">char</span><span class="o">*&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="n">str</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">R_NilValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [[Rcpp::export]]</span>
</span><span class='line'><span class="n">SEXP</span> <span class="n">stop_profiler</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ProfilerStop</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">R_NilValue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>包目录<code>src</code>的Makevars文件中添加<code>-lprofile</code>选项，例如<code>PKG_LIBS = $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -lprofiler</code>。之后，安装包，并重新载入。</p>

<h3 id="section-2">2.3 调试</h3>

<p>使用方法为：</p>

<p><figure class='code'><figcaption><span>Profiling </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>Mypkg<span class="o">:::</span>start_profiler<span class="p">(</span>“<span class="o">/</span>tmp<span class="o">/</span>profile.out”<span class="p">)</span>
</span><span class='line'>run_cpp_codes<span class="p">()</span>
</span><span class='line'>Mypkg<span class="o">:::</span>stop_profiler<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>查看profile结果：</p>

<p><figure class='code'><figcaption><span>Profiling results </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">## text</span>
</span><span class='line'>pprof –text src/Mypkg.so /tmp/profile.out&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;pdf&quot;</span>&gt;pdf&lt;/h2&gt;
</span><span class='line'>&lt;p&gt;pprof –pdf src/Mypkg.so /tmp/profile.out <span class="p">&amp;</span>gt<span class="p">;</span> profile.pdf&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;kcachegrind&quot;</span>&gt;kcachegrind&lt;/h2&gt;
</span><span class='line'>&lt;p&gt;pprof –callgrind src/Mypkg.so R/profile.out <span class="p">&amp;</span>gt<span class="p">;</span> profile.res
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p><a href="https://arxiv.org/abs/1104.3889">Introduction to High-Performance Computing with R by Dr. Dirk Eddelbuettel</a></p>
  </li>
  <li>
    <p><a href="https://minimallysufficient.github.io/r%20programming%20cpp/2018/02/16/profiling-rcpp-packages.html">Profiling Rcpp packages</a></p>
  </li>
  <li>
    <p><a href="https://airekans.github.io/cpp/2014/07/04/gperftools-profile">用gperftools对C/C++程序进行profile</a></p>
  </li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2018年10月4日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RcppParallel并行计算]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2018/07/19/rcppparallel-test/"/>
    <updated>2018-07-19T22:19:24+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2018/07/19/rcppparallel-test</id>
    <content type="html"><![CDATA[<p>在之前的<a href="http://yulongniu.bionutshell.org/blog/2014/06/25/parallel-package/">博文</a>中，我详细讨论了使用多种R包实现并行计算。其中，提到一个非常重要的问题：</p>

<pre><code>当循环数很大时（1万以上），`foreach`会变得非常慢。
</code></pre>

<p>这个问题在Florian Privé的<a href="https://privefl.github.io/blog/a-guide-to-parallelism-in-r/">A guide to parallelism in R</a>中也提到，解释是<code>foreach</code>每次只合并100个循环结果。</p>

<!--more-->

<h2 id="section">1. 测试</h2>

<p>我尝试使用<span style="color: blue">RcppParallel</span>包调用<code>C++</code>的并行方法。结论是：<strong>在循环数很大时，<span style="color: blue">RcppParallel</span>包提供的并行方法优于<code>foreach</code></strong>。</p>

<p>一个简单的测试场景：对一个数值向量的每个元素做平方根运算，结果按原始顺序返回。在<a href="https://gist.github.com/YulongNiu/add0d9f066299613b64b8458fd5d741a">Gist1</a>和<a href="https://gist.github.com/YulongNiu/9331ea0d3ef46f0571c5f2dc061c3f8a">Gist2</a>中，分别实现了：</p>

<ul>
  <li>
    <p><code>SqrtR</code>：用循环非并行操作每个元素。这种方法在<code>R</code>语言编程中不推荐，而应该尽量“向量化”操作。</p>
  </li>
  <li>
    <p><code>SqrtRforeach</code>：<code>foreach</code>并行版本。</p>
  </li>
  <li>
    <p><code>SqrtRParSapply</code>: <code>parSapply</code>并行版本。</p>
  </li>
  <li>
    <p><code>SqrtCpp</code>：<code>C++</code>非并行版本。</p>
  </li>
  <li>
    <p><code>SqrtCppPara</code>：<span style="color: blue">RcppParallel</span>包的<code>C++</code>并行版本。</p>
  </li>
  <li>
    <p><code>sqrt</code>：R内置的向量化方法，<code>C</code>非并行版本。</p>
  </li>
</ul>

<p>首先，比较5种实现效率，并行计算调用8个线程（Intel i7-4790 CPU@3.6GHz）。测试结果显示<code>SqrtRPara</code>（使用<code>foreach</code>）和非向量化的R版本<code>SqrtR</code>效率较低。</p>

<p><figure class='code'><figcaption><span>5 versions </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmp1 <span class="p">&amp;</span>lt<span class="p">;</span>- runif<span class="o">(</span>10e3<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;all.equal<span class="o">(</span>SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>          sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>          SqrtR<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>          SqrtRforeach<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>          SqrtRParSapply<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>          SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;true&quot;</span>&gt;TRUE&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;microbenchmark<span class="o">(</span>
</span><span class='line'>    SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>    sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>    SqrtR<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>    SqrtRforeach<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>    SqrtRParSapply<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>    SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;unit-microseconds&quot;</span>&gt;Unit: microseconds&lt;/h2&gt;
</span><span class='line'>&lt;p&gt;##                 expr         min          lq         mean       median
</span><span class='line'><span class="c">##        SqrtCpp(tmp1)      56.295      72.648 9.338755e+01      82.0335</span>
</span><span class='line'><span class="c">##           sqrt(tmp1)      36.216      46.074 4.865115e+01      48.3090</span>
</span><span class='line'><span class="c">##          SqrtR(tmp1)    3030.682    3116.718 4.229971e+03    3947.9380</span>
</span><span class='line'><span class="c">##   SqrtRforeach(tmp1) 1488851.181 1532937.096 1.561865e+06 1547849.9610</span>
</span><span class='line'><span class="c">## SqrtRParSapply(tmp1)  954757.348  963478.755 9.701841e+05  969925.9090</span>
</span><span class='line'><span class="c">##    SqrtCppPara(tmp1)      23.837      79.314 1.069003e+02     104.5975</span>
</span><span class='line'><span class="c">##           uq         max neval</span>
</span><span class='line'><span class="c">##      89.0800    1183.279   100</span>
</span><span class='line'><span class="c">##      52.2995      66.875   100</span>
</span><span class='line'><span class="c">##    4560.0930   10391.379   100</span>
</span><span class='line'><span class="c">## 1584297.5760 1750382.995   100</span>
</span><span class='line'><span class="c">##  974233.5690 1012400.281   100</span>
</span><span class='line'><span class="c">##     111.9160    1331.442   100&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></p>

<p>然后，增加循环数，比较效率较高的前三种方法。测试结果显示调用<span style="color: blue">RcppParallel</span>包的<code>C++</code>并行版本<code>SqrtCppPara</code>胜出。</p>

<p><figure class='code'><figcaption><span>top 3 versions </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmp1 <span class="p">&amp;</span>lt<span class="p">;</span>- runif<span class="o">(</span>10e6<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;all.equal<span class="o">(</span>SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>          sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>          SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;true-1&quot;</span>&gt;TRUE&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;microbenchmark<span class="o">(</span>
</span><span class='line'>  SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>  sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class='line'>  SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;unit-milliseconds&quot;</span>&gt;Unit: milliseconds&lt;/h2&gt;
</span><span class='line'>&lt;p&gt;##               expr      min       lq     mean   median       uq       max neval
</span><span class='line'><span class="c">##      SqrtCpp(tmp1) 76.68263 78.55146 82.51442 79.48709 87.03026 100.56873   100</span>
</span><span class='line'><span class="c">##         sqrt(tmp1) 52.19705 53.67441 58.16940 54.60512 66.67642  70.94672   100</span>
</span><span class='line'><span class="c">##  SqrtCppPara(tmp1) 37.10116 38.34199 42.23896 39.17889 42.98785  61.94529   100</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2 id="vectorlist">2. 使用<code>vector</code>代替<code>List</code></h2>

<p>在使用<span style="color: blue">RcppParallel</span>并行计算时，不能在并行循环中调用<code>Rcpp::List</code>对象。一个解决办法是：使用<code>std::vector</code>替代<code>Rcpp:List</code>。例如，<code>List</code>中都是数值向量，那么可以建立<code>std::vector&lt;Rcpp::NumericVector&gt;</code>对象替代。
<a href="https://gist.github.com/YulongNiu/0a11282216162b6e350c9575b68e91cc">Gist3</a>中提供了一个例子。这种方法的局限在于<code>List</code>中每一个元素的类型需要相同。</p>

<h2 id="section-1">3. 同步</h2>

<p>如果多个线程同时操作某一个共享内存对象，需要在<span style="color: blue">RcppParallel</span>包中使用“锁”。如<a href="https://gist.github.com/YulongNiu/5af268df461c8890c73c9640ae9ac754">Gist4</a>所示，多个线程都需要操作<code>estcount</code>对象。测试代码如下：</p>

<p><figure class='code'><figcaption><span>Synchronization </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="kn">library</span><span class="p">(</span>‘Rcpp’<span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span>sourceCpp<span class="p">(</span>‘TestSynchron.cpp’<span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span>n <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="m">10</span>
</span><span class='line'>g <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="m">1000</span>
</span><span class='line'>ecin <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kp">sample</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">9</span><span class="p">,</span> g<span class="o">*</span>n<span class="p">,</span> replace <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span> <span class="o">%&amp;gt;%</span>
</span><span class='line'>  <span class="kp">split</span><span class="p">(</span><span class="m">1</span><span class="o">:</span>g<span class="p">)</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span>ecin <span class="o">%&amp;gt;%</span> unlist <span class="o">%&amp;gt;%</span> <span class="kp">table</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span>TestShare<span class="p">(</span>ecin<span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>如果去掉<a href="https://gist.github.com/YulongNiu/5af268df461c8890c73c9640ae9ac754">Gist4</a>代码中的第<code>27</code>和<code>31</code>行，可以发现测试结果不正确。</p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="http://gallery.rcpp.org/articles/parallel-vector-sum/">Summing a Vector in Parallel with RcppParallel</a></p>
  </li>
  <li>
    <p><a href="https://scc.ustc.edu.cn/zlsc/tc4600/intel/2017.0.098/advisor/help/GUID-D98B389E-61B9-414A-9450-D28EF9F61A95.htm">Intel TBB Simple Mutex - Example</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2018年10月5日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么不推荐在R语言中随意按照下标操作矩阵]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/07/21/subset-matrix-in-r/"/>
    <updated>2016-07-21T19:35:29+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/07/21/subset-matrix-in-r</id>
    <content type="html"><![CDATA[<p>这篇博文的目的是展示R语言中下标操作矩阵的潜在问题。R语言提供了多种方法提取一个矩阵的单个或者部分元素，不同方法对应的效率在Hadley Wickham的<a href="http://adv-r.had.co.nz/Performance.html#language-performance">Advance R</a>中已有讨论。这些方法中，使用最广泛的是通过下标（行或者列）取值，即操作符<code class="language-R">[</code>。然而，这种方法存在潜在问题，即内存中会拷贝原始对象。</p>

<p>举例：首先建立一个矩阵，之后取这个矩阵除了第一行之外的部分，接下来操作这个部分矩阵。</p>

<p><figure class='code'><figcaption><span>manipulate </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='R'><span class='line'><span class="c1">## step1: build matrix</span>
</span><span class='line'>n <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="m">8000</span>
</span><span class='line'>tmp1 <span class="o">&amp;</span>lt<span class="p">;</span><span class="o">-</span> <span class="kt">matrix</span><span class="p">(</span>rnorm<span class="p">(</span>n <span class="o">*</span> n<span class="p">),</span> nrow <span class="o">=</span> n<span class="p">,</span> ncol <span class="o">=</span> n<span class="p">)</span>
</span><span class='line'><span class="kp">gc</span><span class="p">()</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>h2 id<span class="o">=</span><span class="s">&quot;step2-manipulate-a-subset-of-matrix&quot;</span><span class="o">&gt;</span>step2<span class="o">:</span> manipulate a subset of <span class="kt">matrix</span><span class="o">&lt;/</span>h2<span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span><span class="kp">sink</span><span class="p">(</span>‘<span class="o">/</span>dev<span class="o">/</span>null’<span class="p">)</span>
</span><span class='line'><span class="kp">apply</span><span class="p">(</span>tmp1<span class="p">[</span><span class="m">2</span><span class="o">:</span>n<span class="p">,</span> <span class="p">],</span> <span class="m">1</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> x<span class="p">[</span><span class="m">1</span><span class="p">])</span>
</span><span class='line'><span class="kp">sink</span><span class="p">()</span><span class="o">&lt;/</span>p<span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span>h2 id<span class="o">=</span><span class="s">&quot;step3-garbage-collection&quot;</span><span class="o">&gt;</span>step3<span class="o">:</span> garbage collection<span class="o">&lt;/</span>h2<span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span>p<span class="o">&gt;</span><span class="kp">gc</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<!--more-->

<p>内存使用情况如下：</p>

<p><img src="http://yulongniu.bionutshell.org/images/R_apply_memory.png" title="image" alt="UCSC下载rRNA注释" /></p>

<ul>
  <li>
    <p>标记1内存上升，因为建立了<code class="language-R">tmp1</code>的矩阵；</p>
  </li>
  <li>
    <p>标记2内存再次上升，主要因为使用下标取矩阵操作，<code class="language-R">tmp1[2:n, ]</code>；</p>
  </li>
  <li>
    <p>标记3内存下降，因为手动执行垃圾回收。</p>
  </li>
</ul>

<p>可以明显看到内存中多余的垃圾对象。如果使用<code class="language-R">for</code>循环形式，就可以有效避免内存对象拷贝。虽然，R在内存空间不足时，会自动执行<code class="language-R">gc()</code>。但是，执行程序时，不能全指望自动垃圾回收，毕竟有时回收得并不及时，而新的对象又相继生成。这种情况下，内存空间不足就成为很严重的问题。</p>

<p>R版本3.3.1。</p>

<h3 id="section">更新记录</h3>

<p>2016年7月21日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rcpp操作矩阵和向量集锦]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/01/07/rcpp-matrix/"/>
    <updated>2016-01-07T20:50:41+08:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/01/07/rcpp-matrix</id>
    <content type="html"><![CDATA[<p>收集和记录<span style="color: blue">Rcpp</span>或者<span style="color: blue">RcppArmadillo</span>操作矩阵和向量。</p>

<h2 id="span-stylecolor-bluercppspan">1. <span style="color: blue">Rcpp</span></h2>

<ul>
  <li>可以使用逻辑下标（<code>LogicalVector</code>）对向量和列表<a href="http://gallery.rcpp.org/articles/subsetting/">取值</a>。</li>
</ul>

<!--more-->

<h2 id="span-stylecolor-bluercpparmadillospan">2. <span style="color: blue">RcppArmadillo</span></h2>

<p>基本类型是<code>mat</code>、<code>vec</code>（<code>colvec</code>）和<code>rowvec</code>。</p>

<ul>
  <li>
    <p>属性</p>

    <ul>
      <li>对于矩阵，行数：<code>m.n_rows;</code>；列数：<code>m.n_cols;</code>；维度：<code>m.size();</code>或<code>size(m);</code>。对于向量，元素数：<code>v.n_elem;</code>。</li>
    </ul>
  </li>
  <li>
    <p>特殊向量或矩阵</p>

    <ul>
      <li>
        <p>全是1<code>ones&lt;mat&gt;(3, 4);</code>/<code>vec(10, fill::ones);</code>/；全是0<code>zeros&lt;vec&gt;(10);</code>/<code>mat(3, 4, fill::zeros);</code>；全是某个数<code>mat a(4, 5); a.fill(123.4);</code>。</p>
      </li>
      <li>
        <p>连续向量，规定长度<code>linspace&lt;vec&gt;(0, 5, 6);</code>；连续向量，规定间距<code>regspace&lt;vec&gt;(0, 2, 9);</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>取值</p>

    <ul>
      <li>
        <p>对于向量，连续取值：<code>v.subvec(1stIdx, lastIdx);</code>；非连续，可以考虑使用<code>find()</code>函数，比如：<code>v.elem(find(v &gt; 0));</code>。</p>
      </li>
      <li>
        <p>对于矩阵，连续取值：<code>m.col(Idx);</code>/<code>m.row(Idx);</code>/<code>m.cols(Idx);</code>/<code>m.rows(Idx);</code>/<code>m.submat(1stRowIdx, lastRowIdx, 1stColIdx, lastColIdx);</code>；非连续，<code>m.submat(vecRowIdx, vecColIdx);</code>。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Rcpp矩阵转换为RcppArmadillo矩阵，可以避免拷贝矩阵，以提升效率，<code class="language-cpp">mat(ptr_aux_mem, n_rows, n_cols, copy_aux_mem = true, strict = false)</code>。同样道理，可以转化向量。例如：</p>
  </li>
</ul>

<p><figure class='code'><figcaption><span>transfer matrix and vector </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">TransferMatArma</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">NumericMatrix</span> <span class="n">x</span><span class="p">,</span> <span class="n">Rcpp</span><span class="o">::</span><span class="n">NumericVector</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mat</span> <span class="n">tx</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">x</span><span class="p">.</span><span class="n">nrow</span><span class="p">(),</span> <span class="n">x</span><span class="p">.</span><span class="n">ncol</span><span class="p">(),</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>    <span class="n">vec</span> <span class="nf">ty</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="nb">false</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tx</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">NumericVector</span> <span class="n">TransferMatRcpp</span><span class="p">(</span><span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">x</span><span class="p">,</span> <span class="n">arma</span><span class="o">::</span><span class="n">vec</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NumericMatrix</span> <span class="n">tx</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">n_rows</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">n_cols</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
</span><span class='line'>    <span class="n">NumericVector</span> <span class="nf">ty</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">y</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ty</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 不要使用as&lt;IntegerVector&gt;(wrap(y))，会有内存泄露。</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></IntegerVector></p>

<ul>
  <li>使用<code>.each_col()</code>/<code>.each_row()</code>/<code>.for_each()</code>替代<code>apply()</code></li>
</ul>

<p><figure class='code'><figcaption><span>replace apply() </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">TestMat</span><span class="p">(</span><span class="n">arma</span><span class="o">::</span><span class="n">mat</span> <span class="n">M</span><span class="p">,</span> <span class="kt">double</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">M</span><span class="p">.</span><span class="n">for_each</span><span class="p">(</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;mat::elem_type&amp;amp; val&quot;</span><span class="o">&gt;</span><span class="n">a</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">val</span> <span class="o">=</span> <span class="n">val</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">?</span> <span class="nl">val</span> <span class="p">:</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">M</span><span class="p">.</span><span class="n">each_row</span><span class="p">(</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;rowvec&amp;amp; r&quot;</span><span class="o">&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">r</span> <span class="o">/=</span> <span class="n">r</span><span class="p">.</span><span class="n">max</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">M</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>使用<code>sum(M, 0);</code>和<code>sum(M, 1);</code>分别替代<code>colSums(M)</code>和<code>rowSums(M)</code>。</li>
</ul>

<h2 id="span-stylecolor-bluebigmemoryspan">3. <span style="color: blue">bigmemory</span></h2>

<p><span style="color: blue">bigmemory</span>包提供了四种数据类型的矩阵，即<code>double</code>（默认）、<code>integer</code>、<code>short</code>和<code>char</code>。对于<code>big.matrix</code>对象<code>pMat</code>，四种类型通过通过<code>MatrixAccessor&lt;double&gt; macc(*pMat)</code>、<code>MatrixAccessor&lt;int&gt; macc(*pMat)</code>、<code>MatrixAccessor&lt;short&gt; macc(*pMat)</code>和<code>MatrixAccessor&lt;char&gt; macc(*pMat)</code>提取元素。<code>pMat</code>有三种属性<code>nrow()</code>、<code>ncol()</code>和<code>matrix_type()</code>可以使用。一下代码示例展示了将<code>big.matrix</code>转换为<code>matrix</code>：</p>

<p><figure class='code'><figcaption><span>manipulate big.matrix with cpp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;Rcpp.h&gt;</span>
</span><span class='line'><span class="c1">// [[Rcpp::depends(BH, bigmemory)]]</span>
</span><span class='line'><span class="cp">#include &amp;lt;bigmemory/MatrixAccessor.hpp&amp;gt;&lt;/Rcpp.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-numeric&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">numeric</span><span class="o">&gt;&lt;/</span><span class="n">numeric</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">Rcpp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [[Rcpp::export]]</span>
</span><span class='line'><span class="n">Rcpp</span><span class="o">::</span><span class="n">NumericMatrix</span> <span class="n">TestBigMat</span><span class="p">(</span><span class="n">XPtr</span><span class="o">&lt;</span><span class="n">BigMatrix</span><span class="o">&gt;</span> <span class="n">pMat</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">BigMatrix</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">MatrixAccessor</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">macc</span><span class="p">(</span><span class="o">*</span><span class="n">pMat</span><span class="p">);</span><span class="o">&lt;/</span><span class="kt">int</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">pMat</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nrow</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">pMat</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ncol</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NumericMatrix</span> <span class="n">resMat</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">resMat</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">macc</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">resMat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>注意事项：</p>

<ul>
  <li>
    <p>获取元素为<code>列-行</code>形式，因为<code>big.matrix</code>按照列存储矩阵。例如<code>macc[j][i]</code>表示<code>i-1</code>行的<code>j-1</code>元素。</p>
  </li>
  <li>
    <p>调用函数使用<code>big.matrix</code>的地址，例如<code>TestBigMat(bigmat@address)</code>。</p>
  </li>
</ul>

<p>同样，<span style="color: blue">RcppArmadillo</span>也能与<span style="color: blue">bigmemory</span>结合，例如：</p>

<p><figure class='code'><figcaption><span>manipulate big.matrix with armadillo </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;RcppArmadillo.h&gt;</span>
</span><span class='line'><span class="cp">#include &amp;lt;bigmemory/MatrixAccessor.hpp&amp;gt;&lt;/RcppArmadillo.h&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="n">id</span><span class="o">=</span><span class="s">&quot;include-numeric-1&quot;</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">numeric</span><span class="o">&gt;&lt;/</span><span class="n">numeric</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [[Rcpp::depends(RcppArmadillo, bigmemory)]]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">Rcpp</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">arma</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// [[Rcpp::export]]</span>
</span><span class='line'><span class="n">Rcpp</span><span class="o">::</span><span class="n">NumericMatrix</span> <span class="n">TestBigMatArma</span><span class="p">(</span><span class="n">SEXP</span> <span class="n">pMat</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">XPtr</span><span class="o">&lt;</span><span class="n">BigMatrix</span><span class="o">&gt;</span> <span class="n">xpMat</span><span class="p">(</span><span class="n">pMat</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">BigMatrix</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Mat</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">macc</span> <span class="o">=</span> <span class="n">Mat</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">xpMat</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">matrix</span><span class="p">(),</span> <span class="n">xpMat</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nrow</span><span class="p">(),</span> <span class="n">xpMat</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ncol</span><span class="p">(),</span> <span class="nb">false</span><span class="p">);</span><span class="o">&lt;/</span><span class="kt">int</span><span class="o">&gt;&lt;/</span><span class="kt">int</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">xpMat</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">nrow</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">xpMat</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">ncol</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">NumericMatrix</span> <span class="n">resMat</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">resMat</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="n">macc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">resMat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="http://arma.sourceforge.net/docs.html#adv_constructors_mat">Armadillo矩阵</a></p>
  </li>
  <li>
    <p><a href="https://stackoverflow.com/questions/13038256/subset-of-a-rcpp-matrix-that-matches-a-logical-statement">StackOverflow中矩阵提取</a></p>
  </li>
  <li>
    <p><a href="https://github.com/petewerner/misc/wiki/RcppArmadillo-cheatsheet">RcppArmadillo和R对照表</a></p>
  </li>
  <li>
    <p><a href="https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-quickref.pdf">Rcpp Quick Reference Guide</a></p>
  </li>
  <li>
    <p><a href="http://statr.me/rcpp-note/">Rcpp note</a></p>
  </li>
  <li>
    <p><a href="https://teuder.github.io/rcpp4everyone_en/">Rcpp for everyone</a></p>
  </li>
  <li>
    <p><a href="https://thecoatlessprofessor.com/programming/unofficial-rcpp-api-documentation/">Unofficial Rcpp API Documentation</a></p>
  </li>
</ul>

<h3 id="section">更新记录</h3>

<p>2018年9月17日</p>

]]></content>
  </entry>
  
</feed>
