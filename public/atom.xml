<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[牛牛龙]]></title>
  <link href="http://yulongniu.bionutshell.org/atom.xml" rel="self"/>
  <link href="http://yulongniu.bionutshell.org/"/>
  <updated>2019-10-31T16:39:02+01:00</updated>
  <id>http://yulongniu.bionutshell.org/</id>
  <author>
    <name><![CDATA[Yulong Niu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[小的改进能提升文章审稿速度]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2019/05/04/small-changes-smooth-review/"/>
    <updated>2019-05-04T16:03:35+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2019/05/04/small-changes-smooth-review</id>
    <content type="html"><![CDATA[<p>我最近看到Nature的一篇<a href="https://www.nature.com/articles/d41586-019-01431-z">报道</a>，讲述一些小的改进能提升文章的审稿速度。内容包括了草稿排版、写作和图表等方面，简要摘录关键信息。尽管遵循这些建议不会增加或减少文章被接受的概率，但能更加清楚地向读者和审稿人展现自己文章的核心内容。</p>

<!--more-->

<ol>
  <li>
    <p>草稿排版</p>

    <ul>
      <li>
        <p>宽行间距和大号字体。单列排版时，推荐使用1.5倍行距，每行12-15个单词。</p>
      </li>
      <li>
        <p>连续行编号，方便审稿人指出问题所在位置。</p>
      </li>
      <li>
        <p>图和图例尽量靠近相关文字。</p>
      </li>
    </ul>
  </li>
  <li>
    <p>写作</p>

    <ul>
      <li>
        <p>避免主观词汇。审稿人通常反感主观词汇，例如：unprecedented、 paradigm shift、 amazing、 dramatic、 interesting、 remarkable等。</p>
      </li>
      <li>
        <p>减少使用缩写。当文中出现5次或以上时，再考虑使用缩写。但一些熟知的专业名词，例如DNA、RNA等要使用缩写。</p>
      </li>
      <li>
        <p>避免使用无方向性词汇，influence。应该明确指出怎样影响（增加或减少），最好能有具体的数值表述。例如，改变×××倍提高了×××产量等。</p>
      </li>
      <li>
        <p>避免在所有情况下都使用significant。应为signficant容易和统计检验混淆，应该使用具体数值描述影响。</p>
      </li>
      <li>
        <p>文章起一个陈述性的题目。避免使用暗示性、假设性的题目，而应该具体描述文章的发现。注意不要夸大结果或者模糊描述。“通过避免使用主观词汇、仔细描述文章真实而非潜在暗示的发现，应该能找到一个可读性高、信息量大、有趣的题目，从而不会夸大文章的发现”。</p>
      </li>
      <li>
        <p>摘要写法，Nature提供了一个<a href="https://www.nature.com/documents/nature-summary-paragraph.pdf">模板</a>。</p>
      </li>
    </ul>

    <p><img class="middle" src="http://yulongniu.bionutshell.org/images/Nature_abstract_template.jpg" width="900" height="900" title="Emacs ESS #1" alt="a snap of Emacs ESS" /></p>
  </li>
  <li>
    <p>数据和图标</p>

    <ul>
      <li>
        <p>定义不确定量（统计学）。在图例中描述error bar、盒箱图等不确定量的定义。</p>
      </li>
      <li>
        <p>使用<a href="https://www.nature.com/collections/qghhqm">统计检验</a>。</p>
      </li>
      <li>
        <p>展示和提取潜在数据。例如使用散点图（小数据）、盒箱图/小提琴图（大数据）等、提交数据至数据库等。</p>
      </li>
      <li>
        <p>合理上色。避免使用彩虹图、使用<a href="http://colorbrewer2.org/#type=sequential&amp;scheme=BuGn&amp;n=3">ColorBrewer</a>等更加友好的配色方案。比如一种diverge配色方案（热图），中间数据使用白色、两边渐进黄蓝强对比色。</p>
      </li>
      <li>
        <p>简化图。去除3D、阴影或不必要的颜色等。</p>
      </li>
      <li>
        <p>图例中添加小标题。</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="section">参考资料</h3>

<ul>
  <li>
    <p><a href="https://www.nature.com/articles/d41586-019-01431-z">How small changes to a paper can help to smooth the review process</a></p>
  </li>
  <li>
    <p><a href="https://www.nature.com/collections/qghhqm">Statistics for Biologists</a></p>
  </li>
  <li>
    <p><a href="https://academic.oup.com/qjmed/article/103/3/207/1589103">When I use a word … Declarative titles</a></p>
  </li>
</ul>

<h3 id="section-1">更新记录</h3>

<p>2019年05月04日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DESeq2包的对比组设计]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2019/04/15/deseq2-design/"/>
    <updated>2019-04-15T14:58:58+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2019/04/15/deseq2-design</id>
    <content type="html"><![CDATA[<h2 id="section">1. 两两比对</h2>

<p>组A <em>vs.</em> 组B。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">DataFrame with 12 rows and 2 columns
</span><span class="line">         condition genotype
</span><span class="line">          &lt;factor&gt; &lt;factor&gt;
</span><span class="line">sample1          A        I
</span><span class="line">sample2          A        I
</span><span class="line">sample3          A        I
</span><span class="line">sample4          A       II
</span><span class="line">sample5          A       II
</span><span class="line">...            ...      ...
</span><span class="line">sample8          B        I
</span><span class="line">sample9          B        I
</span><span class="line">sample10         B       II
</span><span class="line">sample11         B       II
</span><span class="line">sample12         B       II</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pair-wise comparison </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">dds <span class="o">&lt;-</span> makeExampleDESeqDataSet<span class="p">(</span>n <span class="o">=</span> <span class="m">100</span><span class="p">,</span> m <span class="o">=</span> <span class="m">12</span><span class="p">)</span>
</span><span class="line">dds<span class="o">$</span>genotype <span class="o">&lt;-</span> <span class="kp">factor</span><span class="p">(</span><span class="kp">rep</span><span class="p">(</span><span class="kp">rep</span><span class="p">(</span><span class="kt">c</span><span class="p">(</span><span class="s">&#39;I&#39;</span><span class="p">,</span> <span class="s">&#39;II&#39;</span><span class="p">),</span> each<span class="o">=</span><span class="m">3</span><span class="p">),</span> <span class="m">2</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c1">## condition: A vs. B</span>
</span><span class="line">design<span class="p">(</span>dds<span class="p">)</span> <span class="o">&lt;-</span> <span class="o">~</span> condition
</span><span class="line">ddres <span class="o">&lt;-</span> DESeq<span class="p">(</span>dds<span class="p">)</span>
</span><span class="line">res <span class="o">&lt;-</span> results<span class="p">(</span>ddres<span class="p">,</span> contrast <span class="o">=</span> <span class="kt">c</span><span class="p">(</span><span class="s">&#39;condition&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;A&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c1">## genotype I vs. II</span>
</span><span class="line">design<span class="p">(</span>dds<span class="p">)</span> <span class="o">&lt;-</span> <span class="o">~</span> genotype
</span><span class="line">ddres <span class="o">&lt;-</span> DESeq<span class="p">(</span>dds<span class="p">)</span>
</span><span class="line">res <span class="o">&lt;-</span> results<span class="p">(</span>ddres<span class="p">,</span> contrast <span class="o">=</span> <span class="kt">c</span><span class="p">(</span><span class="s">&#39;genotype&#39;</span><span class="p">,</span> <span class="s">&#39;I&#39;</span><span class="p">,</span> <span class="s">&#39;II&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c1">## A vs. B at genotype II</span>
</span><span class="line">dds<span class="o">$</span>group <span class="o">&lt;-</span> <span class="kp">factor</span><span class="p">(</span><span class="kp">paste0</span><span class="p">(</span>dds<span class="o">$</span>genotype<span class="p">,</span> dds<span class="o">$</span>condition<span class="p">))</span>
</span><span class="line">design<span class="p">(</span>dds<span class="p">)</span> <span class="o">&lt;-</span> <span class="o">~</span> group
</span><span class="line">ddres <span class="o">&lt;-</span> DESeq<span class="p">(</span>dds<span class="p">)</span>
</span><span class="line">results<span class="p">(</span>ddres<span class="p">,</span> contrast <span class="o">=</span> <span class="kt">c</span><span class="p">(</span><span class="s">&#39;group&#39;</span><span class="p">,</span> <span class="s">&#39;IIB&#39;</span><span class="p">,</span> <span class="s">&#39;IIA&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">2. 交叉项</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pair-wise comparison </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">dds <span class="o">&lt;-</span> makeExampleDESeqDataSet<span class="p">(</span>n <span class="o">=</span> <span class="m">100</span><span class="p">,</span> m <span class="o">=</span> <span class="m">12</span><span class="p">)</span>
</span><span class="line">dds<span class="o">$</span>genotype <span class="o">&lt;-</span> <span class="kp">factor</span><span class="p">(</span><span class="kp">rep</span><span class="p">(</span><span class="kp">rep</span><span class="p">(</span><span class="kt">c</span><span class="p">(</span><span class="s">&#39;I&#39;</span><span class="p">,</span> <span class="s">&#39;II&#39;</span><span class="p">),</span> each<span class="o">=</span><span class="m">3</span><span class="p">),</span> <span class="m">2</span><span class="p">))</span>
</span><span class="line">design<span class="p">(</span>dds<span class="p">)</span> <span class="o">&lt;-</span> <span class="o">~</span> genotype <span class="o">+</span> condition <span class="o">+</span> genotype<span class="o">:</span>condition
</span><span class="line">ddres <span class="o">&lt;-</span> DESeq<span class="p">(</span>dds<span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">## A vs. B at genotype I</span>
</span><span class="line">res <span class="o">&lt;-</span> results<span class="p">(</span>ddres<span class="p">,</span> contrast <span class="o">=</span> <span class="kt">c</span><span class="p">(</span><span class="s">&#39;condition&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="s">&#39;A&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="c1">## A vs. B at genotype II</span>
</span><span class="line">res <span class="o">&lt;-</span> results<span class="p">(</span>ddres<span class="p">,</span> <span class="kt">list</span><span class="p">(</span><span class="kt">c</span><span class="p">(</span><span class="s">&#39;condition_B_vs_A&#39;</span><span class="p">,</span> <span class="s">&#39;genotypeII.conditionB&#39;</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">## condition effect *different* across genotypes</span>
</span><span class="line">res <span class="o">&lt;-</span> results<span class="p">(</span>ddres<span class="p">,</span> name <span class="o">=</span> <span class="s">&#39;genotypeII.conditionB&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中，第二例子中的<code>A vs. B at genotype II</code>与第一个的区别是，考虑了交叉项的影响。如果只是为了两两比对，可以考虑使用第一个例子的处理方法。</p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="http://master.bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#nested-indiv">Analyzing RNA-seq data with DESeq2</a></p>
  </li>
  <li>
    <p><a href="https://support.bioconductor.org/p/64352/">Question: DESeq2 factor design vs pair-wise comparison</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2019年04月15日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R包dplyr使用集锦]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2018/11/26/r-dplyr/"/>
    <updated>2018-11-26T09:31:58+01:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2018/11/26/r-dplyr</id>
    <content type="html"><![CDATA[<h2 id="span-stylecolor-bluedplyrspan">1. 使用<span style="color: blue">dplyr</span>包的好处</h2>

<ol>
  <li>
    <p>大多数时间在操作<code>tbl_df</code>对象，而不是<code>data.frame</code>（特别是含有<code>factor</code>的<code>data.frame</code>）。</p>
  </li>
  <li>
    <p>与<span style="color: blue">magrittr</span>包的管道更好地结合。</p>
  </li>
  <li>
    <p>更丰富的列操作，例如<code>mutate</code>、<code>select</code>。<code>group_by</code>会节省很多for循环。</p>
  </li>
</ol>

<!--more-->

<h2 id="section">2. 列操作</h2>

<ul>
  <li>
    <p><code>filter()</code>：过滤列，需要输入一个逻辑向量（注意<code>xor(x, y)</code>：x和y并集除去交集的部分。<code>between(x, left, right)</code>：left &lt;= x &lt;= right。<code>near(x, y)</code>：x和y在一定精度下相等，比<code>==</code>安全）。直接使用列名操作，例如<code>year == 2018</code>。多列操作相当于<code>&amp;</code>。受<code>group</code>操作影响。返回一个空的表格，只保留列名，<code>filter(x, FALSE)</code>。</p>
  </li>
  <li>
    <p><code>arrange()</code>：列排序（默认升序）。多列操作时，先排序第一个，再对第一个相等的排第二个。<code>desc()</code>降序排列。<code>.by_group = FALSE</code>控制是否需要按照group进行组内操作。</p>
  </li>
  <li>
    <p><code>select()</code>：选择列，重新组合新的<code>tbl_df</code>。结合<span style="color: blue">tidyselect</span>包<code>的starts_with()</code>前缀、<code>end_with()</code>后缀、<code>contains()</code>部分字符串、<code>matches()</code>正则匹配、<code>num_range</code>类似V01和x02之类、<code>everything()</code>（剩余）所有的列、<code>last_col(offset = n)</code>倒数第n+1列（默认n为0）。<code>select(Col1 = col1)</code>更改col1列名为Col1，并只返回Col1列。<code>rename(Col1 = col1)</code>返回全部列，但更改列名为Col1。不受<code>group</code>操作影响。</p>
  </li>
  <li>
    <p><code>mutate()</code>：增加列，返回原始对象和增加列，增加列放置最后。<code>transmute()</code>：只返回增加的列。受<code>group</code>操作影响。</p>
  </li>
  <li>
    <p><code>summerise()</code>：聚合列，对某一列或多列进行聚合操作。比如，求均值、方差、极大/小值等。受<code>group</code>操作影响。</p>
  </li>
  <li>
    <p><code>filter()</code>、<code>arrange()</code>、<code>mutate()</code>、<code>select()</code>、<code>transmute()</code>、<code>rename()</code>和<code>summerise()</code>：有<code>_all()</code>、<code>_at()</code>和<code>_if()</code>操作，分别表示对全部列、指定列（序号<code>1:4</code>和<code>-1:-2</code>）和满足条件的列操作。</p>
  </li>
</ul>

<blockquote>
  <p><code>_at()</code>使用<code>contains()</code>等函数时，<code>.var</code>参数需要处理为<code>.var = vars(contains())</code>的形式。</p>
</blockquote>

<blockquote>
  <p>参数中的<code>.funs</code>操作是一个匿名函数，例如<code>.funs = funs(ifelse(x, ., NA))</code>，<code>.</code>表示对应的列。同时，<code>.funs</code>可以有多个操作(同时赋值列名)，比如<code>.funs = funs(repNA = ifelse(x, ., NA), repEmp = replace_na(., ''))</code>。在<code>.funs</code>中使用<code>expr(.)</code>引用列名。</p>
</blockquote>

<ul>
  <li>
    <p><code>$</code>依然有效，可以方便取某列或者对某列赋值。</p>
  </li>
  <li>
    <p><code>coalesce()</code>用于转换<code>NA</code>。</p>
  </li>
</ul>

<h2 id="section-1">3. 行操作</h2>

<ul>
  <li>
    <p><code>sample_n()</code>和<code>sample_frac()</code>：随机选择行。</p>
  </li>
  <li>
    <p><code>top_n()</code>：选择前n行。可以使用负数值，表示倒数n行。</p>
  </li>
  <li>
    <p><code>slice()</code>: 根据行号选择。可以选择多行。受<code>group</code>操作影响。</p>
  </li>
  <li>
    <p><code>distinct()</code>：去除相同的行，也可以制定列。</p>
  </li>
</ul>

<h2 id="section-2">4. 两个表的操作</h2>

<ul>
  <li>
    <p><code>inner_join(x, y)</code>：按照指定的列（可以多列），只返回x和y的共同内容。</p>
  </li>
  <li>
    <p><code>left_join(x, y)</code>：按照指定的列（可以多列），返回x和y相同内容和剩余x内容（y中没有的用<code>NA</code>替代）。</p>
  </li>
  <li>
    <p><code>right_join(x, y)</code>：等价于<code>left_join(y, x)</code>。</p>
  </li>
  <li>
    <p><code>full_join(x, y)</code>：全部x和y内容（没有的用<code>NA</code>代替）。</p>
  </li>
  <li>
    <p><code>semi_join(x, y, by)</code>：按照指定的列（可以多列），返回x中与y相同的内容。制定列可以写为<code>by = c('col1', 'col2')</code>或者<code>by = c('colx1' = 'coly1', 'colx2' = 'coly2')</code>。</p>
  </li>
  <li>
    <p><code>anti_join(x, y)</code>：<code>semi_join()</code>后x剩余的内容。</p>
  </li>
  <li>
    <p><code>bind_rows(x, y)</code>和<code>bind_cols(x, y)</code>：行和列连接。</p>
  </li>
  <li>
    <p><code>intersect(x, y)</code>、<code>setdiff(x, y)</code>和<code>union(x, y)</code>：对行判断，x和y的交集、x中的余集和并集。</p>
  </li>
  <li>
    <p><code>setequal(x, y)</code>：x和y的行是否相同（与行顺序无关）。</p>
  </li>
</ul>

<h2 id="section-3">5. 行名操作</h2>

<ul>
  <li>
    <p><code>rownames_to_column()</code>：把行名变成某列。</p>
  </li>
  <li>
    <p><code>column_to_rownames()</code>：把某列变为行名。</p>
  </li>
</ul>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>Hadley Wickham, Garrett Grolemund: <a href="https://r4ds.had.co.nz/">R for Data Science</a>.</p>
  </li>
  <li>
    <p><a href="https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html">dplyr vignettes</a></p>
  </li>
  <li>
    <p><a href="https://dplyr.tidyverse.org/">dplyr in tidyverse</a></p>
  </li>
  <li>
    <p><a href="https://www.rstudio.com/resources/cheatsheets/">RStudio Cheat Sheets</a></p>
  </li>
</ul>

<h3 id="section-4">更新记录</h3>

<p>2019年04月29日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R和Rcpp的性能检测]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2018/10/03/profile-r-and-rcpp/"/>
    <updated>2018-10-03T13:38:37+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2018/10/03/profile-r-and-rcpp</id>
    <content type="html"><![CDATA[<h2 id="r">1. R性能检测</h2>

<p>直接使用<span style="color: blue">profvis</span>包即可，例如<a href="https://rstudio.github.io/profvis/">示例</a>。</p>

<h2 id="rcpp">2. Rcpp性能检测</h2>

<h3 id="section">2.1 安装依赖软件</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Pre-requested tools </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo dnf install gperftools-devel google-perftools graphviz ghostscript kcachegrind
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h3 id="section-1">2.2 编译</h3>

<p>在包（包名称为<code>Mypkg</code>）目录<code>src</code>建立如下文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Profiler Rcpp code </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;Rcpp.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;gperftools/profiler.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">Rcpp</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="c1">// [[Rcpp::export]]</span>
</span><span class="line"><span class="n">SEXP</span> <span class="nf">start_profiler</span><span class="p">(</span><span class="n">SEXP</span> <span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">ProfilerStart</span><span class="p">(</span><span class="n">as</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>
</span><span class="line">  <span class="k">return</span> <span class="n">R_NilValue</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// [[Rcpp::export]]</span>
</span><span class="line"><span class="n">SEXP</span> <span class="nf">stop_profiler</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">  <span class="n">ProfilerStop</span><span class="p">();</span>
</span><span class="line">  <span class="k">return</span> <span class="n">R_NilValue</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>包目录<code>src</code>的Makevars文件中添加<code>-lprofile</code>选项，例如<code>PKG_LIBS = $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) -lprofiler</code>。之后，安装包，并重新载入。</p>

<h3 id="section-2">2.3 调试</h3>

<p>使用方法为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Profiling </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="r"><span class="line">Mypkg<span class="o">:::</span>start_profiler<span class="p">(</span><span class="s">&quot;/tmp/profile.out&quot;</span><span class="p">)</span>
</span><span class="line">run_cpp_codes<span class="p">()</span>
</span><span class="line">Mypkg<span class="o">:::</span>stop_profiler<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查看profile结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Profiling results </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">## text</span>
</span><span class="line">pprof --text src/Mypkg.so /tmp/profile.out
</span><span class="line">
</span><span class="line"><span class="c">## pdf</span>
</span><span class="line">pprof --pdf src/Mypkg.so /tmp/profile.out &gt; profile.pdf
</span><span class="line">
</span><span class="line"><span class="c">## kcachegrind</span>
</span><span class="line">pprof --callgrind src/Mypkg.so R/profile.out &gt; profile.res
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p><a href="https://arxiv.org/abs/1104.3889">Introduction to High-Performance Computing with R by Dr. Dirk Eddelbuettel</a></p>
  </li>
  <li>
    <p><a href="https://minimallysufficient.github.io/r%20programming%20cpp/2018/02/16/profiling-rcpp-packages.html">Profiling Rcpp packages</a></p>
  </li>
  <li>
    <p><a href="https://airekans.github.io/cpp/2014/07/04/gperftools-profile">用gperftools对C/C++程序进行profile</a></p>
  </li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2018年10月4日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RcppParallel并行计算]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2018/07/19/rcppparallel-test/"/>
    <updated>2018-07-19T16:19:24+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2018/07/19/rcppparallel-test</id>
    <content type="html"><![CDATA[<p>在之前的<a href="http://yulongniu.bionutshell.org/blog/2014/06/25/parallel-package/">博文</a>中，我详细讨论了使用多种R包实现并行计算。其中，提到一个非常重要的问题：</p>

<pre><code>当循环数很大时（1万以上），`foreach`会变得非常慢。
</code></pre>

<p>这个问题在Florian Privé的<a href="https://privefl.github.io/blog/a-guide-to-parallelism-in-r/">A guide to parallelism in R</a>中也提到，解释是<code>foreach</code>每次只合并100个循环结果。</p>

<!--more-->

<h2 id="section">1. 测试</h2>

<p>我尝试使用<span style="color: blue">RcppParallel</span>包调用<code>C++</code>的并行方法。结论是：<strong>在循环数很大时，<span style="color: blue">RcppParallel</span>包提供的并行方法优于<code>foreach</code></strong>。</p>

<p>一个简单的测试场景：对一个数值向量的每个元素做平方根运算，结果按原始顺序返回。在<a href="https://gist.github.com/YulongNiu/add0d9f066299613b64b8458fd5d741a">Gist1</a>和<a href="https://gist.github.com/YulongNiu/9331ea0d3ef46f0571c5f2dc061c3f8a">Gist2</a>中，分别实现了：</p>

<ul>
  <li>
    <p><code>SqrtR</code>：用循环非并行操作每个元素。这种方法在<code>R</code>语言编程中不推荐，而应该尽量“向量化”操作。</p>
  </li>
  <li>
    <p><code>SqrtRforeach</code>：<code>foreach</code>并行版本。</p>
  </li>
  <li>
    <p><code>SqrtRParSapply</code>: <code>parSapply</code>并行版本。</p>
  </li>
  <li>
    <p><code>SqrtCpp</code>：<code>C++</code>非并行版本。</p>
  </li>
  <li>
    <p><code>SqrtCppPara</code>：<span style="color: blue">RcppParallel</span>包的<code>C++</code>并行版本。</p>
  </li>
  <li>
    <p><code>sqrt</code>：R内置的向量化方法，<code>C</code>非并行版本。</p>
  </li>
</ul>

<p>首先，比较5种实现效率，并行计算调用8个线程（Intel i7-4790 CPU@3.6GHz）。测试结果显示<code>SqrtRPara</code>（使用<code>foreach</code>）和非向量化的R版本<code>SqrtR</code>效率较低。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>5 versions </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">tmp1 &lt;- runif<span class="o">(</span>10e3<span class="o">)</span>
</span><span class="line">
</span><span class="line">all.equal<span class="o">(</span>SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">          sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">          SqrtR<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">          SqrtRforeach<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">          SqrtRParSapply<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">          SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="c">## TRUE</span>
</span><span class="line">
</span><span class="line">microbenchmark<span class="o">(</span>
</span><span class="line">    SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">    sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">    SqrtR<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">    SqrtRforeach<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">    SqrtRParSapply<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">    SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="c">## Unit: microseconds</span>
</span><span class="line"><span class="c">##                 expr         min          lq         mean       median</span>
</span><span class="line"><span class="c">##        SqrtCpp(tmp1)      56.295      72.648 9.338755e+01      82.0335</span>
</span><span class="line"><span class="c">##           sqrt(tmp1)      36.216      46.074 4.865115e+01      48.3090</span>
</span><span class="line"><span class="c">##          SqrtR(tmp1)    3030.682    3116.718 4.229971e+03    3947.9380</span>
</span><span class="line"><span class="c">##   SqrtRforeach(tmp1) 1488851.181 1532937.096 1.561865e+06 1547849.9610</span>
</span><span class="line"><span class="c">## SqrtRParSapply(tmp1)  954757.348  963478.755 9.701841e+05  969925.9090</span>
</span><span class="line"><span class="c">##    SqrtCppPara(tmp1)      23.837      79.314 1.069003e+02     104.5975</span>
</span><span class="line"><span class="c">##           uq         max neval</span>
</span><span class="line"><span class="c">##      89.0800    1183.279   100</span>
</span><span class="line"><span class="c">##      52.2995      66.875   100</span>
</span><span class="line"><span class="c">##    4560.0930   10391.379   100</span>
</span><span class="line"><span class="c">## 1584297.5760 1750382.995   100</span>
</span><span class="line"><span class="c">##  974233.5690 1012400.281   100</span>
</span><span class="line"><span class="c">##     111.9160    1331.442   100</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后，增加循环数，比较效率较高的前三种方法。测试结果显示调用<span style="color: blue">RcppParallel</span>包的<code>C++</code>并行版本<code>SqrtCppPara</code>胜出。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>top 3 versions </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">tmp1 &lt;- runif<span class="o">(</span>10e6<span class="o">)</span>
</span><span class="line">
</span><span class="line">all.equal<span class="o">(</span>SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">          sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">          SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="c">## TRUE</span>
</span><span class="line">
</span><span class="line">microbenchmark<span class="o">(</span>
</span><span class="line">  SqrtCpp<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">  sqrt<span class="o">(</span>tmp1<span class="o">)</span>,
</span><span class="line">  SqrtCppPara<span class="o">(</span>tmp1<span class="o">))</span>
</span><span class="line">
</span><span class="line"><span class="c">## Unit: milliseconds</span>
</span><span class="line"><span class="c">##               expr      min       lq     mean   median       uq       max neval</span>
</span><span class="line"><span class="c">##      SqrtCpp(tmp1) 76.68263 78.55146 82.51442 79.48709 87.03026 100.56873   100</span>
</span><span class="line"><span class="c">##         sqrt(tmp1) 52.19705 53.67441 58.16940 54.60512 66.67642  70.94672   100</span>
</span><span class="line"><span class="c">##  SqrtCppPara(tmp1) 37.10116 38.34199 42.23896 39.17889 42.98785  61.94529   100</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="vectorlist">2. 使用<code>vector</code>代替<code>List</code></h2>

<p>在使用<span style="color: blue">RcppParallel</span>并行计算时，不能在并行循环中调用<code>Rcpp::List</code>对象。一个解决办法是：使用<code>std::vector</code>替代<code>Rcpp:List</code>。例如，<code>List</code>中都是数值向量，那么可以建立<code>std::vector&lt;Rcpp::NumericVector&gt;</code>对象替代。
<a href="https://gist.github.com/YulongNiu/0a11282216162b6e350c9575b68e91cc">Gist3</a>中提供了一个例子。这种方法的局限在于<code>List</code>中每一个元素的类型需要相同。</p>

<h2 id="section-1">3. 同步</h2>

<p>如果多个线程同时操作某一个共享内存对象，需要在<span style="color: blue">RcppParallel</span>包中使用“锁”。如<a href="https://gist.github.com/YulongNiu/5af268df461c8890c73c9640ae9ac754">Gist4</a>所示，多个线程都需要操作<code>estcount</code>对象。测试代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Synchronization </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="r"><span class="line"><span class="kn">library</span><span class="p">(</span><span class="s">&#39;Rcpp&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">sourceCpp<span class="p">(</span><span class="s">&#39;TestSynchron.cpp&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">n <span class="o">&lt;-</span> <span class="m">10</span>
</span><span class="line">g <span class="o">&lt;-</span> <span class="m">1000</span>
</span><span class="line">ecin <span class="o">&lt;-</span> <span class="kp">sample</span><span class="p">(</span><span class="m">0</span><span class="o">:</span><span class="m">9</span><span class="p">,</span> g<span class="o">*</span>n<span class="p">,</span> replace <span class="o">=</span> <span class="kc">TRUE</span><span class="p">)</span> <span class="o">%&gt;%</span>
</span><span class="line">  <span class="kp">split</span><span class="p">(</span><span class="m">1</span><span class="o">:</span>g<span class="p">)</span>
</span><span class="line">
</span><span class="line">ecin <span class="o">%&gt;%</span> unlist <span class="o">%&gt;%</span> <span class="kp">table</span>
</span><span class="line">
</span><span class="line">TestShare<span class="p">(</span>ecin<span class="p">,</span> <span class="m">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果去掉<a href="https://gist.github.com/YulongNiu/5af268df461c8890c73c9640ae9ac754">Gist4</a>代码中的第<code>27</code>和<code>31</code>行，可以发现测试结果不正确。</p>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="http://gallery.rcpp.org/articles/parallel-vector-sum/">Summing a Vector in Parallel with RcppParallel</a></p>
  </li>
  <li>
    <p><a href="https://scc.ustc.edu.cn/zlsc/tc4600/intel/2017.0.098/advisor/help/GUID-D98B389E-61B9-414A-9450-D28EF9F61A95.htm">Intel TBB Simple Mutex - Example</a></p>
  </li>
</ul>

<h3 id="section-2">更新记录</h3>

<p>2018年10月5日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过RNA-Seq评估基因表达量的模型]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2018/02/17/estimate-rna-seq/"/>
    <updated>2018-02-17T11:23:29+01:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2018/02/17/estimate-rna-seq</id>
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>

<script type="math/tex; mode=display">\newcommand{\tildel}{\widetilde{l_t}}</script>

<script type="math/tex; mode=display">\newcommand{\P}{\mathrm{P}}</script>

<script type="math/tex; mode=display">\DeclareMathOperator*{\argmax}{arg\,max}</script>

<p>本文基于<a href="#Ref">参考资料1</a>，展示RNA-Seq在评估基因表达量模型的细节。</p>

<h2 id="section">1. 符号表示</h2>

<p>$K$个长度为$l_i$的转录序列$t_i$，构成转录本的集合$T=\{t_1, t_2, \dots, t_K\}$。单个转录组中，每个转录序列$t_i$有$c_i$个拷贝数，全部转录序列的总拷贝数为$M$。单个转录序列的相对丰度为$\rho_k=\frac{c_k}{\sum\limits_{t \in T}c_t} = \frac{c_k}{M}$，易得$\sum\limits_{k=1}^K \rho_k=1$。</p>

<p>单个转录组中，全部转录片段构成集合$F=\{f_1, f_2, \dots, f_N\}$，总转录片段数目为$N=|F|$。比对到的转录序列$t_i$上的转录片段，构成集合$F_t \in F$，对应的转录片段数目为$X_t=|F_t|$。
<!--more--></p>

<h2 id="section-1">2. 简单模型</h2>

<p>简单模型为：单端RNA-Seq，每一个read只比对到一个转录序列上，且每个read的长度都为定值$m$。对于转录序列$t_i$，从<code>5'</code>到<code>3'</code>一共可能比对上的read数目为$\tildel = l_i - m + 1$。建立模型的思路是：当给定一个read，它会被比对到某个转录序列的某个位置是一个随机事件。通过实际观测（即将read比对到转录序列），进而估计未知参数$\rho = \{\rho_1, \rho_2, \dots, \rho_K\}$。</p>

<p>通过read序列比对，可得观测数据类似如下矩阵。每一行表示某个read是否比对到某个转录序列的某个位置，行和为1。$1$表示read比对到对应转录序列上，$0$表示没有比对到对应转录序列。</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\left[
\begin{matrix}
0 & 0 & \cdots & 1 \\
0 & 0 & \cdots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \cdots & 1 \\
\end{matrix}
\right] %]]&gt;</script>

<p>对于某个read $f$，来自于转录序列$t$的概率为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
\P(f \in t) &= \frac{\rho_t M \tildel}{\sum\limits_{k=1}^{K} \rho_k M \widetilde{l_k}} \\
&= \frac{\rho_t \tildel}{\sum\limits_{k=1}^{K} \rho_k \widetilde{l_k}} \\
&= \alpha_t
\end{split}
\label{eq:1}
\end{align} %]]&gt;</script>

<p>当$f$来自于转录序列$t$时，$f$比对该转录序列某个位置的概率为：</p>

<script type="math/tex; mode=display">\begin{align}
\begin{split}
\P(\mathrm{pos}|f \in t) = \frac{1}{\tildel}
\end{split}
\label{eq:2}
\end{align}</script>

<p>联合$\eqref{eq:1}$和$\eqref{eq:2}$，对于$f$来自于转录序列$t$的某个位置概率为：</p>

<script type="math/tex; mode=display">\begin{align}
\begin{split}
\P(\mathrm{pos}, f \in t) = \frac{\alpha_t}{\tildel}
\end{split}
\label{eq:3}
\end{align}</script>

<p>因此，极大似然函数为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
L &= \prod_{f \in F_t} \prod_{t \in T} \frac{\alpha_t}{\tildel} \\
&= \prod_{t \in T} \left( \frac{\alpha_t}{\tildel} \right)^{X_t} \\
&\propto \prod_{t \in T} \alpha_t^{X_t}
\end{split}
\label{eq:4}
\end{align} %]]&gt;</script>

<p>在约束条件$\sum\limits_{t \in T} \alpha_t= 1$，求得极大似然估计为$\alpha_t = \frac{X_t}{N}$。有趣的是，在简单模型条件下，该极大似然估计可以来源于<a href="https://www.statlect.com/probability-distributions/multinoulli-distribution">multinoulli分布</a>。</p>

<h2 id="section-2">2. 异构体模型</h2>

<p>在异构体模型中，某一个read可以比对到多个转录序列上，但每一个read的长度为定值$m$。因此，可得观测数据类似如下矩阵：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\left[
\begin{matrix}
1 & 0 & \cdots & 1 \\
1 & 1 & \cdots & 1 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 1 & \cdots & 1 \\
\end{matrix}
\right] %]]&gt;</script>

<p>因此，对一个每一个read，可观测数值为是否比对到多个转录序列的某个位置，不可观测数据为该read真实来源于哪个转录序列$T=\{t_1, t_2, \dots, t_K\}$，要估计的未知参数为$\alpha=\{\alpha_1, \alpha_2, \dots, \alpha_K\}$。<a href="http://yulongniu.bionutshell.org/blog/2013/07/13/em/">EM算法</a>可以解决类似有隐变量问题。</p>

<p>首先，异构体模型为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
\P(\mathrm{pos}|\alpha) &= \sum_{k=1}^{K} \P(\mathrm{pos}, f \in t_k|\alpha) \\
&= \sum_{k = 1}^{K} y_k \frac{\alpha_k}{\widetilde{l_k}} \\
\end{split}
\label{eq:5}
\end{align} %]]&gt;</script>

<p>其中$y_k$是read在观测矩阵行中的第$k$个元素（$0$或$1$）。</p>

<p>对于第$n$次迭代，观察$\P(f \in t_1|\mathrm{pos}, \alpha^{(n)})$：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
\P(f \in t_1|\mathrm{pos}, \alpha^{(n)}) &= \frac{\P(f \in t_1, \mathrm{pos}|\alpha^{(n)})}{\sum\limits_{k=1}^{K} \P(f \in t_k, \mathrm{pos}|\alpha^{(n)})} \\
&= \frac{\alpha_1^{(n)} \frac{y_1}{\widetilde{l_1}}}{\sum\limits_{k=1}^{K} \alpha_k^{(n)} \frac{y_k}{\widetilde{l_k}}} \\
&= \lambda_1
\end{split}
\label{eq:6}
\end{align} %]]&gt;</script>

<p>根据$\eqref{eq:6}$易得，$\sum\limits_{k=1}^{K} \lambda_k = 1$。</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
\alpha^{(n+1)} &= \argmax_\alpha \left( 
\sum_{f \in F} \sum_{k=1}^{K} \lambda_k \log\left(
\alpha_k \frac{y_k}{\widetilde{l_k}}
\right)
\right) \\
&= \argmax_\alpha \left(
\sum_{f \in F} \sum_{k=1}^{K}  \lambda_k \log\left(
\alpha_k
\right)
\right)
\end{split}
\label{eq:7}
\end{align} %]]&gt;</script>

<p>对$\alpha_k$求偏导取极限，第$n+1$次参数估计为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align*}
\begin{split}
\alpha_k^{(n+1)} &= \frac{\sum_\limits{f \in F} \lambda_k}{\sum\limits_{i=1}^{K} \sum\limits_{f \in F} \lambda_i} \\
&= \frac{\sum\limits_{f \in F} \lambda_k}{N}
,\ k=1, 2, \dots, K
\end{split}
\end{align*} %]]&gt;</script>

<p>根据转换公式$\rho_t = \frac{\frac{\alpha_t}{\tildel}}{\sum\limits_{k=1}^{K} \frac{\alpha_k}{\widetilde{l_k}}}$，以上EM递推式可以转换为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align*}
\begin{split}
\lambda_k^{(n+1)} &= \frac{y_k \rho_k^{(n)}}{\sum\limits_{i=1}^{K} y_i \rho_i^{(n)}} ,\ k=1, 2, \dots, K \\
\rho_k^{(n+1)} &= \frac{\frac{\sum_\limits{f \in F} \lambda_k^{(n+1)}}{\widetilde{l_k}}}{\sum\limits_{i=1}^{K} \frac{\sum_\limits{f \in F} \lambda_i^{(n+1)}}{\widetilde{l_i}}} ,\ k=1, 2, \dots, K
\end{split}
\end{align*} %]]&gt;</script>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li>
    <p>Lior Pachter: Models for transcript quantification from RNA-Seq. <a href="https://arxiv.org/abs/1104.3889">arXiv:1104.3889v2</a> [q-bio.GN], 2011.</p>
  </li>
  <li>
    <p>Wing-Kin Sung: Algorithms for Next-Generation Sequencing. <a href="https://www.crcpress.com/Algorithms-for-Next-Generation-Sequencing/Sung/p/book/9781466565500">Chapman and Hall/CRC</a>, 2017.</p>
  </li>
</ul>

<h3 id="section-3">更新记录</h3>

<p>2019年04月19日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bray-Curtis Distance解释]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2017/10/24/bray-curtis-distance/"/>
    <updated>2017-10-24T06:26:00+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2017/10/24/bray-curtis-distance</id>
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>

<script type="math/tex; mode=display">\newcommand{\sumup}[1] {\sum\limits_{i=1}^{n} #1}</script>

<p>Bray-Curtis distance（BCD）的定义为：</p>

<!--more-->

<script type="math/tex; mode=display">\begin{align}
\begin{split}
BCD(X, Y) = \frac{\sumup{|x_i - y_j|}}{\sumup{x_i} + \sumup{y_i}}
\end{split}
\label{eq:1}
\end{align}</script>

<p>其中，$X$和$Y$分别为长度为$n$的数值向量。根据$\eqref{eq:1}$可以得出：$BCD$的取值范围为$[0, 1]$；当$X$和$Y$完全相同时，$BCD$为0；反之，$BCD$为1。</p>

<p>同样，Bray-Curtis similarity（BCS）或Bray-Curtis index为：</p>

<script type="math/tex; mode=display">\begin{align}
\begin{split}
BCS(X, Y) = 1 - BCD(X, Y)
\end{split}
\label{eq:2}
\end{align}</script>

<h3 id="section">参考资料</h3>

<ul>
  <li><a href="http://84.89.132.1/~michael/stanford/maeb6.pdf">Chapter 6 Measures of distance and correlation between variables</a></li>
</ul>

<h3 id="section-1">更新记录</h3>

<p>2017年10月22日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Normalized Google Distance解释]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2017/10/22/google-distance/"/>
    <updated>2017-10-22T15:35:30+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2017/10/22/google-distance</id>
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>

<script type="math/tex; mode=display">\newcommand{\sumup}[1] {\sum\limits_{i=1}^{n} #1}</script>

<p>本文尝试探索Normalized Google distance（简称NGD）的定义和拓展应用。</p>

<h3 id="ngd">1. NGD原始定义</h3>

<p><a href="https://en.wikipedia.org/wiki/Normalized_Google_distance">维基百科</a>的定义为：</p>

<!--more-->

<script type="math/tex; mode=display">\begin{align}
\begin{split}
NGD(x, y) = \frac{\max\{\log f(x), \log f(y)\} - \log f(x, y)}{\log N - \min\{\log f(x), \log f(y)\}}
\end{split}
\label{eq:1}
\end{align}</script>

<p>其中，$f(x)$和$f(y)$分别为关键词$x$和$y$出现的次数，$f(x,y)$为$x$和$y$同时出现的次数，$N$为全部搜索单词数目。根据$\eqref{eq:1}$可以得出：如果$x$和$y$几乎总是同时出现时，$NGD$趋近于$0$；如果$x$和$y$出现的次数很少，即$\log f(x,y)$趋近于负无穷，则$NGD$可能大于$1$。</p>

<h3 id="ngd-1">2. NGD定义延伸</h3>

<p>Choi and Rashid在2008年的<a href="#Ref">文章</a>提出一种针对向量的$NGD$定义：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
NGD(X, Y) &= \frac{\max\left\{\sumup{x_i}, \sumup{y_i}\right\} - \sumup{\min(x_i, y_i)}}{\sumup{x_i} + \sumup{y_i} - \sumup{\min(x_i, y_i)}} \\
&= \frac{\max\left\{\sumup{x_i}, \sumup{y_i}\right\} - \sumup{\min(x_i, y_i)}}{\max\left\{\sumup{x_i}, \sumup{y_i}\right\}}
\end{split}
\label{eq:2}
\end{align} %]]&gt;</script>

<p>其中，$X$和$Y$分别为长度为$n$的数值向量，$\min(x_i, y_i)$为$x_i$和$y_i$中各个元素最小值所组成的数值向量。根据$\eqref{eq:2}$可以得出：$NGD$的取值范围为$[0, 1]$；当$X$和$Y$完全相同时，$NGD$为0；反之，$NGD$为1。</p>

<p>由此，可以得到normalized Google similarity（NGS）为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
NGS(X, Y) &= 1 - NGD(X, Y) \\
&= \frac{\sumup{\min(x_i, y_i)}}{\max\left\{\sumup{x_i}, \sumup{y_i}\right\}}
\end{split}
\label{eq:3}
\end{align} %]]&gt;</script>

<p>一个例子：$X = (1, 2, 0, 3)$和$Y = (0, 2, 1, 1)$，则$NGD = 0.5$和$NGS = 0.5$。</p>

<h3 id="a-idrefa"><a id="Ref">参考资料</a></h3>

<ul>
  <li><a href="http://ieeexplore.ieee.org/document/4631601/?reload=true">Adapting Normalized Google Similarity in Protein Sequence Comparison</a></li>
</ul>

<h3 id="section">更新记录</h3>

<p>2017年10月21日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最大熵模型]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2017/10/16/max-entropy/"/>
    <updated>2017-10-16T07:16:12+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2017/10/16/max-entropy</id>
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>

<h3 id="section">1. 熵和条件熵</h3>

<p>对于随机变量$X$，熵为：</p>

<script type="math/tex; mode=display">\begin{align}
\begin{split}
H(X) = -\sum_{x \in X}p(x)\log{p(x)}
\end{split}
\label{eq:1}
\end{align}</script>

<!--more-->

<p>其中：</p>

<script type="math/tex; mode=display">\begin{align}
\begin{split}
\sum_{x \in X}p(x) = 1
\end{split}
\label{eq:2}
\end{align}</script>

<p>同样道理，对于任意随机变量$X$和$Y$，联合熵为：</p>

<script type="math/tex; mode=display">\begin{align}
\begin{split}
H(X,Y) = -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)}
\end{split}
\label{eq:3}
\end{align}</script>

<p>基于$X$的$Y$的熵为条件熵：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
H(Y|X) &= H(X, Y) - H(X) \\
&= -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)} + \sum_{x \in X}p(x)\log{p(x)} \\
&= -\sum_{x \in X, y \in Y}p(x,y)\log{p(x,y)} + \sum_{x \in X, y \in Y}p(x, y)\log{p(x)} \\
&= -\sum_{x \in X, y \in Y}p(x, y)\log \frac{p(x, y)}{p(x)}
\end{split}
\label{eq:4}
\end{align} %]]&gt;</script>

<h3 id="section-1">2. 最大熵原理简介</h3>

<p>最大熵原理可以表述为，在满足$k+1$个约束条件的模型集合中，选取熵$H(p)$最大的模型。约束条件为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
\sum_{x}p(x) &= 1 \\
\sum_{x}p(x)f_1(x) &= \tau_1 \\
\vdots \\
\sum_{x}p(x)f_k(x) &= \tau_k
\end{split}
\label{eq:5}
\end{align} %]]&gt;</script>

<p>使用拉格朗日乘子法求解带上述有约束的极值，即：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align*}
\begin{split}
L(p) = -\sum_{x}p(x)\log{p(x)} &+ \\
\lambda_0(\sum_{x}p(x) - 1) &+ \\
\lambda_1(\sum_{x}p(x)f_1(x) - \tau_1) &+ \\
\cdots &+\\
\lambda_k(\sum_{x}p(x)f_1(x) - \tau_k)
\end{split}
\end{align*} %]]&gt;</script>

<p>$L(p)$对每一个$p(x)$偏导数$\frac{\partial L(p)}{\partial p(x)}$为0，即：</p>

<script type="math/tex; mode=display">-\log{p(x)} - 1 + \lambda_0 + \sum_{j=1}^{k}\lambda_j f_j(x) = 0</script>

<p>解得</p>

<script type="math/tex; mode=display">p(x) = \frac{\exp\left(\sum\limits_{j=1}^{k}\lambda_j f_j(x)\right)}{\exp(1 - \lambda_0)}</script>

<p>由约束条件$\sum\limits_x p(x)=1$得：</p>

<script type="math/tex; mode=display">\begin{align}
p(x) = \frac{1}{Z}\exp\left(\sum\limits_{j=1}^{k}\lambda_j f_j(x)\right)
\label{eq:6}
\end{align}</script>

<p>其中</p>

<script type="math/tex; mode=display">\begin{align}
Z = \sum\limits_x \exp\left(\sum\limits_{j=1}^{k}\lambda_j f_j(x)\right)
\label{eq:7}
\end{align}</script>

<p>将$\eqref{eq:3}$带入约束条件$\eqref{eq:2}$中，即可解得$\lambda_j$。</p>

<h3 id="section-2">3. 最大熵应用例子</h3>

<p>根据参考资料2的例子，应用最大熵模型。例子简述为：</p>

<blockquote>
  <p>三种食物的售价分别为1、2和3元，平均一餐花费1.75元。</p>

  <p>估算每种食物被购买的概率。</p>
</blockquote>

<p>建立最大熵模型：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align*}
\begin{split}
max \quad & H(p) = \sum_{x}p(x) \log p(x) \\
s.t. \quad & \sum_{x}p(x)x = 1.75 \\
\quad & \sum_{x}p(x) = 1
\end{split}
\end{align*} %]]&gt;</script>

<p>解方程得：$p(x_1) = 0.466$、 $p(x_2) = 0.318$、$p(x_3) = 0.216$</p>

<h3 id="section-3">参考资料</h3>

<ul>
  <li>
    <p><a href="https://www.cs.cmu.edu/afs/cs/user/aberger/www/html/tutorial/tutorial.html">A Brief Maxent Tutorial</a></p>
  </li>
  <li>
    <p><a href="http://www-mtl.mit.edu/Courses/6.050/2003/notes/chapter9.pdf">Chapter 9 Principle of Maximum Entropy: Simple Form</a></p>
  </li>
  <li>
    <p><a href="http://spaces.ac.cn/archives/3552/">“熵”不起：从熵、最大熵原理到最大熵模型</a></p>
  </li>
</ul>

<h3 id="section-4">更新记录</h3>

<p>2017年7月15日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[朴素贝叶斯分类器应用于二元数据类型]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2017/10/15/naive-bayes-binary-multinomial/"/>
    <updated>2017-10-15T11:38:16+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2017/10/15/naive-bayes-binary-multinomial</id>
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
TeX: { equationNumbers: { autoNumber: "AMS" } }
});
</script>

<h3 id="section">1. 贝叶斯定理</h3>

<p>已知事件$A$和$B$，则条件概率为：</p>

<!--more-->

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
P(A | B) &= \frac{P(A,B)}{P(B)} \\
P(B | A) &= \frac{P(A,B)}{P(A)}
\end{split}
\label{eq:1}
\end{align} %]]&gt;</script>

<p>可以推导出：</p>

<script type="math/tex; mode=display">\begin{align}
P(B|A) = \frac{P(A|B)P(B)}{P(A)}
\label{eq:2}
\end{align}</script>

<h3 id="section-1">2. 分类器简介</h3>

<p>朴素贝叶斯分类器（Naive Bayes classifier）是一种简单、有效的分类器，其难点在于估算条件概率。比如，一个数据集拥有$N$个相互独立的特征，$C$个分组，对于$C_j$条件概率模型为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
p(C_j|F_1,\cdots,F_n) &= \frac{p(F_1,\cdots,F_n|C_j)p(C_j)}{p(F_1,\cdots,F_n)} \\
&= p(F_1|C_j) \cdots p(F_n|C_j)p(C_j)(1/p(F_1,\cdots,F_n))
\end{split}
\label{eq:3}
\end{align} %]]&gt;</script>

<p>由于$1/p(F_1,\cdots,F_n)$在不同分组中为定值，因此：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\begin{split}
p(C_j|F_1,\cdots,F_n) &\propto p(C_j)\prod_{i=1}^{N}p(F_i|C_j)
\end{split}
\label{eq:4}
\end{align} %]]&gt;</script>

<p>其中，$p(C_j)$通常容易求得，即$C_j$分组在测试数据集中出现的频率。而$p(F_i\ \vert C_j)$则根据不同的测试数据类型，有不同的估计值。</p>

<p>以下讨论两种二元数据类型，例如某个数据集有三种特征量：</p>

<script type="math/tex; mode=display">F = 
\left[
\begin{array}{f}
F_1\\
F_2\\
F_3
\end{array}
\right]</script>

<h3 id="section-2">3. 伯努利分布</h3>

<p>每一个特征量的取值都为$0$或$1$。分组$C_j$含有两个已知样本为：</p>

<script type="math/tex; mode=display">C_{j1} = 
\left[
\begin{array}{cj1}
0\\
1\\
0
\end{array}
\right]</script>

<script type="math/tex; mode=display">C_{j2} = 
\left[
\begin{array}{cj2}
0\\
0\\
1
\end{array}
\right]</script>

<p>某个预测样本为：</p>

<script type="math/tex; mode=display">C_{jp1} = 
\left[
\begin{array}{cjp1}
1\\
0\\
1
\end{array}
\right]</script>

<p>由于$p(F_i \vert C_j)$不能为0，根据<a href="https://en.wikipedia.org/wiki/Rule_of_succession">Rule of succession</a>得各个特征的条件概率为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align*}
\begin{split}
p(F1|C_j) &= \frac{0+1}{2+2} &= 1/4 \\
p(F2|C_j) &= \frac{1+1}{2+2} &= 1/2 \\
p(F3|C_j) &= \frac{1+1}{2+2} &= 1/2
\end{split}
\end{align*} %]]&gt;</script>

<h3 id="section-3">4. 二项分布</h3>

<p>每一个特征量的取值都一个元素为$0$或$1$的向量（长度可不等）。分组$C_j$含有两个已知样本为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
C_{j1} = 
\left[
\begin{array}{cj1}
0 & 1 & 0 & 1\\
1 & 0 & 1\\
0 & 0
\end{array}
\right] %]]&gt;</script>

<script type="math/tex; mode=display">% &lt;![CDATA[
C_{j2} = 
\left[
\begin{array}{cj2}
0 & 1 & 1 & 1\\
1 & 1 & 1\\
0 & 0
\end{array}
\right] %]]&gt;</script>

<p>某个预测样本为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
C_{jp1} = 
\left[
\begin{array}{cjp1}
0 & 0 & 1 & 1\\
1 & 0 & 1\\
0 & 0
\end{array}
\right] %]]&gt;</script>

<p>各个特征的条件概率为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align*}
\begin{split}
p(F1|C_j) &= \left(\frac{3+1}{8+2}\right)^2 \times \left(\frac{5+1}{8+2}\right)^2 \\
p(F2|C_j) &= \left(\frac{5+1}{6+2}\right)^2 \times \left(\frac{1+1}{6+2}\right) \\
p(F3|C_j) &= \left(\frac{4+1}{4+2}\right)^2
\end{split}
\end{align*} %]]&gt;</script>

<h3 id="section-4">优化</h3>

<ol>
  <li>
    <p>当特征较多时，会面临多个小数（$p$值）相乘。可以取对数后再相加，即$\sum\log{p}$。</p>
  </li>
  <li>
    <p>虽然上文讨论的是二元数据，但是朴素贝叶斯分类器也适用于连续型或者其他离散型数据类型。</p>
  </li>
</ol>

<h3 id="section-5">参考资料</h3>

<ul>
  <li>
    <p><a href="https://www.inf.ed.ac.uk/teaching/courses/inf2b/learnnotes/inf2b-learn-note07-2up.pdf">Text Classification using Naive Bayes</a></p>
  </li>
  <li>
    <p><a href="https://nlp.stanford.edu/IR-book/html/htmledition/naive-bayes-text-classification-1.html">Naive Bayes text classification</a></p>
  </li>
</ul>

<h3 id="section-6">更新记录</h3>

<p>2017年7月15日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks设置推荐]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2017/06/14/shadowsocks-setup/"/>
    <updated>2017-06-14T17:49:13+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2017/06/14/shadowsocks-setup</id>
    <content type="html"><![CDATA[<h2 id="shadowsocks">1. Shadowsocks客户端</h2>

<p>Shadowsocks在主流平台上都有<a href="https://shadowsocks.org/en/download/clients.html">客户端</a>，下载直接使用即可。对于Linux平台，可能还需要在Chrome浏览器中安装<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=en">SwitchyOmega</a>插件。</p>

<!--more-->

<h2 id="section">2. 谷歌设置</h2>

<p>进入<a href="https://encrypted.google.com/preferences?hl=zh-CN#languages">网址</a>，设置自己喜欢的语言，之后重启即可。</p>

<h2 id="shadowsocks-1">3. 自己配置Shadowsocks</h2>

<h3 id="section-1">3.1 软件准备</h3>

<p>参考<a href="https://github.com/shadowsocks/shadowsocks-libev">shadowsocks网站</a>安装。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo dnf copr <span class="nb">enable </span>librehat/shadowsocks
</span><span class="line"><span class="nv">$ </span>sudo dnf update
</span><span class="line"><span class="nv">$ </span>sudo dnf install shadowsocks-libev
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">3.2 配置文件</h3>

<p>文件位置<code>/etc/shadowsocks-libev/config.json</code>，设置模板：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">    "server":"0.0.0.0",
</span><span class="line">    "port_password":{
</span><span class="line">     "8381":"******",
</span><span class="line">     "8382":"******"
</span><span class="line">    },
</span><span class="line">    "timeout":600,
</span><span class="line">    "method":"aes-256-cfb"
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">3.3 启动</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo ss-manager -c /etc/shadowsocks-libev/config.json --manager-address 127.0.0.1:8000 -u config.json
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="tcp-bbr">4. 使用TCP BBR加速</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s2">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf
</span><span class="line"><span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s2">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>sudo sysctl -p
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>sudo sysctl net.ipv4.tcp_available_congestion_control
</span><span class="line"><span class="nv">$ </span>sudo sysctl net.ipv4.tcp_congestion_control
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">5. 全局配置</h2>

<p>使用proxychains全局调用Shadowsocks。</p>

<p>首先，安装和配置<code>proxychains</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo dnf install -y proxychains-ng
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>sudo <span class="nb">echo</span> <span class="s1">&#39;socks5    127.0.0.1    1080&#39;</span> &gt;&gt; /etc/proxychains.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>之后，打开Shadowsocks后，在需要使用的命令行前加入<code>proxychains4</code>，例如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>proxychains4 git push origin master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="privoxy">6. privoxy全局代理</h2>

<p>首先，安装和配置<code>privoxy</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo dnf install -y privoxy
</span><span class="line">
</span><span class="line"><span class="c"># /etc/privoxy/config修改</span>
</span><span class="line"><span class="c"># listen-address 127.0.0.1:8118 </span>
</span><span class="line"><span class="c"># forward-socks5t / 127.0.0.1:1080 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>配置环境变量并启动：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span><span class="s2">&quot;127.0.0.1:8118&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span><span class="s2">&quot;127.0.0.1:8118&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">ftp_proxy</span><span class="o">=</span><span class="s2">&quot;127.0.0.1:8118&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>sudo systemctl restart privoxy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">参考资料</h3>

<ol>
  <li>
    <p><a href="http://nga.178.com/read.php?tid=8798506">更改谷歌语言偏好</a></p>
  </li>
  <li>
    <p><a href="https://dirtysalt.github.io/blogs/boost-shadowsocks-with-tcp-bbr.html">通过TCP BBR为ShadowSocks加速</a></p>
  </li>
  <li>
    <p><a href="https://github.com/shadowsocks/shadowsocks-libev/issues/1668">shadowsocks-libev多用户</a></p>
  </li>
  <li>
    <p><a href="https://blog.csdn.net/ypbsyy/article/details/81146866">linux下的ss+privoxy代理配置</a></p>
  </li>
</ol>

<h3 id="section-6">更新记录</h3>

<p>2017年12月19日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[探索Java基本类型的二进制表示]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2017/05/16/java-binary/"/>
    <updated>2017-05-16T14:17:46+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2017/05/16/java-binary</id>
    <content type="html"><![CDATA[<h2 id="section">1. 基本数据类型</h2>

<p>Java有<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2">八种</a>基本数据类型（primitive data type），分别是<code>boolean</code>、<code>char</code>、<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>和<code>double</code>，所占用的比特数如下表所示。</p>

<!--more-->

<table>
  <thead>
    <tr>
      <th>Data type</th>
      <th>Bit</th>
      <th>Range</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>boolean</code></td>
      <td>not precisely defined</td>
      <td><code>True</code> or <code>false</code></td>
    </tr>
    <tr>
      <td><code>char</code></td>
      <td>unsigned 16</td>
      <td>$2^{16}$</td>
    </tr>
    <tr>
      <td><code>byte</code></td>
      <td>signed 8</td>
      <td>$-2^{7}$ ~ $2^7-1$</td>
    </tr>
    <tr>
      <td><code>short</code></td>
      <td>signed 16</td>
      <td>$-2^{15}$ ~ $2^{15}-1$</td>
    </tr>
    <tr>
      <td><code>int</code></td>
      <td>signed 32</td>
      <td>$-2^{31}$ ~ $2^{31}-1$</td>
    </tr>
    <tr>
      <td><code>long</code></td>
      <td>signed 64</td>
      <td>$-2^{63}$ ~ $2^{63}-1$</td>
    </tr>
    <tr>
      <td><code>float</code></td>
      <td>signed 32</td>
      <td>$\pm (1-2^{-24}) * 2^{128}$ 精度$2^{-126}$</td>
    </tr>
    <tr>
      <td><code>double</code></td>
      <td>signed 64</td>
      <td>$\pm (1-2^{-53}) * 2^{1024}$ 精度$2^{-1022}$</td>
    </tr>
  </tbody>
</table>

<h2 id="section-1">2. 整数二进制表示和范围</h2>

<p>以<code>byte</code>类型为例，每个整数占用了8个比特，最左边比特位表示正负（0为正，1为负）。例如，$1$表示为$0000 0001_2$。因此，能表示的最大正整数为$0111 1111_2$，即</p>

<script type="math/tex; mode=display">2^0 + 2^1 + 2^2 + \cdots + 2^6 = 2^7 - 1</script>

<p>由于要满足$-1 + 1 = 0$，所以$-1$表示为$1111 1111_2$，$-2$表示为$1111 1110_2$。类似于正整数，可以得到能表示的最大负整数为$1000 0001_2$，即$-(2^7 - 1)$。</p>

<p>但是，这里出现一个问题：出现了两个0，一个是$+0$（$0000 0000_2$），一个是$-0$（$1000 0000_2$）。因此，规定$1000 0000_2$为最大负整数$-2^7$。</p>

<h2 id="section-2">3. 浮点数二进制表示和范围</h2>

<p>Java使用<a href="https://en.wikipedia.org/wiki/IEEE_floating_point">IEEE 754</a>标准表示浮点数，其二进制表示分为三个部分：1. 最左边比特位表示正负（0为正，1为负）；2. 指数（<code>float</code>有8个比特位，<code>double</code>有11比特位）；3. 尾数（<code>float</code>有23个比特位，<code>double</code>有52比特位）。同时，由于指数需要区分正负，所以<code>float</code>指数位转为十进制后需要减去$2^7-1$，而<code>double</code>需要减去$2^{10}-1$。</p>

<p>以<code>float</code>为例，最大的二进制表示为$0 11111110 11111111111111111111111_2$：</p>

<ul>
  <li>
    <p>最右比特位是0；</p>
  </li>
  <li>
    <p>指数为$1111 1110_2$，即$127$；</p>
  </li>
  <li>
    <p>尾数全为1，即：</p>
  </li>
</ul>

<script type="math/tex; mode=display">2^0 + 2^{-1} + 2^{-2} + \cdots + 2^{-23} = 2-2^{-23}</script>

<p>该数为$(1-2^{-24}) * 2^{128}$。</p>

<p>同理，最小正数为$0 00000001 00000000000000000000000_2$，即$2^{-126}$。</p>

<p>$0 00000000 00000000000000000000000_2$是$+0$，而$1 00000000 00000000000000000000000_2$是$-0$。</p>

<p>$0 11111111 00000000000000000000000_2$是$\infty$，而$1 11111111 00000000000000000000000_2$是$-\infty$。</p>

<h2 id="n">4. 关于2的n次方的有趣事实</h2>

<table>
  <thead>
    <tr>
      <th>n次方</th>
      <th>十进制</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <td>2</td>
      <td>4</td>
    </tr>
    <tr>
      <td>3</td>
      <td>8</td>
    </tr>
    <tr>
      <td>4</td>
      <td>16</td>
    </tr>
    <tr>
      <td>5</td>
      <td>32</td>
    </tr>
    <tr>
      <td>6</td>
      <td>64</td>
    </tr>
    <tr>
      <td>7</td>
      <td>128</td>
    </tr>
    <tr>
      <td>8</td>
      <td>256</td>
    </tr>
    <tr>
      <td>9</td>
      <td>512</td>
    </tr>
    <tr>
      <td>10</td>
      <td>1024（千）</td>
    </tr>
    <tr>
      <td>20</td>
      <td>1048576（百万）</td>
    </tr>
    <tr>
      <td>30</td>
      <td>1073741824（十亿）</td>
    </tr>
  </tbody>
</table>

<h3 id="section-3">参考资料</h3>

<ol>
  <li>
    <p><a href="https://docs.oracle.com/javase/specs/index.html">The Java Language Specification, Java SE 8 Edition</a></p>
  </li>
  <li>
    <p><a href="http://introcs.cs.princeton.edu/java/home/">Introduction to Programming in Java</a></p>
  </li>
  <li>
    <p><a href="https://en.wikipedia.org/wiki/Two's_complement">Wiki Two’s complement</a></p>
  </li>
  <li>
    <p><a href="http://cs-fundamentals.com/java-programming/java-primitive-data-types.php">Java Primitive Data Types. Size, Range and Default Value of Basic Data Types</a></p>
  </li>
</ol>

<h3 id="section-4">更新记录</h3>

<p>2017年5月16日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两个git的rebase命令应用]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/11/11/git-rebase-examples/"/>
    <updated>2016-11-11T09:24:39+01:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/11/11/git-rebase-examples</id>
    <content type="html"><![CDATA[<p>介绍两个<code>git rebase</code>的应用场景，一个是合并commits记录，另一个是贡献代码。</p>

<h2 id="commit">1. 合并commit记录</h2>

<p>假定有多条commits，按照离当前时间从近至远依次为：<code>c1</code>、<code>b2</code>、<code>b1</code>和<code>a1</code>。希望合并<code>c1</code>、<code>b2</code>和<code>b1</code>，即只保留<code>c1</code>和<code>a1</code>。操作流程如下：</p>

<!--more-->

<ul>
  <li>打开交互式rebase</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>interactive rebase </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>git rebase -i sha1id-of-a1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>标记合并commits</li>
</ul>

<p>弹出的文本编辑器初始可能为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pick sha1id-of-c1 c1
</span><span class="line">pick sha1id-of-b2 b2
</span><span class="line">pick sha1id-of-b1 b1
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pick sha1id-of-c1 c1
</span><span class="line">squash sha1id-of-b2 b2
</span><span class="line">squash sha1id-of-b1 b1
</span><span class="line">...</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>记录合并commits</li>
</ul>

<p>在弹出的文本编辑器中标记和注释commits</p>

<ul>
  <li>提交远程</li>
</ul>

<p>由于本地和远程记录不一致，需要强制合并。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>force push </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>git push -f origin mybranch
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">2. 贡献代码</h2>

<ul>
  <li>Fork项目</li>
</ul>

<p>Fork在GitHub对应的项目（famous/project，master分支）至自己账户（my/project），克隆至本地并添加远程地址：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>clone project </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>git clone https://github.com/my/project.git
</span><span class="line"><span class="nv">$ </span>git remote add upstream https://github.com/famous/project.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>建立分支并提交修改</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>git checkout -b devbranch
</span><span class="line"><span class="nv">$ </span>git commit -a -m <span class="s1">&#39;these commits&#39;</span>
</span><span class="line"><span class="nv">$ </span>git push origin devbranch
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>获取和合并最新远程修改</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>commit </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>git checkout master
</span><span class="line"><span class="nv">$ </span>git pull upstream master
</span><span class="line"><span class="nv">$ </span>git checkout devbranch
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git rebase master
</span><span class="line"><span class="c">## compare and merge the latest commits</span>
</span><span class="line"><span class="nv">$ </span>git rebase --continue
</span><span class="line">
</span><span class="line"><span class="c">## force push</span>
</span><span class="line"><span class="nv">$ </span>git push -f origin devbranch
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>发起pull request。</li>
</ul>

<h3 id="section-1">参考资料</h3>

<ol>
  <li>
    <p><a href="http://itspg.logdown.com/posts/1731-git-squash-master-commits">合并分支</a></p>
  </li>
  <li>
    <p><a href="https://segmentfault.com/a/1190000000736629">贡献代码</a></p>
  </li>
</ol>

<h3 id="section-2">更新记录</h3>

<p>2016年11月11日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命令行使用Google Drive]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/10/21/linux-sync-google-drive/"/>
    <updated>2016-10-21T12:24:31+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/10/21/linux-sync-google-drive</id>
    <content type="html"><![CDATA[<p><strong>推荐使用更方便的<a href="https://liberodark.github.io/ODrive/">ODrive</a>。</strong></p>

<p>本文简单介绍<a href="https://github.com/prasmussen/gdrive">gdrive</a>，它是一个跨多个平台软件，提供命令行操作Google Drive。同类软件还有<a href="https://github.com/odeke-em/drive">drive</a>和<a href="https://www.thefanclub.co.za/overgrive">overGrive</a>（Linux下Google Drive界面客户端）。</p>

<p>基本思路：对每一个上传至Google Drive的文件或文件夹都分配一个Id，所以云端操作需要指定Id。</p>

<p>突出优点：自动同步，比较云端和本地文件后，决定上传、删除或者替换；同步加入版本控制，可以下载和删除不同版本文件。</p>

<!--more-->

<h2 id="section">1. 初始化</h2>

<p><a href="https://github.com/prasmussen/gdrive">下载</a>系统对应版本，执行<code>gdrive about</code>，根据提示设置。</p>

<h2 id="section-1">2. 查找</h2>

<p><a href="https://developers.google.com/drive/v3/web/search-parameters">查找规则</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">## 查找所有文件夹，不包括垃圾箱，所有者为自己</span>
</span><span class="line"><span class="nv">$ </span>gdrive list --query <span class="s2">&quot;mimeType = &#39;application/vnd.google-apps.folder&#39; and trashed = false and &#39;me&#39; in owners&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c">## 加入上层目录Id</span>
</span><span class="line">gdrive list --query <span class="s2">&quot;mimeType = &#39;application/vnd.google-apps.folder&#39; and trashed = false and &#39;me&#39; in owners and &#39;YUlPWWdLcy1mX2c&#39; in parents&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c">## 查询信息</span>
</span><span class="line">gdrive info YUlPWWdLcy1mX2c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">3. 建立和删除</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">## 建立文件夹</span>
</span><span class="line"><span class="nv">$ </span>gdrive mkdir newFolder
</span><span class="line">
</span><span class="line"><span class="c">## 建立下一层文件夹，-p指定上层目录Id</span>
</span><span class="line"><span class="nv">$ </span>gdrive mkdir -p M1h4M1dGYUhpSFE newFolder
</span><span class="line">
</span><span class="line"><span class="c">## 删除文件（文件Id，非名称）</span>
</span><span class="line"><span class="nv">$ </span>gdrive delete 0BzTeuubJesi
</span><span class="line">
</span><span class="line"><span class="c">## 删除文件夹（文件Id，非名称）</span>
</span><span class="line"><span class="nv">$ </span>gdrive delete -r 0BzTeuubJesi
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">4. 普通上传和下载</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">## 上传文件至制定文件夹</span>
</span><span class="line"><span class="nv">$ </span>gdrive upload -p M1h4M1dGYUhpSFE myFile
</span><span class="line">
</span><span class="line"><span class="c">## 下载文件</span>
</span><span class="line"><span class="nv">$ </span>gdrive download 0BzTeuubJesi
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-4">5. 同步</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">## gdrive sync会标记同步文件，因此不要在同步文件夹中使用gdrive upload或者网页上传文件。未标记文件会被忽略。</span>
</span><span class="line"><span class="c">## 同步列表</span>
</span><span class="line"><span class="nv">$ </span>gdrive sync list
</span><span class="line">
</span><span class="line"><span class="c">## 同步列表内容</span>
</span><span class="line"><span class="nv">$ </span>gdrive sync content VUxydm5iMnM5LWs
</span><span class="line">
</span><span class="line"><span class="c">## 上传</span>
</span><span class="line"><span class="nv">$ </span>gdrive sync upload myLocaldir 0BzTeuubJesi
</span><span class="line">
</span><span class="line"><span class="c">## 下载</span>
</span><span class="line"><span class="nv">$ </span>gdrive sync download 0BzTeuubJesi myLocaldir
</span><span class="line">
</span><span class="line"><span class="c">## 查询所有版本</span>
</span><span class="line">gdrive revision list YUlPWWdLcy1mX2c
</span><span class="line">
</span><span class="line"><span class="c">## 下载某一版本，最后两个Id分别为文件Id和版本Id</span>
</span><span class="line">gdrive revision download YUlPWWdLcy1mX2c Y3JBWEJ5a0gwZndlR3hzWlZubFlUMWFnaHVnPQ
</span><span class="line">
</span><span class="line"><span class="c">## 删除某一版本</span>
</span><span class="line">gdrive revision delete YUlPWWdLcy1mX2c Y3JBWEJ5a0gwZndlR3hzWlZubFlUMWFnaHVnPQ
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">更新记录</h3>

<p>2019年4月27日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Nature Communications上发表文章]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/09/22/how-to-publish-in-nc/"/>
    <updated>2016-09-22T10:25:13+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/09/22/how-to-publish-in-nc</id>
    <content type="html"><![CDATA[<p>我最近看到一个<a href="http://spotidoc.com/doc/159334/how-to-get-published-in-nature-communications">幻灯片</a>，主要讲了在Nature Communications（NC）上发表文章的建议，作者是NC的副主编Nicky Dean。整个幻灯片一种轻松幽默的口吻，讲述了投稿和发表文章过程的各种问题，并提出了针对性建议，值得推荐。以下记录一些关键信息。</p>

<!--more-->

<ol>
  <li>
    <p>投稿前注意事项</p>

    <blockquote>
      <ul>
        <li>
          <p><em>Nature</em>杂志（可能此处也指NC）只考虑有重大创新（conceptually novel）的工作，而不是补充完善数据类型研究。</p>
        </li>
        <li>
          <p>不要有快速发表的想法。</p>
        </li>
        <li>
          <p>不介意会议报告或者预印服务网站发表。</p>
        </li>
        <li>
          <p>介意发表在出版的会议录（conference proceedings）或者其他大规模传播的媒介上。</p>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>准备充分</p>

    <blockquote>
      <ul>
        <li>
          <p>问问自己这个研究适合于本领域的哪些地方？这个研究是否有显著的进步？</p>
        </li>
        <li>
          <p>从一开始就好好准备文稿，比如文稿有清晰的结构、容易理解，并且能够传达出最主要信息。</p>
        </li>
        <li>
          <p>阅读《作者须知》，使得文稿符合杂志的要求。</p>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>准备cover letters</p>

    <blockquote>
      <ul>
        <li>
          <p>解释工作的创新，但不要过了。</p>
        </li>
        <li>
          <p>推荐审稿人，但不能都是自己的熟人。</p>
        </li>
        <li>
          <p>可以推荐需要屏蔽的审稿人。</p>
        </li>
        <li>
          <p>明确一切相关的正在发表或者已经投稿的文章。</p>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>文章要素</p>

    <blockquote>
      <ul>
        <li>
          <p>解释清楚研究领域背景，即回答“我们为什么要重视这项研究？”</p>
        </li>
        <li>
          <p>清晰地描述做了什么工作。</p>
        </li>
        <li>
          <p>连接研究内容和领域背景，以说服别人这项研究确实有重大突破。</p>
        </li>
        <li>
          <p>发表文章的目的是为了更有效地交流，而不是显示自己有聪明!</p>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>NC编辑审核常规要点</p>

    <blockquote>
      <ul>
        <li>
          <p>研究的创新性。</p>
        </li>
        <li>
          <p>支持数据。</p>
        </li>
        <li>
          <p>作者或者他人之前的研究。</p>
        </li>
        <li>
          <p>参考文献是否完成，是否重大遗漏。</p>
        </li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>应对审稿人意见</p>

    <blockquote>
      <ul>
        <li>
          <p>如果被邀请重新提交文章，确保文章解决了<strong>所有</strong>审稿人提出的问题。</p>
        </li>
        <li>
          <p>如果被要求进一步实验，不要尝试规避。</p>
        </li>
        <li>
          <p>保持专业，不要使用侮辱性语言、自大或者恐吓。</p>
        </li>
        <li>
          <p>审稿人也可能会犯错，并且记住他们是自己同行专家。不管怎样，以后大家还是要一起打交道。</p>
        </li>
      </ul>
    </blockquote>
  </li>
</ol>

<h3 id="section">更新记录</h3>

<p>2016年9月22日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HISAT2使用问答]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/09/10/hisat2-faq/"/>
    <updated>2016-09-10T10:32:47+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/09/10/hisat2-faq</id>
    <content type="html"><![CDATA[<p><a href="https://ccb.jhu.edu/software/hisat2/manual.shtml#the-hisat2-build-indexer">HISAT2</a>是一款用于“对应（map）”二代测序数据（全基因组、转录组和外显子组）至目标基因组的工具，用来替代<a href="http://ccb.jhu.edu/software/hisat/index.shtml">HISAT</a>和<a href="http://www.ccb.jhu.edu/software/tophat/index.shtml">TopHat2</a>。本文汇集一些使用HISAT2的常见问题问答。</p>

<h2 id="hisat2">1. 如何解读HISAT2的输出统计？</h2>

<p>一个常见的双端测序样本HISAT2输出统计：</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">10000 reads; of these:
</span><span class="line">  10000 (100.00%) were paired; of these:
</span><span class="line">    650 (6.50%) aligned concordantly 0 times
</span><span class="line">    8823 (88.23%) aligned concordantly exactly 1 time
</span><span class="line">    527 (5.27%) aligned concordantly &gt;1 times
</span><span class="line">    ----
</span><span class="line">    650 pairs aligned concordantly 0 times; of these:
</span><span class="line">      34 (5.23%) aligned discordantly 1 time
</span><span class="line">    ----
</span><span class="line">    616 pairs aligned 0 times concordantly or discordantly; of these:
</span><span class="line">      1232 mates make up the pairs; of these:
</span><span class="line">        660 (53.57%) aligned 0 times
</span><span class="line">        571 (46.35%) aligned exactly 1 time
</span><span class="line">        1 (0.08%) aligned &gt;1 times
</span><span class="line">96.70% overall alignment rate</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>总共10000对reads；</p>
  </li>
  <li>
    <p>8823对concordant pairs（一对既方向匹配又有合适距离的reads）有1次精确比对；527对concordant pairs有1次以上比对；34对disconcordant pairs;</p>
  </li>
  <li>
    <p>616对不是concordant pairs，也不是disconcordant pairs中，571个reads有1次精确比对；1个read有1次以上比对；660个reads没有比对成功。</p>
  </li>
  <li>
    <p>因此，整体比对率为1 - (660 / 2) / 10000</p>
  </li>
</ul>

<h2 id="hisat2-1">2. 使用HISAT2前，是否需要对原始数据进行清洗？</h2>

<p>需要。</p>

<h3 id="section">更新记录</h3>

<p>2016年9月10日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用参考基因组下载地址]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/09/10/reference-genome-location/"/>
    <updated>2016-09-10T07:17:00+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/09/10/reference-genome-location</id>
    <content type="html"><![CDATA[<p>本文收集了一些常用参考基因组的下载网址和补充说明。</p>

<ol>
  <li>
    <p><a href="https://www.ncbi.nlm.nih.gov/genome/">NCBI genome</a></p>
  </li>
  <li>
    <p><a href="http://uswest.ensembl.org/info/data/ftp/index.html">Ensembl FTP</a></p>
  </li>
  <li>
    <p><a href="http://hgdownload.cse.ucsc.edu/goldenPath/">UCSC FTP</a>：cytoband文件可能含有<code>gneg</code>等标识，其中<code>acen</code>表示着丝粒区域、<code>stalk</code>表示近端着丝粒区域、<code>gvar</code>表示异染色质，例如臂间或端粒区域。</p>
  </li>
  <li>
    <p><a href="http://www.gencodegenes.org/">GENCODE</a>：只有人和大鼠，注释较好。</p>
  </li>
  <li>
    <p><a href="http://support.illumina.com/sequencing/sequencing_software/igenome.html">iGenomes</a>：部分模式生物bowtie、bowtie2和BWA索引基因组。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li><a href="https://ccb.jhu.edu/software/hisat2/index.shtml">HISAT2</a>：部分模式生物HISAT2索引基因组。</li>
</ol>

<h3 id="section">更新记录</h3>

<p>2018年8月6日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么不推荐在R语言中随意按照下标操作矩阵]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/07/21/subset-matrix-in-r/"/>
    <updated>2016-07-21T13:35:29+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/07/21/subset-matrix-in-r</id>
    <content type="html"><![CDATA[<p>这篇博文的目的是展示R语言中下标操作矩阵的潜在问题。R语言提供了多种方法提取一个矩阵的单个或者部分元素，不同方法对应的效率在Hadley Wickham的<a href="http://adv-r.had.co.nz/Performance.html#language-performance">Advance R</a>中已有讨论。这些方法中，使用最广泛的是通过下标（行或者列）取值，即操作符<code class="language-R">[</code>。然而，这种方法存在潜在问题，即内存中会拷贝原始对象。</p>

<p>举例：首先建立一个矩阵，之后取这个矩阵除了第一行之外的部分，接下来操作这个部分矩阵。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>manipulate </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="R"><span class="line"><span class="c1">## step1: build matrix</span>
</span><span class="line">n <span class="o">&lt;-</span> <span class="m">8000</span>
</span><span class="line">tmp1 <span class="o">&lt;-</span> <span class="kt">matrix</span><span class="p">(</span>rnorm<span class="p">(</span>n <span class="o">*</span> n<span class="p">),</span> nrow <span class="o">=</span> n<span class="p">,</span> ncol <span class="o">=</span> n<span class="p">)</span>
</span><span class="line"><span class="kp">gc</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c1">## step2: manipulate a subset of matrix</span>
</span><span class="line"><span class="kp">sink</span><span class="p">(</span><span class="s">&#39;/dev/null&#39;</span><span class="p">)</span>
</span><span class="line"><span class="kp">apply</span><span class="p">(</span>tmp1<span class="p">[</span><span class="m">2</span><span class="o">:</span>n<span class="p">,</span> <span class="p">],</span> <span class="m">1</span><span class="p">,</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">)</span> x<span class="p">[</span><span class="m">1</span><span class="p">])</span>
</span><span class="line"><span class="kp">sink</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c1">## step3: garbage collection</span>
</span><span class="line"><span class="kp">gc</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>内存使用情况如下：</p>

<p><img src="http://yulongniu.bionutshell.org/images/R_apply_memory.png" title="image" alt="UCSC下载rRNA注释" /></p>

<ul>
  <li>
    <p>标记1内存上升，因为建立了<code class="language-R">tmp1</code>的矩阵；</p>
  </li>
  <li>
    <p>标记2内存再次上升，主要因为使用下标取矩阵操作，<code class="language-R">tmp1[2:n, ]</code>；</p>
  </li>
  <li>
    <p>标记3内存下降，因为手动执行垃圾回收。</p>
  </li>
</ul>

<p>可以明显看到内存中多余的垃圾对象。如果使用<code class="language-R">for</code>循环形式，就可以有效避免内存对象拷贝。虽然，R在内存空间不足时，会自动执行<code class="language-R">gc()</code>。但是，执行程序时，不能全指望自动垃圾回收，毕竟有时回收得并不及时，而新的对象又相继生成。这种情况下，内存空间不足就成为很严重的问题。</p>

<p>R版本3.3.1。</p>

<h3 id="section">更新记录</h3>

<p>2016年7月21日</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言指针记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c/"/>
    <updated>2016-04-17T16:42:25+02:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/04/17/pointers-in-c</id>
    <content type="html"><![CDATA[<h2 id="c">1. C语言指针基础</h2>

<p>C语言的指针设计是一致和优雅的。C语言中“指针（pointer）”就是<strong>地址</strong>（所以不能用普通整数储存地址），“指针变量（pointer variable）”是存储地址的变量。一个指针变量，<strong>只能</strong>指向一个特定类型的变量，比如整数、浮点数、字符或者指针。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Initiate a pointer </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">tmp1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tmp2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* &quot;=&quot; does not mean &quot;assignment&quot;, it just means &quot;initiating&quot; */</span>
</span><span class="line"><span class="cm">/* p is the address of tmp1, *p is equal to the value of tmp1*/</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tmp1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class="line"><span class="n">q</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tmp2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* p points to tmp1, q points to tmp2, now the value of tmp2 is 1*/</span>
</span><span class="line"><span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* p and q now both points to tmp1*/</span>
</span><span class="line"><span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<h2 id="section">2. 指针运算有且只有三种</h2>

<ul>
  <li>
    <p>指针加一个整数，该表达式值为同类型指针；</p>
  </li>
  <li>
    <p>指针减一个整数，该表达式值为同类型指针；</p>
  </li>
  <li>
    <p>指针与指针相减，该表达式值为整数。</p>
  </li>
</ul>

<hr />
<p>指针与<code>++</code>和<code>--</code>结合的表达式</p>

<table>
  <thead>
    <tr>
      <th>表达式</th>
      <th>意义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>*p++</code></td>
      <td>表达式值为p指针指向内容，之后指针自增</td>
    </tr>
    <tr>
      <td><code>(*p)++</code></td>
      <td>表达式值为p指针指向内容，之后指向内容自增</td>
    </tr>
    <tr>
      <td><code>++*p</code></td>
      <td>表达式值为p指针指向内容自增，指针不变</td>
    </tr>
    <tr>
      <td><code>*++p</code></td>
      <td>表达式值为p指针自增后指向内容</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="section-1">3. 指针与数组</h2>

<ul>
  <li>
    <p>C语言只有一维数组，其中元素可以是数（整数或浮点数）、字符和指针（字符串、其他类型数组或者其他类型指针）。</p>
  </li>
  <li>
    <p>数组地址为第一个元素地址。可以使用数组名作为指向数组第一个元素的指针，但数组名<span style="color: red">不能</span>被修改，例如不能被重新赋值。因此，假如<code>a</code>数组，<code>a+i</code>等价与<code>&amp;a[i]</code>，<code>*(a+i)</code>等价与<code>a[i]</code>。</p>
  </li>
  <li>
    <p>对于二维数组<code>a</code>，<code>a</code>表示指向第一行的指针（即指针指向一维数组），<code>a[0]</code>表示指向第一行第一个元素的指针。理解<code>a[0]</code>：<code>a[0]</code>等价与<code>*(a + 0)</code>，表示指针<code>a</code>指向的内容，即第一行数组；同时，一维数组名表示指向第一个元素的指针。</p>
  </li>
  <li>
    <p>“字符串字面量（string literal）”被作为字符数组储存，类型为<code>char *</code>，因此对于字符串变量<code>char s[] = "abc";</code>和<code>char *s = "abc";</code>都合法。但是，<code>int a[] = {1, 2, 3};</code>合法，<s>int *a = {1, 2, 3};</s>非法。</p>
  </li>
</ul>

<hr />

<table>
  <thead>
    <tr>
      <th>数组类型</th>
      <th>初始化声明<sup>1</sup></th>
      <th>函数形参声明的指针形式<sup>2</sup></th>
      <th>第一个元素指针声明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>元素为整数的数组</td>
      <td><code>int a[LEN]</code></td>
      <td><code>int *</code></td>
      <td><code>int *p = &amp;a[0]</code>或<code>int *p = a</code></td>
    </tr>
    <tr>
      <td>元素为整数数组的数组（“二维数组”）</td>
      <td><code>int a[ROWNUM][COLNUM]</code></td>
      <td><code>int (*)[COLNUM]</code></td>
      <td><code>int *p = &amp;a[0]</code>或<code>int (*p)[COLNUM] = a</code>　</td>
    </tr>
    <tr>
      <td>元素为字符的数组（“字符串”）</td>
      <td><code>char a[LEN]</code></td>
      <td><code>char *</code></td>
      <td><code>char *p = &amp;a[0]</code>或<code>char *p = a</code></td>
    </tr>
    <tr>
      <td>元素为字符串指针的数组（“字符串数组”）</td>
      <td><code>char *a[LEN]</code></td>
      <td><code>char **</code>或<code>char *[LEN]</code></td>
      <td><code>char **p = &amp;a[0]</code>或<code>char **p = a</code></td>
    </tr>
    <tr>
      <td>元素为结构、联合或枚举的数组</td>
      <td><code>struct t a[LEN]</code></td>
      <td><code>struct t *</code></td>
      <td><code>struct t *p = &amp;a[0]</code>或<code>struct t *p = a</code></td>
    </tr>
  </tbody>
</table>

<p><sup>1</sup>：初始化声明表示在声明同时初始化的形式，比如<code>int a[3] = {1, 2, 3}</code>、<code>char a[] = 'hello'</code>或者<code>char *a[] = {"hello", "world!"}</code>。</p>

<p><sup>2</sup>：在函数中声明形参时，对应的指针类型。形参可以是完整类型或者元素类型，比如，形参<code>char *a[LEN]</code>是完整类型，形参<code>char **a</code>是元素类型；再比如，形参<code>int a[ROWNUM][COLNUM]</code>是完整类型，形参<code>int (*a)[COLNUM]</code>是元素类型；再比如，形参<code>char a[]</code>是完整类型，形参<code>char *a</code>是元素类型。编译器把数组型的形参视为指针。</p>

<hr />

<h2 id="section-2">4. 指针与函数</h2>

<ul>
  <li>
    <p>C语言传入函数的都是值（数组被当做指针传入），而且形参对应对象的一个副本。</p>

    <ul>
      <li>
        <p>形参为指针，可以改变指向的内容。</p>
      </li>
      <li>
        <p>形参为数组，传入指针（指向第一个元素地址）副本。因此，即便是数组名，也可以修改，即可以把数组名当做一个指针用。也可以使用指针传入部分数组。如下代码合法：</p>
      </li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">TestFun</span><span class="p">(</span><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">  <span class="o">++</span><span class="n">a</span><span class="p">;</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">5. 注意事项</h2>

<ul>
  <li>
    <p>留意未初始化指针，修改未初始化指针所指向内容是<span style="color: red">危险</span>的。字符指针<span style="color: red">必须</span>初始化，比如指向已有字符变量、字符串字面量或动态分配字符串。</p>
  </li>
  <li>
    <p>已有数组名<span style="color: red">不能被</span>重新赋值，<span style="color: red">不能</span>指向其他地址。</p>
  </li>
  <li>
    <p>函数返回指针时，<span style="color: red">不能</span>返回指向局部自动变量的指针，因为局部变量和对应指针在返回时销毁。可以返回指针形式的形参、指向外部变量的指针、指向声明为<code class="language-c">static</code>的局部变量和指向动态分配内存的指针。如下代码合法：</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>return pointer points to malloc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="nf">Add</span><span class="p">(</span><span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">new</span><span class="p">;</span>
</span><span class="line">  <span class="n">new</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">node</span><span class="p">));</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">  <span class="k">return</span> <span class="n">new</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">补充材料</h3>

<ul>
  <li><a id="pointer_array">Pointers and arrays in C</a></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Using pointers to operate arrays in c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define N 5</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintVal</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)[</span><span class="n">colnum</span><span class="p">]);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array2</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="o">**</span><span class="n">a</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray2</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">testVal</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">  <span class="n">PrintVal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">testVal</span><span class="p">);</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">testArray</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class="line">  <span class="n">PrintArray</span><span class="p">(</span><span class="n">testArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">char</span> <span class="n">testString</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;hell&quot;</span><span class="p">;</span>
</span><span class="line">  <span class="n">PrintString</span><span class="p">(</span><span class="n">testString</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">int</span> <span class="n">test2Array</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">  <span class="n">Print2Array</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">test2Array</span><span class="p">);</span>
</span><span class="line">  <span class="kt">int</span> <span class="o">*</span><span class="n">test2Array2</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="n">test2Array</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">test2Array</span><span class="p">[</span><span class="mi">4</span><span class="p">]};</span>
</span><span class="line">  <span class="n">Print2Array2</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">test2Array2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kt">char</span> <span class="o">*</span><span class="n">testStringArray</span><span class="p">[</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Hello,&quot;</span><span class="p">,</span> <span class="s">&quot;it&quot;</span><span class="p">,</span> <span class="s">&quot;is&quot;</span><span class="p">,</span> <span class="s">&quot;me&quot;</span><span class="p">,</span> <span class="s">&quot;!&quot;</span><span class="p">};</span>
</span><span class="line">  <span class="n">PrintStringArray</span><span class="p">(</span><span class="n">testStringArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">  <span class="n">PrintStringArray2</span><span class="p">(</span><span class="n">testStringArray</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintVal</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintArray</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintString</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)[</span><span class="n">colnum</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)[</span><span class="n">colnum</span><span class="p">];</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">colnum</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">q</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">rownum</span><span class="p">;</span> <span class="o">++</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">Print2Array2</span><span class="p">(</span><span class="kt">int</span> <span class="n">colnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rownum</span><span class="p">,</span> <span class="kt">int</span> <span class="o">**</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">colnum</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">q</span> <span class="o">&lt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">+</span> <span class="n">rownum</span><span class="p">;</span> <span class="o">++</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">char</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">PrintStringArray2</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="kt">char</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class="line">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结果为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  2
</span><span class="line">  2  3  5  0  0
</span><span class="line">hell
</span><span class="line">  1  2  3  4  5
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  1  2  3  4  5
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">  0  0  0  0  0
</span><span class="line">Hello,
</span><span class="line">it
</span><span class="line">is
</span><span class="line">me
</span><span class="line">!
</span><span class="line">Hello,
</span><span class="line">it
</span><span class="line">is
</span><span class="line">me
</span><span class="line">!</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">参考资料</h3>

<ul>
  <li>KN King: <a href="http://www.amazon.com/Programming-Modern-Approach-2nd-Edition/dp/0393979504">C Programming: A Modern Approach, 2nd Edition</a>, 2008.</li>
</ul>

<h3 id="section-6">更新记录</h3>

<p>201６年４月17日</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker使用记录]]></title>
    <link href="http://yulongniu.bionutshell.org/blog/2016/03/11/docker-use/"/>
    <updated>2016-03-11T09:53:51+01:00</updated>
    <id>http://yulongniu.bionutshell.org/blog/2016/03/11/docker-use</id>
    <content type="html"><![CDATA[<p>关于Docker的安装和使用，有详细的<a href="https://docs.docker.com/">文档</a>可供参考。本文收集一些有趣和重要的记录。</p>

<h2 id="docker">1. 普通用户权限执行Docker</h2>

<p>创建<code>docker</code>用户组并添加普通用户。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo groupadd docker
</span><span class="line"><span class="nv">$ </span>sudo usermod -aG docker myUserName
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注销后，再次登录即可。</p>

<!--more-->

<h2 id="docker-1">2. Docker命令集锦</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 测试Docker</span>
</span><span class="line"><span class="nv">$ </span>docker run hello-world
</span><span class="line">
</span><span class="line"><span class="c"># Docker镜象列表</span>
</span><span class="line"><span class="nv">$ </span>docker image ls
</span><span class="line"><span class="nv">$ </span>docker image ls --digests
</span><span class="line">
</span><span class="line"><span class="c"># Docker容器列表</span>
</span><span class="line"><span class="nv">$ </span>docker container ls
</span><span class="line"><span class="nv">$ </span>docker container ls --all
</span><span class="line">
</span><span class="line"><span class="c"># 列出容器</span>
</span><span class="line"><span class="nv">$ </span>docker ps
</span><span class="line"><span class="nv">$ </span>docker ps -al
</span><span class="line">
</span><span class="line"><span class="c"># 终止所有容器</span>
</span><span class="line"><span class="nv">$ </span>docker stop <span class="k">$(</span>docker ps -aq<span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 删除镜像</span>
</span><span class="line"><span class="nv">$ </span>docker image rm myImg@sha256:xxx
</span><span class="line">
</span><span class="line"><span class="c">## 删除虚悬镜像</span>
</span><span class="line"><span class="nv">$ </span>docker ps -a <span class="p">|</span> grep <span class="s2">&quot;Exited&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1 }&#39;</span><span class="p">|</span>xargs docker stop
</span><span class="line"><span class="nv">$ </span>docker ps -a <span class="p">|</span> grep <span class="s2">&quot;Exited&quot;</span> <span class="p">|</span> awk <span class="s1">&#39;{print $1 }&#39;</span><span class="p">|</span>xargs docker rm
</span><span class="line"><span class="nv">$ </span>docker images<span class="p">|</span>grep none<span class="p">|</span>awk <span class="s1">&#39;{print $3 }&#39;</span><span class="p">|</span>xargs docker rmi
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">3. 运行镜象</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>docker run -it --rm myDockerImage myCommand
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">4. 挂载卷</h2>

<p>挂载文件目录至容器，可以挂载多个。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>docker run -it --rm -v /localpath/data:/data -v /localpath/file:/file myDockerImage myCommand
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">5. 保存和本地载入镜像</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># 查看镜像列表</span>
</span><span class="line"><span class="nv">$ </span>docker images
</span><span class="line">
</span><span class="line"><span class="c"># 保存镜像</span>
</span><span class="line"><span class="nv">$ </span>docker save -o dockerImage.tar /example/dockerImage
</span><span class="line">
</span><span class="line"><span class="c"># 载入镜像</span>
</span><span class="line"><span class="nv">$ </span>docker load --input dockerImage.tar
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">6. 修改镜像和容器储存位置</h2>

<p>查看镜像储存位置，例如<code>/var/lib/docker</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>docker info <span class="p">|</span> grep <span class="s2">&quot;Docker Root Dir&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>移动镜像和容器存储位置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>mv /var/lib/docker /localpath/docker
</span><span class="line"><span class="nv">$ </span>ln -s /localpath/docker /var/lib/docker
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-idrefa"><a id="Ref">参考网址</a></h3>

<ul>
  <li>
    <p><a href="https://docs.docker.com/">Docker官方文档</a></p>
  </li>
  <li>
    <p><a href="https://www.gitbook.com/book/yeasy/docker_practice/details">Docker — 从入门到实践</a></p>
  </li>
  <li>
    <p><a href="https://www.centos.bz/2017/08/docker-delete-none-images/">删除Docker镜像中为none的镜像</a></p>
  </li>
</ul>

<h3 id="section-4">更新记录</h3>

<p>2018年12月16日</p>
]]></content>
  </entry>
  
</feed>
