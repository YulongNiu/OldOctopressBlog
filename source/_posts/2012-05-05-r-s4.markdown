---
layout: post
title: "R面向对象编程S4"
date: 2012-05-05 15:19:36 +0800
comments: true
published: true
categories: R
---


## 1. 一些S3的铺垫 ##

在博文“[Linux安装R语言包](http://yulongniu.bionutshell.org/blog/2010/09/04/linux-install-r/)”描述了如何查看一个函数的源代码，其中涉及了例如`methods()`函数，用来查看一个S3泛函（S3 generic）的方法。在<span style="color: blue">pryr</span>包中，提供了更加便捷的查看方法。

{% codeblock lang:R  pryr check objects and methods%}
library('pryr')

## object is base type, S3, S4 or RC
otype(obj)

## function is genetic or method
ftype(method)
{% endcodeblock %}

<!--more-->

## 2. 类 ##

### 2.1 建立新类 ###

{% raw %}
```
setClass(Class, representation, prototype, contains=character(),
         validity, access, where, version, sealed, package,
         S3methods = FALSE, slots)
```
{% endraw %}

> * Class：类名。
> 
> * slots：带名字的列表或者字符向量，名字表示slot，内容表示slot对应的类名。
>
> * contains：父类名，表示继承关系。
>
> * prototype：带名字的列表或`prototype()`，设定默认值。除了空值外，不建议添。如果不设定，会自动指定一个符合类型的空值。设定时，要结合`validity`定义，因为默认值不会被检查，因为即使不符合`validity`定义，也可以通过`validObject()`检查。
>
> * validity：函数，检查创建对象是否符合该类要求。建议添加，也可以使用`setValidity()`后期添加。
>
> * where：环境（少用）。
> 
> * sealed：是否封闭，如果设定为`TRUE`，其他`setClass()`不能调用该类。
>
> * package：包名（少用）
> 
> * S3methods/representation/access/version：在3.0.0版本后不建议使用。

例子：

{% codeblock lang:R Set new S4 classes %}
## new class
setClass(Class = 'trick',
         slots = c(id = 'character', time = 'matrix'),
         validity = function(object) {
           if (length(object@id) != nrow(object@time)) {
             warns <- paste('length of id is', length(object@id), 'is not equal to row number of time', nrow(object@time))
             return(warns)
           } else {
             return(TRUE)
           }},
         prototype = list(id = character(), time = matrix(0, 0, 0)))

setClass(Class = 'trickNum',
         slots = c(number = 'numeric'),
         contains = 'trick')

setClass(Class = 'trickMult',
         slots = c(trick1 = 'trick', trick2 = 'trick'))

## from setClass() help document, extend from built-in data type
setClass("numWithId", 
         slots = c(id = "character"),
         contains = "numeric")

## without slots
numNoSlot <- setClass("numWithId", contains = "numeric")
{% endcodeblock %}

### 2.2 创建、查看和删除对象 ##

创建对象：

{% raw %}
```
new(Class, ...)
```
{% endraw %}

> * Class：类名。
> 
> * ...：各个slot赋值。如果没有赋值，则使用初始化值。

在使用`new()`建立新的对象之前，会经历“初始化”。初始化可以对新建对象做一些事先固定的操作，比如给某一个slot添加名字等。这需要使用`setMethod`重新定义`initialize()`泛函，这个过程必须考虑使用`callNextMethod()`，以方便子类继承和调用slot。同时，重新定义过程需要考虑“空对象”问题。

{% codeblock lang:R initialize %}
## first initialize can not be correctly inherited
setMethod(f = 'initialize',
          signature = 'trick',
          definition = function(.Object, id = character(), time = matrix(0, 0, 0)) {

            colNum <- ncol(time)
            if (colNum > 0) {
              colnames(time) <- paste0(letters[1:colNum], 1:colNum)
            } else {}

            .Object@id <- id
            .Object@time <- time

            return(.Object)
          })

t1 <- new('trick', id = letters[1:3], time = matrix(1:9, ncol = 3))
## error
try(new('trickNum', id = letters[1:3], time = matrix(1:9, ncol = 3), number = 5:6))

## second initialize using callNextMethod() works well
setMethod(f = 'initialize',
          signature = 'trick',
          definition = function(.Object, ...) {

            .Object <- callNextMethod()

            colNum <- ncol(.Object@time)
            if (colNum > 0) {
              colnames(.Object@time) <- paste0(letters[1:colNum], 1:colNum)
            } else {}

            return(.Object)
          })
t1 <- new('trick', id = letters[1:3], time = matrix(1:9, ncol = 3))
tn1 <- new('trickNum', id = letters[1:3], time = matrix(1:9, ncol = 3), number = 5:6)
{% endcodeblock %}


查看对象和类：

* `getClass('className')`：查询一个类的情况，也包括该类的继承情况。返回结果的“Subclasses”表示含有的子类，“Extends”表示父类是什么。

* `getSlots('className')`：查询某一个class的slots。

* `slotNames(objName)`：查询一个对象的slots名称。

* `@`和`slot(objName, 'slotName')`：查询一个对象的slot的值。也可以使用`@ <- somVal`和`slot(objName, 'slotName') <- someVal`赋值，只会检查slot对应的类型，不会检查`validity`设定。一定不要执行`slot(objName, 'slotName', check = FALSE) <- someVal`，否则连类型都不检查。`@`定义在<span style="color: blue">base</span>包，`slot()`在<span style="color: blue">methods</span>包。

* `.hasSlot(objName, 'slotName')`：查询一个对象是否有某个slot。

删除对象：

* `removeClass('className')`：删除类，但是会保留这个类的方法和子类。

## 3. 方法 ##

### 3.1 建立方法 ###

建立方法时，使用是否存在该方法的泛函：

* 如果不存在，首先使用`setGeneric()`建立泛函；

* 如果存在，使用`setMethod()`建立具体方法。

{% raw %}
```
setGeneric(name, def= , group=list(), valueClass=character(),
           where= , package= , signature= , useAsDefault= ,
           genericFunction= , simpleInheritanceOnly = )
```
{% endraw %}

> * name：字符串，泛函名称。
> 
> * def：函数，定义新的泛函，比如结合`standardGeneric()`函数。
>
> * group：字符串，指示该泛函所属的泛函组。
>
> * valueClass：字符向量，一个或多个类，强制规定该泛函返回类型必须符合或包括类。
>
> * where：环境（少用）。
> 
> * package：包名，一般自动识别。
>
> * signature：名字向量。
>
> * useAsDefault：推翻默认设置。
>
> * genericFunction：不建议使用。
>
> * simpleInheritanceOnly：逻辑值。

{% raw %}
```
setMethod(f, signature=character(), definition,
          where = topenv(parent.frame()),
          valueClass = NULL, sealed = FALSE)
```
{% endraw %}

> * f：字符串，泛函名称。
> 
> * signature：字符向量，表示对应的类名。两个特殊类`"missing"`和`"ANY"`，分别表示对应的变量“不能出现在方法调用中”和“可以是任何类”。如果一个变量没有被指定，则默认为`"ANY"`。
>
> * definition：函数，定义方法。在创建函数时，特别是扩展已有泛函，`f(para)`中的变量与原始泛函的数量和名称一致。比如在`print(x, ...)`，变量是`x`和`...`。而在`show(object)`中，变量是`x`。可以使用`args()`查看泛函的参数。
>
> * where：环境（少用）。
> 
> * valueClass：废弃变量。
>
> * sealed：是否封闭，如果设定为`TRUE`，其他`setMethod()`不能重新定义该方法，但可以被删除和重新指定。

### 3.2 创建、查看和删除方法 ###


查看方法：

* 


## 4. 确认检查 ##

创建对象时：

1. 自动检查每个slot赋值类型是否正确，这种检查会一直被子类和slot含有该类的类（简称“slot含有类”）继承。

2. 如果设定了`validity`，这种检查将一直被子类继承，但是slot含有类不会去检查slot赋值是否正确。对于这种情况，将`validObject(object, test = FALSE, complete = FALSE)`函数的`complete`参数设定为`TRUE`，可以检查出问题。

修改slot时：

使用`slot()`和`@`，只会检查slot类型是否正确，不会检查`validity`设定。不建议用户直接使用`@`。


推荐在`setClass()`建立类时，同时设定好`validity`，而不是使用`setValidity(Class, method, where = topenv(parent.frame()))`后续设定。

{% codeblock lang:R validate %}
## correct "trick" obj
t1 <- new('trick', id = letters[1:3], time = matrix(1:9, ncol = 3))
## not validated "trick" obj
t2 <- t1
t2@id <- letters[1:4]
## return FALSE
validObject(t2)
## error
try(new('trick', id = letters[1:3], time = 1:4))
try(new('trick', id = letters[1:3], time = matrix(1:8, ncol = 4)))

## correct "trickNum" obj
tn1 <- new('trickNum', id = letters[1:3], time = matrix(1:9, ncol = 3), number = 5:6)
## error because can not pass "trick" validate
try(new('trickNum', id = letters[1:3], time = 1:4, number = 5:6))
try(new('trickNum', id = letters[1:3], time = matrix(1:8, ncol = 4), number = 5:6))

## error
try(new('trickMult', trick1 = new('trick', id = letters[1:3], time = 1:4)))
try(new('trickMult', trick1 = new('trick', id = letters[1:3], time = matrix(1:8, ncol = 4))))

tm1 <- new('trickMult', trick1 = t2)
## return TRUE
validObject(tm1)
## return FALSE
validObject(tm1, complete = TRUE)
{% endcodeblock %}






### 参考资料 ###

1. [A (Not So) Short Introduction to S4](https://cran.r-project.org/doc/contrib/Genolini-S4tutorialV0-5en.pdf) 

2. [Advance R -- S4](http://adv-r.had.co.nz/S4.html) 


### 更新记录 ###

2016年11月14日
